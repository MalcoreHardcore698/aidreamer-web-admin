{"version":3,"sources":["assets/icons/united-kingdom.svg","assets/icons/russia.svg","assets/icons/belarus.svg","serviceWorker.js","utils/types.js","utils/reducers.js","storeFactory.js","initialState.js","components/AuthContext.js","utils/functions.js","hooks/auth.hook.js","components/ui/Row.js","components/ui/Container.js","components/ui/Alert.js","components/ui/Skeleton.js","components/ui/Button.js","components/ui/Divider.js","components/ui/Navigation.js","components/ui/Transition.js","components/ui/Modal.js","components/ui/Message.js","components/content/ViewEmpty.js","components/ui/Query.js","components/ui/Subscription.js","components/ui/List.js","utils/queries.js","components/content/ViewNotifications.js","components/ui/Input.js","components/ui/TextArea.js","utils/actions.js","components/content/ViewSettings.js","components/ui/Checkbox.js","assets/images/logo.js","components/Auth.js","components/ui/Headline.js","components/Home.js","components/ui/Search.js","components/ui/Dropdown.js","components/ui/Radiobox.js","utils/config.js","components/ui/Table.js","components/ui/Select.js","components/content/AddUser.js","components/content/EditUser.js","components/ui/Mutation.js","components/content/DeleteEntries.js","components/Users.js","components/ui/Dropzone.js","components/ui/Toggler.js","components/content/AddArticle.js","components/content/EditArticle.js","components/Articles.js","components/content/AddOffer.js","components/content/EditOffer.js","components/Offers.js","components/content/AddHub.js","components/content/EditHub.js","components/Hubs.js","components/content/AddChat.js","components/content/EditChat.js","components/Chats.js","components/content/AddImage.js","components/content/EditImage.js","components/Images.js","components/content/AddAvatar.js","components/content/EditAvatar.js","components/Avatars.js","components/content/AddIcon.js","components/content/EditIcon.js","components/Icons.js","components/content/EditRole.js","components/content/AddRole.js","components/Roles.js","components/content/AddLanguage.js","components/content/EditLanguage.js","components/Languages.js","routes.js","components/Main.js","components/App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","SET_USER","SET_FORM","SET_DATA_TABLE","SET_DOCUMENT","SET_DOCUMENTS","ADD_OFFER","SET_CHAT","CLOSE_CHAT","reducers","combineReducers","user","state","action","type","C","payload","ADD_CHAT","chats","map","chat","userId","chatId","filter","document","documents","table","createStore","applyMiddleware","thunk","noop","AuthContext","createContext","sessionID","login","logout","isAuthenticated","getMaxPage","data","limit","arr","maxPage","length","slice","useAuth","useState","setSessionID","ready","setReady","useCallback","value","name","expiresDays","date","Date","setTime","getTime","expires","toUTCString","cookie","JSON","stringify","setCookie","useEffect","session","cname","ca","decodeURIComponent","split","i","c","charAt","substring","indexOf","getCookie","props","Children","children","classes","className","join","style","clear","sticky","message","component","options","Button","child","disabled","path","handler","handlerClick","e","a","preventDefault","to","onClick","Ripple","color","during","classNames","distance","horizontal","d","Math","round","margin","Block","links","buttons","dashboard","axis","link","key","Fragment","groupTitle","exact","button","showContent","animation","duration","unmountOnExit","handlerEnter","handlerExited","CSSTransition","in","timeout","onEnter","onExited","getPath","navigator","Switch","Childrens","Child","Route","close","back","jump","Compoent","setNavigator","content","setContent","setAnimation","title","home","routes","center","hideModal","closeByBackground","transitions","fade","handlerExit","swing","handlerBack","setTimeout","handlerJump","handlerClose","id","lockdown","icon","faArrowLeft","find","route","compare","getTitle","text","padding","useQuery","query","variables","loading","error","refetch","pseudo","height","widthRandomness","heightRandomness","gridColumn","skeletons","count","push","skeleton","renderSkeleton","useSubscription","subData","list","handlerItem","item","LOGIN","gql","REGISTER","GET_ALL_USERS","SUB_ALL_USERS","GET_USER","EDIT_USER","DELETE_USERS","GET_ALL_CHAT_TYPES","DELETE_CHATS","GET_ALL_CHATS","SUB_ALL_CHATS","SUB_NOTIFICATIONS","GET_USER_NOTIFICATIONS","GET_ALL_HUBS","SUB_ALL_HUBS","ADD_HUB","EDIT_HUB","DELETE_HUBS","GET_ALL_ARTICLES","SUB_ARTICLES","ADD_ARTICLE","EDIT_ARTICLE","DELETE_ARTICLES","GET_ALL_OFFERS","SUB_ALL_OFFERS","EDIT_OFFER","DELETE_OFFERS","GET_ALL_ROLES","ADD_ROLE","EDIT_ROLE","DELETE_ROLES","SUB_ALL_ROLES","GET_ALL_PERMITIONS","GET_ALL_IMAGES","SUB_ALL_IMAGES","DELETE_IMAGES","GET_ALL_AVATARS","SUB_ALL_AVATARS","ADD_AVATAR","DELETE_AVATARS","GET_ALL_ICONS","SUB_ALL_ICONS","ADD_ICON","DELETE_ICONS","GET_ALL_LANGUAGES","ADD_LANGUAGE","DELETE_LANGUAGES","Query","Subscription","notifications","allUserNotifications","src","img","alt","createdAt","format","ref","defaultValue","placeholder","autoComplete","onChange","onKeyPress","resize","setUser","SettingsEditProfileContent","useSelector","setDisabled","SettingsHomeContent","auth","useContext","dispatch","useDispatch","faPen","faLock","faFlag","faQuestion","SettingsQuestionContent","SettingsLanguageContent","langs","EnglishFlagIcon","label","RussianFlagIcon","BelarusFlagIcon","checked","setChecked","el","handlerChecked","faCheck","width","viewBox","aria-hidden","focusable","data-prefix","data-icon","role","xmlns","fill","Login","setLoading","setError","useMutation","onLogin","setName","password","setPassword","settings","setSettings","target","area","then","catch","err","msg","ImageLogo","showModal","Search","faFilter","styles","dropdown","dropdownRef","useRef","config","proxy","api","apiWs","get","limitList","Manage","actions","dishands","Action","Table","max","gridable","empty","page","setPage","setTable","limits","setLimits","headers","setHeaders","Descriptor","size","setDropdown","Descriptors","faEye","reduce","prev","curr","t","visible","Headers","trace","cell","iter","Header","header","Body","Trace","Cell","background","replace","Pagination","min","pages","renderPages","faArrowRight","setDishands","l","dataTable","start","end","getPage","_id","j","sortabled","hasOwnProperty","tr","Menu","components","avatar","setRole","useForm","handleSubmit","register","errors","onSubmit","form","phone","email","confirmPassword","allRoles","setAvatar","username","allAvatars","entry","entries","docs","ents","Mutation","users","allUsers","updatedAt","DeleteEntries","doc","faTrash","EditUser","AddUser","faPlus","preview","setPreview","setImage","faImage","maxFiles","multiple","onChangeStatus","status","meta","file","previewUrl","inputContent","accept","targets","handlerState","hub","setHub","image","_status","_setStatus","author","description","body","required","allHubs","article","articles","allArticles","comments","EditArticle","AddArticle","offer","_user","_setUser","u","offers","allOffers","EditOffer","AddOffer","setTitle","setDescription","slogan","setSlogan","setColor","allIcons","hubs","countUsers","EditHub","AddHub","chatType","setChatType","sender","setSender","reciever","setReciever","members","setMembers","includes","member","allChatTypes","closeMenuOnSelect","isMulti","_sender","_setSender","_reciever","_setReciever","_members","_setMembers","allChats","messages","EditChat","AddChat","_image","_setImage","images","allImages","ent","EditImage","AddImage","order","parseInt","complexity","avatars","EditAvatar","AddAvatar","icons","EditIcon","AddIcon","permissions","p","setPermissions","allPermissions","roles","EditRole","AddRole","code","language","allLanguages","EditLanguage","AddLanguage","Home","Users","Articles","Offers","Hubs","Chats","Roles","Images","Avatars","Icons","Languages","getButton","Content","setClosedByBackground","setModal","setCenterModal","overflow","ViewEmpty","SVGLogo","faUsers","faNewspaper","faAddressBook","faGamepad","faPaperPlane","faTheaterMasks","faIcons","faGlobeAsia","ViewNotifications","faBell","faCog","Auth","SkeletonContent","getUser","Provider","Main","wsLink","WebSocketLink","uri","reconnect","uploadLink","createUploadLink","credentials","splitLink","definition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","store","storeFactory","ReactDOM","render","getElementById","serviceWorker","registration","unregister","console"],"mappings":"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","file":"static/js/main.5b76655f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/united-kingdom.e5564902.svg\";","module.exports = __webpack_public_path__ + \"static/media/russia.6e8cc30d.svg\";","module.exports = __webpack_public_path__ + \"static/media/belarus.ac31b781.svg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export default {\r\n    SET_USER: 'SET_USER',\r\n    SET_FORM: 'SET_FORM',\r\n    SET_DATA_TABLE: 'SET_DATA_TABLE',\r\n    SET_DOCUMENT: 'SET_DOCUMENT',\r\n    SET_DOCUMENTS: 'SET_DOCUMENTS',\r\n\r\n    ADD_OFFER: 'ADD_OFFER',\r\n\r\n    SET_CHAT: 'SET_CHAT',\r\n    CLOSE_CHAT: 'CLOSE_CHAT'\r\n}","import { combineReducers } from 'redux'\r\nimport C from './types'\r\n\r\nexport function userReducer(state = {}, action) {\r\n    switch (action.type) {\r\n        case C.SET_USER:\r\n            return action.payload.user\r\n        case C.ADD_CHAT:\r\n            return {\r\n                ...state,\r\n                chats: state.chats.map(chat => (chat.userId !== action.payload.chatId) ? ({\r\n                    chatId: action.payload.chatId\r\n                }) : chat),\r\n            }\r\n        case C.CLOSE_CHAT:\r\n            return {\r\n                ...state,\r\n                chats: state.chats.filter(chat =>\r\n                    (chat.chatId !== action.payload.chatId)\r\n                )\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport function chatReducer(state={}, { type, payload }) {\r\n    switch (type) {\r\n        case C.SET_CHAT:\r\n            return payload.chat\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport function documentReducer(state={}, { type, payload }) {\r\n    switch (type) {\r\n        case C.SET_DOCUMENT:\r\n            return payload.document\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport function documentsReducer(state={}, { type, payload }) {\r\n    switch (type) {\r\n        case C.SET_DOCUMENTS:\r\n            return payload.documents\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport function tableReducer(state=[], { type, payload }) {\r\n    switch(type) {\r\n        case C.SET_DATA_TABLE:\r\n            return payload.table\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const reducers = combineReducers({\r\n    user: userReducer,\r\n    chat: chatReducer,\r\n    document: documentReducer,\r\n    documents: documentsReducer,\r\n    table: tableReducer\r\n})","import {\r\n    createStore,\r\n    applyMiddleware\r\n} from 'redux'\r\n\r\nimport thunk from 'redux-thunk'\r\nimport { reducers } from './utils/reducers'\r\nimport initialState from './initialState'\r\n\r\n\r\nexport default createStore(\r\n    reducers,\r\n    initialState,\r\n    applyMiddleware(thunk)\r\n)","export default {\r\n    user: null,\r\n    document: null,\r\n    documents: [],\r\n    table: []\r\n}","import { createContext } from 'react'\r\n\r\nfunction noop() {}\r\n\r\nexport const AuthContext = createContext({\r\n    sessionID: null,\r\n    login: noop,\r\n    logout: noop,\r\n    isAuthenticated: false\r\n})","export function parseLink(str) {\r\n    return str.toLowerCase().replace(' ', '-')\r\n}\r\n\r\nexport function getPage(data, limit, page) {\r\n    const start = (page * limit)\r\n    const end = (start + limit)\r\n\r\n    return data.slice(start, end)\r\n}\r\n\r\nexport function getMaxPage(data, limit) {\r\n    let arr = data\r\n    let maxPage = 0\r\n    while (arr.length > 0) {\r\n        arr = arr.slice(limit)\r\n        maxPage += 1\r\n    }\r\n\r\n    return (maxPage - 1)\r\n}\r\n\r\nexport function setCookie(name, value, expiresDays=30) {\r\n    const date = new Date()\r\n    date.setTime(date.getTime() + (expiresDays * 24*60*60*1000))\r\n    const expires = \"expires=\"+ date.toUTCString()\r\n\r\n    document.cookie = `${name}=${JSON.stringify(value)};${expires};path=/`\r\n}\r\n\r\nexport function getCookie(cname) {\r\n    const name = cname + \"=\"\r\n    const decodedCookie = decodeURIComponent(document.cookie)\r\n    const ca = decodedCookie.split(';')\r\n\r\n    for(var i = 0; i < ca.length; i++) {\r\n        let c = ca[i]\r\n\r\n        while (c.charAt(0) === ' ') {\r\n            c = c.substring(1)\r\n        }\r\n\r\n        if (c.indexOf(name) === 0) {\r\n            return c.substring(name.length, c.length)\r\n        }\r\n    }\r\n    return ''\r\n}\r\n\r\nexport function clearCookie(name) {\r\n    document.cookie = name +'=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;'\r\n}","import { useState, useCallback, useEffect } from 'react'\r\nimport { setCookie, getCookie, clearCookie } from '../utils/functions'\r\n\r\nconst cookie = 'secret'\r\n\r\nexport const useAuth = () => {\r\n  const [sessionID, setSessionID] = useState('')\r\n  const [ready, setReady] = useState(false)\r\n\r\n  const login = useCallback((value) => {\r\n    if (value) {\r\n      setSessionID(value)\r\n      setCookie(cookie, value)\r\n    }\r\n  }, [])\r\n\r\n  const logout = useCallback(() => {\r\n    setSessionID('')\r\n    clearCookie(cookie)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const session = getCookie(cookie)\r\n\r\n    if (session) setSessionID(session)\r\n    else login(session)\r\n\r\n    setReady(true)\r\n  }, [login])\r\n\r\n  return { login, logout, sessionID, ready }\r\n}","/*\r\n * COMPONENT: Row\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport '../styles/Row.css'\r\n\r\nexport default (props) => {\r\n    const Children = props.children\r\n\r\n    const classes = [\r\n        'ui-row',\r\n        props.type,\r\n        props.className\r\n    ]\r\n\r\n    return (\r\n        <div className={classes.join(' ')} style={{ ...props.style }}>\r\n            {Children}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport '../styles/Container.css'\r\n\r\nexport default (props) => {\r\n    const Children = props.children\r\n    \r\n    const classes = [\r\n        'ui-container', props.type,\r\n        (props.clear) ? 'clear' : '',\r\n        (props.sticky) ? 'sticky' : ''\r\n    ]\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            {Children}\r\n        </div>\r\n    )\r\n}","/*\r\n * COMPONENT: Alert\r\n * \r\n * MISSION: Modal content with buttons. Confirmation anything\r\n * or warnings about something\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport '../styles/Alert.css'\r\n\r\nexport default ({ type, message }) => {\r\n    const classes = [\r\n        'ui-alert',\r\n        type\r\n    ]\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            {message}\r\n        </div>\r\n    )\r\n}","/*\r\n * COMPONENT: Skeleton\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport Skeleton from 'react-skeleton-loader'\r\nimport '../styles/Skeleton.css'\r\n\r\nexport default ({ component, options }) => {\r\n    const classes = [\r\n        'ui-skeleton',\r\n        component\r\n    ]\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            <Skeleton {...options} />\r\n        </div>\r\n    )\r\n}","/*\r\n * COMPONENT: Button\r\n * \r\n * MISSION: Rendering Image with given properties\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport Ripples from 'react-ripples'\r\nimport { Link } from 'react-router-dom'\r\nimport '../styles/Button.css'\r\n\r\nconst Button = ({ type, child, classes, disabled, path, handler }) => {\r\n    const handlerClick = async (e) => {\r\n        e.preventDefault()\r\n        await handler(e)\r\n    }\r\n\r\n    if (type === 'link') {\r\n        return (\r\n            <Link\r\n                to={path}\r\n                className={classes.join(' ')}\r\n                disabled={disabled}\r\n                onClick={(handler) && handlerClick}\r\n            >\r\n\r\n            </Link>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <button\r\n            type={type}\r\n            className={classes.join(' ')}\r\n            disabled={disabled}\r\n            onClick={(handler) && handlerClick}\r\n        >\r\n            {child}\r\n        </button>\r\n    )\r\n}\r\n\r\nconst Ripple = ({ type, child, classes, disabled, path, handler }) => {\r\n    if (handler)\r\n        return (\r\n            <Ripples color=\"#afbdc4\" during={1000}>\r\n                <Button\r\n                    type={type}\r\n                    path={path}\r\n                    child={child}\r\n                    classes={classes}\r\n                    disabled={disabled}\r\n                    handler={handler}\r\n                />\r\n            </Ripples>\r\n        )\r\n\r\n    return (\r\n        <Ripples color=\"#afbdc4\" during={1000}>\r\n            <Button\r\n                type={type}\r\n                path={path}\r\n                child={child}\r\n                classes={classes}\r\n                disabled={disabled}\r\n            />\r\n        </Ripples>\r\n    )\r\n}\r\n\r\nexport default (props) => {\r\n    const Children = props.children\r\n\r\n    const {\r\n        type, state,\r\n        classNames, disabled,\r\n        handler, path\r\n    } = props.options || {}\r\n\r\n    const classes = [\r\n        'ui-button',\r\n        classNames,\r\n        state\r\n    ]\r\n\r\n    const options = {\r\n        type, path,\r\n        child: Children,\r\n        disabled\r\n    }\r\n\r\n    return (\r\n        <Ripple\r\n            {...options}\r\n            classes={classes}\r\n            handler={handler}\r\n        />\r\n    )\r\n}","/*\r\n * COMPONENT: Entry\r\n * \r\n * MISSION: Space between components\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport '../styles/Divider.css'\r\n\r\nexport default ({ distance, horizontal }) => {\r\n    const classes = [\r\n        'ui-divider'\r\n    ]\r\n\r\n    const d = Math.round((distance) / 2)\r\n\r\n    return (\r\n        <div\r\n            className={classes.join(' ')}\r\n            style={{ margin: (horizontal) ? `${d}px 0` : `0 ${d}px` }}\r\n        />\r\n    )\r\n}","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport Button from './Button'\r\nimport Divider from './Divider'\r\nimport '../styles/Navigation.css'\r\n\r\nconst Block = ({ children }) =>\r\n    <div className=\"block\">{children}</div>\r\n\r\nexport default ({ options }) => {\r\n    const {\r\n        links,\r\n        buttons,\r\n        dashboard,\r\n        axis\r\n    } = options\r\n\r\n    const classes = [\r\n        'ui-navigation',\r\n        (dashboard) ? 'dashboard' : '',\r\n        axis\r\n    ]\r\n\r\n    const renderLinks = () => {\r\n        return links.map((link, key) => (\r\n            <React.Fragment key={key}>\r\n                {(link.groupTitle) && <p className=\"title\">{link.groupTitle}</p>}\r\n                <NavLink\r\n                    exact\r\n                    key={key}\r\n                    to={link.path}\r\n                    className={link.type}\r\n                    onClick={link.handler}\r\n                >\r\n                    {link.component}\r\n                </NavLink>\r\n            </React.Fragment>\r\n        ))\r\n    }\r\n\r\n    const renderButtons = () => {\r\n        return buttons.map((button, key) =>\r\n            <Button key={key} options={button.options}>\r\n                {button.component}\r\n            </Button>)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            <Block>{renderLinks()}</Block>\r\n            <Block>\r\n                <Divider />\r\n                {renderButtons()}\r\n            </Block>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport '../styles/Transition.css'\r\n\r\nexport default (props) => {\r\n    const Children = props.children\r\n    const showContent = props.showContent\r\n    const animation = props.animation || 'default'\r\n    const duration = props.duration || 100\r\n    const unmountOnExit = props.unmountOnExit || true\r\n    const handlerEnter = props.handlerEnter || null\r\n    const handlerExited = props.handlerExited || null\r\n\r\n    return (\r\n        <CSSTransition\r\n            in={showContent}\r\n            timeout={duration}\r\n            classNames={animation}\r\n            onEnter={handlerEnter}\r\n            onExited={handlerExited}\r\n            unmountOnExit={unmountOnExit}\r\n        >\r\n            {Children}\r\n        </CSSTransition>\r\n    )\r\n}","/*\r\n * COMPONENT: Modal\r\n * \r\n * MISSION: Dynamic Modal with feture navigation\r\n * by pages and unlimited depths. Given Modal\r\n * haven't to need in 'react-router' or 'react-router-dom.\r\n * This custom Switch, Route and Link for scalable and\r\n * dynamical app\r\n *\r\n**/\r\n\r\nimport React, { useState } from 'react'\r\nimport PreventOutsideScroll from 'react-prevent-outside-scroll'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\r\nimport '../styles/Modal.css'\r\nimport Transition from './Transition'\r\nimport Button from './Button'\r\n\r\nconst DURATION = 100\r\n\r\nfunction getPath(navigator) {\r\n    if (!navigator || navigator.length === 0)\r\n        return null\r\n\r\n    return navigator[navigator.length - 1]\r\n}\r\n\r\nconst Switch = (props) => {\r\n    const Childrens = props.children\r\n    if (!Childrens) return null\r\n    \r\n    const path = props.path\r\n\r\n    let Child = null\r\n    for (const child of Childrens) {\r\n        if (path === child.props.path) {\r\n            Child = child\r\n            break\r\n        }\r\n    }\r\n    return Child\r\n}\r\n\r\nconst Route = ({ component, close, back, jump }) => {\r\n    const Compoent = component\r\n    return <Compoent\r\n        close={close}\r\n        back={back}\r\n        jump={jump}\r\n    />\r\n}\r\n\r\nexport default ({ options }) => {\r\n    const [navigator, setNavigator] = useState(['/'])\r\n    const [content, setContent] = useState(false)\r\n    const [animation, setAnimation] = useState(null)\r\n\r\n    const {\r\n        type,\r\n        title,\r\n        home,\r\n        routes,\r\n        center,\r\n        hideModal=() => {},\r\n        closeByBackground=true\r\n    } = options\r\n\r\n    const classes = [\r\n        'ui-modal',\r\n        (center) ? 'center' : '',\r\n        type\r\n    ]\r\n\r\n    const transitions = {\r\n        fade: {\r\n            showContent: (routes) ? true : false,\r\n            animation: 'fade',\r\n            handlerEnter: () => setContent(true),\r\n            handlerExit: () => setContent(false),\r\n            duration: DURATION\r\n        },\r\n        swing: {\r\n            showContent: (content),\r\n            animation: 'swing',\r\n            duration: DURATION\r\n        }\r\n    }\r\n\r\n    const getTitle = () => {\r\n        function compare(route) {\r\n            return (route.path === getPath(navigator))\r\n        }\r\n\r\n        const title = routes?.find(route => compare(route))?.title\r\n\r\n        return title || 'Default Title'\r\n    }\r\n\r\n    const handlerBack = () => {\r\n        setAnimation('slideOutRight')\r\n        setTimeout(() => {\r\n            setNavigator([\r\n                ...navigator.filter((e, i) => (i !== (navigator.length - 1)))\r\n            ])\r\n            setAnimation('slideInLeft')\r\n        }, DURATION)\r\n    }\r\n    const handlerJump = (path) => {\r\n        setAnimation('slideOutLeft')\r\n        setTimeout(() => {\r\n            setNavigator([\r\n                ...navigator,\r\n                path\r\n            ])\r\n            setAnimation('slideInRight')\r\n        }, DURATION)\r\n    }\r\n    const handlerClose = () => {\r\n        setContent(false)\r\n        setAnimation(null)\r\n        \r\n        setTimeout(() => {\r\n            setNavigator(['/'])\r\n            hideModal()\r\n        }, DURATION)\r\n    }\r\n\r\n    return (\r\n        <Transition {...transitions.fade}>\r\n            <PreventOutsideScroll>\r\n                <div className={classes.join(' ')}>\r\n                    <div\r\n                        className={`background${(!closeByBackground) ? ' clear' : ''}`}\r\n                        onClick={(closeByBackground) ? handlerClose : () => {}}\r\n                    ></div>\r\n\r\n                    <Transition {...transitions.swing}>\r\n                        <div id='scroller' className={`wrapper animate${(animation) ? ` ${animation}` : ''}`}>\r\n                            <div className=\"headline\">\r\n                                {(navigator.length > 1) && <Button options={{\r\n                                    state: 'icon',\r\n                                    lockdown: true,\r\n                                    handler: () => handlerBack()\r\n                                }}>\r\n                                    <FontAwesomeIcon icon={faArrowLeft} />\r\n                                </Button>}\r\n                                <h1>{(title && !routes) ? title : getTitle()}</h1>\r\n                            </div>\r\n\r\n                            {(home && !routes) ? home\r\n                            : <Switch path={getPath(navigator)}>\r\n                                {routes?.map((props, key) =>\r\n                                    <Route key={key} {...props} close={handlerClose} back={handlerBack} jump={handlerJump} />\r\n                                )}\r\n                            </Switch>}\r\n                        </div>\r\n                    </Transition>\r\n                </div>\r\n            </PreventOutsideScroll>\r\n        </Transition>\r\n    )\r\n}","/*\r\n * COMPONENT: Message\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\n\r\nimport '../styles/Message.css'\r\n\r\nexport default ({ text, padding }) => {\r\n    return (\r\n        <p\r\n            className=\"ui-message\"\r\n            style={{ padding: (padding) ? 15 : 0 }}\r\n        >{text}</p>\r\n    )\r\n}","import React from 'react'\r\nimport Container from '../ui/Container'\r\nimport Message from '../ui/Message'\r\n\r\nexport default () => {\r\n    return (\r\n        <Container>\r\n            <Message text=\"No Content\" padding />\r\n        </Container>\r\n    )\r\n}","import React from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport Skeleton from './Skeleton'\r\nimport Message from './Message'\r\nimport Row from './Row'\r\n\r\nexport default (props) => {\r\n    const { data, loading, error, refetch } = useQuery(\r\n        props.query,\r\n        { variables: props.variables }\r\n    )\r\n\r\n    const Children = props.children\r\n    const pseudo = props.pseudo\r\n\r\n    const options = {\r\n        height: `${pseudo?.height || 256}px`,\r\n        widthRandomness: 0,\r\n        heightRandomness: 0\r\n    }\r\n\r\n    const renderSkeleton = () => {\r\n        const skeletons = []\r\n\r\n        for (let i = 0; i < (pseudo?.count || 1); i++) {\r\n            skeletons.push(<Skeleton key={i} options={options} />)\r\n        }\r\n\r\n        return skeletons.map(skeleton => skeleton)\r\n    }\r\n\r\n    if (loading || !data) return (\r\n        <Row type=\"flex loader\" style={{ gridColumn: '1 / 5' }}>\r\n            {renderSkeleton()}\r\n        </Row>\r\n    )\r\n    if (error) return <Message text={error} padding />\r\n\r\n    return (\r\n        <Children data={data} refetch={refetch} />\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport { useSubscription } from '@apollo/react-hooks'\r\n\r\nexport default (props) => {\r\n    const { data } = useSubscription(\r\n        props.query,\r\n        { variables: props.variables }\r\n    )\r\n\r\n    const Children = props.children\r\n\r\n    useEffect(() => {\r\n        if (props.refetch) props.refetch()\r\n    }, [data, props])\r\n\r\n    return <Children subData={data} />\r\n}","/*\r\n * COMPONENT: List\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport '../styles/List.css'\r\n\r\nexport default (props) => {\r\n    const Children = props.children\r\n\r\n    const {\r\n        list,\r\n        type,\r\n        state={},\r\n        handler,\r\n        handlerItem,\r\n    } = props.options || {}\r\n\r\n    const classes = [\r\n        'ui-list', type,\r\n        (handler) ? ' clickable' : ''\r\n    ]\r\n\r\n    return (\r\n        <div\r\n            className={classes.join(' ')}\r\n            onClick={() => (handler) && handler()}\r\n        >\r\n            {list.map((item, key) => (\r\n                <div\r\n                    key={key}\r\n                    className={`ui-item${(state.id === item.id) ? ' checked' : ''}`}\r\n                    onClick={() => (handlerItem) && handlerItem(item)}\r\n                >\r\n                    <Children item={item} />\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}","import gql from 'graphql-tag'\r\n\r\n// BEGIN USER\r\nexport const LOGIN = gql`\r\n    mutation login(\r\n        $name: String!\r\n        $password: String!\r\n        $area: String\r\n    ) {\r\n        login(\r\n            name: $name\r\n            password: $password\r\n            area: $area\r\n        ) {\r\n            id\r\n            name\r\n            email\r\n            phone\r\n            role {\r\n                name\r\n            }\r\n            balance\r\n            level\r\n            experience\r\n            avatar {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            preferences {\r\n                id\r\n                title\r\n                color\r\n                slogan\r\n                icon {\r\n                    name\r\n                    path\r\n                }\r\n            }\r\n            sessionID\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const REGISTER = gql`\r\n    mutation register(\r\n        $name: String!\r\n        $email: String!\r\n        $password: String!\r\n        $confirmPassword: String!\r\n        $phone: String\r\n        $role: ID\r\n        $avatar: ID\r\n    ) {\r\n        register(\r\n            registerInput: {\r\n                name: $name\r\n                email: $email\r\n                password: $password\r\n                confirmPassword: $confirmPassword\r\n                phone: $phone\r\n                role: $role\r\n                avatar: $avatar\r\n            }\r\n        ) {\r\n            name\r\n            email\r\n            phone\r\n            role {\r\n                name\r\n            }\r\n            balance\r\n            level\r\n            experience\r\n            avatar {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            preferences {\r\n                id\r\n                title\r\n                color\r\n                slogan\r\n                icon {\r\n                    name\r\n                    path\r\n                }\r\n            }\r\n            sessionID\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const GET_ALL_USERS = gql`\r\n    query allUsers {\r\n        allUsers {\r\n            name\r\n            email\r\n            phone\r\n            role {\r\n                name\r\n            }\r\n            balance\r\n            level\r\n            experience\r\n            avatar {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            preferences {\r\n                id\r\n                title\r\n                color\r\n                slogan\r\n                icon {\r\n                    name\r\n                    path\r\n                }\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_USERS = gql`\r\n    subscription users {\r\n        users {\r\n            name\r\n            email\r\n            phone\r\n            role {\r\n                name\r\n            }\r\n            balance\r\n            level\r\n            experience\r\n            avatar {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            preferences {\r\n                id\r\n                title\r\n                color\r\n                slogan\r\n                icon {\r\n                    name\r\n                    path\r\n                }\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const GET_USER = gql`\r\n    query getUser {\r\n        getUser {\r\n            name\r\n            password\r\n            email\r\n            phone\r\n            role {\r\n                name\r\n            }\r\n            balance\r\n            level\r\n            experience\r\n            avatar {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            preferences {\r\n                id\r\n                title\r\n                color\r\n                slogan\r\n                icon {\r\n                    name\r\n                    path\r\n                }\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const EDIT_USER = gql`\r\n    mutation editUser(\r\n        $name: String\r\n        $email: String\r\n        $password: String\r\n        $phone: String\r\n        $role: ID\r\n        $balance: Int\r\n        $level: Int\r\n        $avatar: ID\r\n        $availableAvatars: [ID]\r\n        $experience: Int\r\n        $preferences: [ID]\r\n        $settings: [Setting]\r\n    ) {\r\n        editUser(\r\n            name: $name\r\n            email: $email\r\n            password: $password\r\n            phone: $phone\r\n            role: $role\r\n            balance: $balance\r\n            level: $level\r\n            avatar: $avatar\r\n            availableAvatars: $availableAvatars\r\n            experience: $experience\r\n            preferences: $preferences\r\n            settings: $settings\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_USERS = gql`\r\n    mutation deleteUsers(\r\n        $id: [ID]\r\n    ) {\r\n        deleteUsers(id: $id)\r\n    }\r\n`\r\n\r\n// BEGIN CHAT\r\nexport const GET_ALL_CHAT_TYPES = gql`\r\n    query allChatTypes {\r\n        allChatTypes\r\n    }\r\n`\r\n\r\nexport const ADD_CHAT = gql`\r\n    mutation addChat(\r\n        $type: ChatType!\r\n        $title: String!\r\n        $members: [String]!\r\n    ) {\r\n        addChat (\r\n            type: $type\r\n            title: $title\r\n            members: $members\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_CHAT = gql`\r\n    mutation editChat(\r\n        $id: ID!\r\n        $type: ChatType\r\n        $title: String\r\n        $members: [String]\r\n    ) {\r\n        editChat (\r\n            id: $id\r\n            type: $type\r\n            title: $title\r\n            members: $members\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_CHATS = gql`\r\n    mutation deleteChats(\r\n        $id: [ID]!\r\n    ) {\r\n        deleteChats (\r\n            id: $id\r\n        )\r\n    }\r\n`\r\n\r\nexport const GET_ALL_CHATS = gql`\r\n    query allChats {\r\n        allChats {\r\n            id\r\n            type\r\n            title\r\n            members {\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            messages {\r\n                user {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                text\r\n                type\r\n                updatedAt\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_CHATS = gql`\r\n    subscription chats {\r\n        chats {\r\n            id\r\n            type\r\n            title\r\n            members {\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            messages {\r\n                user {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                text\r\n                type\r\n                updatedAt\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_USER_CHATS = gql`\r\n    mutation deleteUserChats(\r\n        $id: [ID]!\r\n    ) {\r\n        deleteUserChats(\r\n            id: $id\r\n        )\r\n    }\r\n`\r\n\r\nexport const GET_USER_CHATS = gql`\r\n    query allUserChats {\r\n        allUserChats {\r\n            id\r\n            chat {\r\n                id\r\n                type\r\n                title\r\n                members {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                messages {\r\n                    user {\r\n                        name\r\n                        avatar {\r\n                            path\r\n                        }\r\n                    }\r\n                    text\r\n                    type\r\n                    updatedAt\r\n                    createdAt\r\n                }\r\n            }\r\n            interlocutor {\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const GET_CHAT_MESSAGES = gql`\r\n    query allChatMessages(\r\n        $id: ID!\r\n    ) {\r\n        allChatMessages(\r\n            id: $id\r\n        ) {\r\n            user {\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            text\r\n            type\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_USER_CHATS = gql`\r\n    subscription userChats(\r\n        $name: String!\r\n    ) {\r\n        userChats(\r\n            name: $name\r\n        ) {\r\n            id\r\n            chat {\r\n                id\r\n                type\r\n                title\r\n                members {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                messages {\r\n                    user {\r\n                        name\r\n                        avatar {\r\n                            path\r\n                        }\r\n                    }\r\n                    text\r\n                    type\r\n                    updatedAt\r\n                    createdAt\r\n                }\r\n            }\r\n            interlocutor {\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_MESSAGES = gql`\r\n    subscription messages(\r\n        $id: ID\r\n    ) {\r\n        messages(\r\n            id: $id\r\n        ) {\r\n            user {\r\n                name\r\n            }\r\n            text\r\n            type\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const OPEN_USER_CHAT = gql`\r\n    mutation openUserChat(\r\n        $name: String!\r\n    ) {\r\n        openUserChat(\r\n            name: $name\r\n        ) {\r\n            id\r\n            chat {\r\n                id\r\n                title\r\n                members {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                messages {\r\n                    user {\r\n                        name\r\n                        avatar {\r\n                            path\r\n                        }\r\n                    }\r\n                    text\r\n                    type\r\n                    updatedAt\r\n                    createdAt\r\n                }\r\n            }\r\n            interlocutor {\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_USER_CHAT_MESSAGE = gql`\r\n    mutation addUserChatMessage(\r\n        $id: ID!\r\n        $text: String!\r\n    ) {\r\n        addUserChatMessage(\r\n            id: $id\r\n            text: $text\r\n        )\r\n    }\r\n`\r\n// END CHAT\r\n\r\nexport const SUB_NOTIFICATIONS = gql`\r\n    subscription notifications {\r\n        notifications {\r\n            id\r\n            text\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const GET_USER_NOTIFICATIONS = gql`\r\n    query allUserNotifications {\r\n        allUserNotifications {\r\n            id\r\n            text\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n// END USER\r\n\r\n// BEGIN HUB\r\nexport const GET_ALL_HUBS = gql`\r\n    query allHubs($status: Status) {\r\n        allHubs(status: $status) {\r\n            id\r\n            title\r\n            description\r\n            slogan\r\n            icon {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            color\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_HUBS = gql`\r\n    subscription hubs(\r\n        $status: Status\r\n    ) {\r\n        hubs(\r\n            status: $status\r\n        ) {\r\n            id\r\n            title\r\n            description\r\n            slogan\r\n            icon {\r\n                path\r\n            }\r\n            color\r\n            countUsers\r\n            countOffers\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_HUB = gql`\r\n    mutation addHub(\r\n        $title: String!\r\n        $description: String!\r\n        $slogan: String!\r\n        $color: String\r\n        $icon: ID\r\n        $status: Status!\r\n    ) {\r\n        addHub(\r\n            title: $title\r\n            description: $description\r\n            slogan: $slogan\r\n            color: $color\r\n            icon: $icon\r\n            status: $status\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_HUB = gql`\r\n    mutation editHub(\r\n        $id: ID!\r\n        $title: String\r\n        $description: String\r\n        $slogan: String\r\n        $color: String\r\n        $icon: ID\r\n        $status: Status\r\n    ) {\r\n        editHub(\r\n            id: $id\r\n            title: $title\r\n            description: $description\r\n            slogan: $slogan\r\n            color: $color\r\n            icon: $icon\r\n            status: $status\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_HUBS = gql`\r\n    mutation deleteHubs(\r\n        $id: [ID]\r\n    ) {\r\n        deleteHubs(id: $id)\r\n    }\r\n`\r\n// END HUB\r\n\r\n// BEGIN ARTICLE\r\nexport const GET_USER_ARTICLES = gql`\r\n    query allUserArticles {\r\n        allUserArticles {\r\n            id\r\n            title\r\n            description\r\n            body\r\n            views\r\n            image {\r\n                path\r\n            }\r\n            comments {\r\n                id\r\n                user {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                text\r\n                updatedAt\r\n                createdAt\r\n            }\r\n            hub {\r\n                id\r\n                title\r\n            }\r\n            author {\r\n                id\r\n                name\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const GET_ALL_ARTICLES = gql`\r\n    query allArticles($status: Status) {\r\n        allArticles(status: $status) {\r\n            id\r\n            title\r\n            description\r\n            body\r\n            views\r\n            image {\r\n                path\r\n            }\r\n            comments {\r\n                id\r\n                user {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                text\r\n                updatedAt\r\n                createdAt\r\n            }\r\n            hub {\r\n                id\r\n                title\r\n            }\r\n            author {\r\n                id\r\n                name\r\n            }\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_USER_ARTICLES = gql`\r\n    subscription userArticles(\r\n        $name: String!\r\n    ) {\r\n        userArticles(\r\n            name: $name\r\n        ) {\r\n            id\r\n            title\r\n            description\r\n            body\r\n            views\r\n            image {\r\n                path\r\n            }\r\n            comments {\r\n                id\r\n                user {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                text\r\n                updatedAt\r\n                createdAt\r\n            }\r\n            hub {\r\n                id\r\n                title\r\n            }\r\n            author {\r\n                id\r\n                name\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_ARTICLES = gql`\r\n    subscription articles(\r\n        $status: Status\r\n    ) {\r\n        articles(\r\n            status: $status\r\n        ) {\r\n            id\r\n            title\r\n            description\r\n            body\r\n            views\r\n            image {\r\n                path\r\n            }\r\n            comments {\r\n                id\r\n                user {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                text\r\n                updatedAt\r\n                createdAt\r\n            }\r\n            hub {\r\n                id\r\n                title\r\n            }\r\n            author {\r\n                id\r\n                name\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const GET_ARTICLE = gql`\r\n    query getArticle($id: ID!) {\r\n        getArticle(id: $id) {\r\n            id\r\n            title\r\n            description\r\n            body\r\n            image {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            comments {\r\n                id\r\n                user {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                text\r\n                updatedAt\r\n                createdAt\r\n            }\r\n            hub {\r\n                id\r\n                title\r\n            }\r\n            source\r\n            url\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_ARTICLE = gql`\r\n    mutation addArticle(\r\n        $author: String!\r\n        $title: String!\r\n        $description: String!\r\n        $body: String!\r\n        $hub: ID!\r\n        $image: Upload\r\n        $status: Status!\r\n    ) {\r\n        addArticle(\r\n            author: $author\r\n            title: $title\r\n            description: $description\r\n            body: $body\r\n            hub: $hub\r\n            image: $image\r\n            status: $status\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_ARTICLE = gql`\r\n    mutation editArticle(\r\n        $id: ID!\r\n        $title: String\r\n        $description: String\r\n        $body: String\r\n        $hub: ID\r\n        $image: Upload\r\n        $status: Status\r\n    ) {\r\n        editArticle(\r\n            id: $id\r\n            title: $title\r\n            description: $description\r\n            body: $body\r\n            hub: $hub\r\n            image: $image\r\n            status: $status\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_ARTICLES = gql`\r\n    mutation deleteArticles(\r\n        $articles: [InputArticle]\r\n    ) {\r\n        deleteArticles(articles: $articles)\r\n    }\r\n`\r\n\r\nexport const ADD_COMMENT = gql`\r\n    mutation addComment(\r\n        $article: ID!\r\n        $text: String!\r\n    ) {\r\n        addComment(\r\n            article: $article\r\n            text: $text\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_COMMENT = gql`\r\n    mutation editComment(\r\n        $id: ID!\r\n        $article: ID\r\n        $user: ID\r\n        $text: String\r\n    ) {\r\n        editComment(\r\n            id: $id\r\n            article: $article\r\n            user: $user\r\n            text: $text\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELTE_COMMENTS = gql`\r\n    mutation deleteComments(\r\n        $id: [ID]!\r\n        $article: ID!\r\n    ) {\r\n        deleteComments(\r\n            id: $id\r\n            article: $article\r\n        )\r\n    }\r\n`\r\n// END ARTICLE\r\n\r\n// BEGIN OFFER\r\nexport const GET_USER_OFFERS = gql`\r\n    query allUserOffers {\r\n        allUserOffers {\r\n            id\r\n            title\r\n            message\r\n            user {\r\n                id\r\n                name\r\n            }\r\n            hub {\r\n                id\r\n                title\r\n            }\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_USER_OFFERS = gql`\r\n    subscription userOffers(\r\n        $name: String!\r\n    ) {\r\n        userOffers(\r\n            name: $name\r\n        ) {\r\n            id\r\n            title\r\n            message\r\n            user {\r\n                id\r\n                name\r\n            }\r\n            hub {\r\n                id\r\n                title\r\n            }\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const GET_ALL_OFFERS = gql`\r\n    query allOffers($status: Status) {\r\n        allOffers(status: $status) {\r\n            id\r\n            title\r\n            message\r\n            user {\r\n                id\r\n                name\r\n            }\r\n            hub {\r\n                id\r\n                title\r\n            }\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_OFFERS = gql`\r\n    subscription offers(\r\n        $status: Status\r\n    ) {\r\n        offers(\r\n            status: $status\r\n        ) {\r\n            id\r\n            title\r\n            message\r\n            user {\r\n                id\r\n                name\r\n            }\r\n            hub {\r\n                id\r\n                title\r\n            }\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_OFFER = gql`\r\n    mutation addOffer(\r\n        $hub: ID!\r\n        $title: String!\r\n        $message: String!\r\n        $status: Status!\r\n    ) {\r\n        addOffer(\r\n            hub: $hub\r\n            title: $title\r\n            message: $message\r\n            status: $status\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_OFFER = gql`\r\n    mutation editOffer(\r\n        $id: ID!\r\n        $hub: ID\r\n        $title: String\r\n        $message: String\r\n        $status: Status\r\n    ) {\r\n        editOffer(\r\n            id: $id\r\n            hub: $hub\r\n            title: $title\r\n            message: $message\r\n            status: $status\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_OFFERS = gql`\r\n    mutation deleteOffers(\r\n        $offers: [InputOffer]\r\n    ) {\r\n        deleteOffers(offers: $offers)\r\n    }\r\n`\r\n// END HUB\r\n\r\n// BEGIN ROLE\r\nexport const GET_ALL_ROLES = gql`\r\n    query allRoles {\r\n        allRoles {\r\n            id\r\n            name\r\n            permissions\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_ROLE = gql`\r\n    mutation addRole(\r\n        $name: String!\r\n        $permissions: [Permission!]!\r\n    ) {\r\n        addRole(\r\n            name: $name\r\n            permissions: $permissions\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_ROLE = gql`\r\n    mutation editRole(\r\n        $id: ID!\r\n        $name: String!\r\n        $permissions: [Permission]\r\n    ) {\r\n        editRole(\r\n            id: $id\r\n            name: $name\r\n            permissions: $permissions\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_ROLES = gql`\r\n    mutation deleteRoles($id: [ID]!) {\r\n        deleteRoles(id: $id)\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_ROLES = gql`\r\n    subscription roles {\r\n        roles {\r\n            id\r\n            name\r\n            permissions\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n// END ROLE\r\n\r\n// BEGIN PERMITIONS\r\nexport const GET_ALL_PERMITIONS = gql`\r\n    query allPermissions {\r\n        allPermissions\r\n    }\r\n`\r\n// END PERMITIONS\r\n\r\n// BEGIN IMAGES\r\nexport const GET_ALL_IMAGES = gql`\r\n    query allImages {\r\n        allImages {\r\n            id\r\n            path\r\n            name\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_IMAGES = gql`\r\n    subscription images {\r\n        images {\r\n            id\r\n            name\r\n            path\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_IMAGE = gql`\r\n    mutation addImage(\r\n        $file: Upload!\r\n    ) {\r\n        addImage(\r\n            file: $file\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_IMAGE = gql`\r\n    mutation editImage(\r\n        $id: ID!\r\n        $file: Upload\r\n    ) {\r\n        editImage(\r\n            id: $id\r\n            file: $file\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_IMAGES = gql`\r\n    mutation deleteImages(\r\n        $id: [ID]!\r\n    ) {\r\n        deleteImages(\r\n            id: $id\r\n        )\r\n    }\r\n`\r\n// END IMAGES\r\n\r\n// BEGIN AVATARS\r\nexport const GET_ALL_AVATARS = gql`\r\n    query allAvatars {\r\n        allAvatars {\r\n            id\r\n            order\r\n            path\r\n            name\r\n            complexity\r\n            hub {\r\n                id\r\n                title\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_AVATARS = gql`\r\n    subscription avatars {\r\n        avatars {\r\n            id\r\n            order\r\n            path\r\n            name\r\n            complexity\r\n            hub {\r\n                id\r\n                title\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_AVATAR = gql`\r\n    mutation addAvatar(\r\n        $file: Upload!\r\n        $order: Int!\r\n        $complexity: Int!\r\n        $hub: ID!\r\n    ) {\r\n        addAvatar(\r\n            file: $file\r\n            order: $order\r\n            complexity: $complexity\r\n            hub: $hub\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_AVATAR = gql`\r\n    mutation editAvatar(\r\n        $id: ID!\r\n        $file: Upload\r\n        $order: Int\r\n        $complexity: Int\r\n        $hub: ID\r\n    ) {\r\n        editAvatar(\r\n            id: $id\r\n            file: $file\r\n            order: $order\r\n            complexity: $complexity\r\n            hub: $hub\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_AVATARS = gql`\r\n    mutation deleteAvatars(\r\n        $id: [ID]!\r\n    ) {\r\n        deleteAvatars(\r\n            id: $id\r\n        )\r\n    }\r\n`\r\n// END AVATARS\r\n\r\n// BEGIN ICONS\r\nexport const GET_ALL_ICONS = gql`\r\n    query allIcons {\r\n        allIcons {\r\n            id\r\n            path\r\n            name\r\n            hub {\r\n                id\r\n                title\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_ICONS = gql`\r\n    subscription icons {\r\n        icons {\r\n            id\r\n            path\r\n            name\r\n            hub {\r\n                id\r\n                title\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_ICON = gql`\r\n    mutation addIcon(\r\n        $file: Upload!\r\n        $hub: ID!\r\n    ) {\r\n        addIcon(\r\n            file: $file\r\n            hub: $hub\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_ICON = gql`\r\n    mutation editIcon(\r\n        $id: ID!\r\n        $file: Upload\r\n        $hub: ID\r\n    ) {\r\n        editIcon(\r\n            id: $id\r\n            file: $file\r\n            hub: $hub\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_ICONS = gql`\r\n    mutation deleteIcons(\r\n        $id: [ID]!\r\n    ) {\r\n        deleteIcons(\r\n            id: $id\r\n        )\r\n    }\r\n`\r\n// END ICONS\r\n\r\n// BEGIN LANGUAGE\r\nexport const GET_ALL_LANGUAGES = gql`\r\n    query allLanguages {\r\n        allLanguages {\r\n            id\r\n            code\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_LANGUAGE = gql`\r\n    mutation addLanguage(\r\n        $code: String!\r\n    ) {\r\n        addLanguage(\r\n            code: $code\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_LANGUAGE = gql`\r\n    mutation editLanguage(\r\n        $id: ID!\r\n        $code: String\r\n    ) {\r\n        editLanguage(\r\n            id: $id\r\n            code: $code\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_LANGUAGES = gql`\r\n    mutation deleteLanguages(\r\n        $id: [ID]!\r\n    ) {\r\n        deleteLanguages(\r\n            id: $id\r\n        )\r\n    }\r\n`\r\n// END LANGUAGE","import React from 'react'\r\nimport Moment from 'react-moment'\r\nimport Container from './../ui/Container'\r\nimport Query from './../ui/Query'\r\nimport Subscription from './../ui/Subscription'\r\nimport Message from './../ui/Message'\r\nimport List from './../ui/List'\r\n\r\nimport {\r\n    GET_USER_NOTIFICATIONS,\r\n    SUB_NOTIFICATIONS\r\n} from '../../utils/queries'\r\n\r\nexport default () => {\r\n    return (\r\n        <Container>\r\n            <Query query={GET_USER_NOTIFICATIONS} pseudo={{ height: 45, count: 6 }}>\r\n                {({ data, refetch }) => (\r\n                    <Subscription query={SUB_NOTIFICATIONS} refetch={refetch}>\r\n                        {({ subData }) => {\r\n                            const notifications = ((subData && subData.notifications) || data.allUserNotifications)\r\n\r\n                            if (notifications.length === 0)\r\n                                return <Message text=\"Empty\" padding />\r\n\r\n                            return (\r\n                                (notifications.length > 0) ?\r\n                                <List options={{ list: notifications }}>\r\n                                    {({ item }) => (\r\n                                        <React.Fragment>\r\n                                            <p className=\"avatar\">\r\n                                                <img src={item.img} alt=\"User\" />\r\n                                            </p>\r\n                                            <p className=\"name\">{item.text}</p>\r\n                                            <p className=\"date\">\r\n                                                <Moment date={new Date(new Date().setTime(item.createdAt))} format=\"h:m\" />\r\n                                            </p>\r\n                                        </React.Fragment>\r\n                                    )}\r\n                                </List> :\r\n                                <Message text=\"No Comments\" padding />\r\n                            )\r\n                        }}\r\n                    </Subscription>\r\n                )}\r\n            </Query>\r\n        </Container>\r\n    )\r\n}","/*\r\n * COMPONENT: Input\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport '../styles/Input.css'\r\n\r\nexport default ({ options }) => {\r\n    const {\r\n        type='text',\r\n        value, ref, name,\r\n        defaultValue,\r\n        placeholder='Write a message...',\r\n        autoComplete=\"Default text\",\r\n        onChange=() => {},\r\n        onKeyPress=() => {}\r\n    } = options\r\n\r\n    const classes = [\r\n        'ui-input'\r\n    ]\r\n\r\n    return (\r\n        <input\r\n            ref={ref}\r\n            type={type}\r\n            name={name}\r\n            value={value}\r\n            defaultValue={defaultValue}\r\n            className={classes.join(' ')}\r\n            placeholder={placeholder}\r\n            autoComplete={autoComplete}\r\n            onChange={onChange}\r\n            onKeyPress={onKeyPress}\r\n        />\r\n    )\r\n}","/*\r\n * COMPONENT: TextArea\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport '../styles/TextArea.css'\r\n\r\nexport default ({ options }) => {\r\n    const {\r\n        ref,\r\n        type,\r\n        value,\r\n        name,\r\n        defaultValue,\r\n        placeholder='Write a message...',\r\n        onChange=() => {}, resize=false\r\n    } = options || {}\r\n\r\n    const classes = [\r\n        'ui-textarea',\r\n        type\r\n    ]\r\n\r\n    return (\r\n        <textarea\r\n            ref={ref}\r\n            name={name}\r\n            value={value}\r\n            defaultValue={defaultValue}\r\n            className={classes.join(' ')}\r\n            placeholder={placeholder}\r\n            style={{ resize: (resize) ? 'auto' : 'none' }}\r\n            onChange={onChange}\r\n        />\r\n    )\r\n}","import C from './types'\r\n\r\nexport function setUser(user) {\r\n    return {\r\n        type: C.SET_USER,\r\n        payload: {\r\n            user: (user?.name) ? user : null\r\n        }\r\n    }\r\n}\r\n\r\nexport function setForm(form) {\r\n    return {\r\n        type: C.SET_FORM,\r\n        payload: {\r\n            form\r\n        }\r\n    }\r\n}\r\n\r\nexport function setChat(chat) {\r\n    return {\r\n        type: C.SET_CHAT,\r\n        payload: {\r\n            chat\r\n        }\r\n    }\r\n}\r\n\r\nexport function closeChat(chatId) {\r\n    return {\r\n        type: C.CLOSE_CHAT,\r\n        payload: {\r\n            chatId\r\n        }\r\n    }\r\n}\r\n\r\nexport function addMember(chatId, user) {\r\n    return {\r\n        type: C.ADD_MEMBER,\r\n        payload: {\r\n            chatId, user\r\n        }\r\n    }\r\n}\r\n\r\nexport function newMessage(userId, chatId, message) {\r\n    return {\r\n        type: C.NEW_MESSAGE,\r\n        payload: {\r\n            userId, chatId, message\r\n        }\r\n    }\r\n}\r\n\r\nexport function setDocument(document) {\r\n    return {\r\n        type: C.SET_DOCUMENT,\r\n        payload: {\r\n            document\r\n        }\r\n    }\r\n}\r\n\r\nexport function setDocuments(documents) {\r\n    return {\r\n        type: C.SET_DOCUMENTS,\r\n        payload: {\r\n            documents\r\n        }\r\n    }\r\n}\r\n\r\nexport function setDataTable(table) {\r\n    return {\r\n        type: C.SET_DATA_TABLE,\r\n        payload: {\r\n            table\r\n        }\r\n    }\r\n}","import React, { useState, useContext } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faLock,\r\n    faFlag,\r\n    faQuestion\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport { AuthContext } from '../AuthContext'\r\n\r\nimport Container from './../ui/Container'\r\nimport Row from './../ui/Row'\r\nimport Button from './../ui/Button'\r\nimport List from './../ui/List'\r\nimport Input from './../ui/Input'\r\nimport TextArea from './../ui/TextArea'\r\nimport Divider from './../ui/Divider'\r\n\r\nimport { setUser } from '../../utils/actions'\r\n\r\nimport EnglishFlagIcon from '../../assets/icons/united-kingdom.svg'\r\nimport RussianFlagIcon from '../../assets/icons/russia.svg'\r\nimport BelarusFlagIcon from '../../assets/icons/belarus.svg'\r\n\r\nexport const SettingsEditProfileContent = ({ jump }) => {\r\n    const state = useSelector(state => state)\r\n    const [disabled, setDisabled] = useState(true)\r\n\r\n    const user = state.user\r\n\r\n    return (\r\n        <Container>\r\n            <Input options={{\r\n                type: 'text',\r\n                name: 'name',\r\n                value: user.name,\r\n                onChange: () => {\r\n                    setDisabled(false)\r\n                }\r\n            }} />\r\n            <Button options={{\r\n                state: 'inactive',\r\n                classNames: 'grow',\r\n                disabled, handler: () => {\r\n                    jump('/privacy-and-security')\r\n                }\r\n            }}>\r\n                <p>Save Changes</p>\r\n            </Button>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport const SettingsHomeContent = ({ jump, close }) => {\r\n    const auth = useContext(AuthContext)\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <Container>\r\n            <Button options={{\r\n                state: 'inactive',\r\n                classNames: 'grow',\r\n                handler: () => jump('/edit')\r\n            }}>\r\n                <FontAwesomeIcon icon={faPen} />\r\n                <p>Edit profile</p>\r\n            </Button>\r\n            <Button options={{\r\n                state: 'inactive',\r\n                classNames: 'grow',\r\n                handler: () => jump('/privacy-and-security')\r\n            }}>\r\n                <FontAwesomeIcon icon={faLock} />\r\n                <p>Privacy and Security</p>\r\n            </Button>\r\n\r\n            <Divider />\r\n            \r\n            <Row type=\"col2\">\r\n                <Button options={{\r\n                    state: 'inactive',\r\n                    classNames: 'grow',\r\n                    handler: () => jump('/language')\r\n                }}>\r\n                    <FontAwesomeIcon icon={faFlag} />\r\n                    <p>Language</p>\r\n                </Button>\r\n                <Button options={{\r\n                    state: 'inactive',\r\n                    classNames: 'grow',\r\n                    handler: () => jump('/ask-a-question')\r\n                }}>\r\n                    <FontAwesomeIcon icon={faQuestion} />\r\n                    <p>Ask a question</p>\r\n                </Button>\r\n            </Row>\r\n\r\n            <Divider />\r\n            \r\n            <Button options={{\r\n                state: 'active clear',\r\n                classNames: 'grow',\r\n                handler: () => {\r\n                    close()\r\n                    dispatch(setUser(null))\r\n                    auth.logout()\r\n                }\r\n            }}>\r\n                <p>Log Out</p>\r\n            </Button>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport const SettingsQuestionContent = ({ back }) => {\r\n    const [disabled, setDisabled] = useState(true)\r\n\r\n    return (\r\n        <Container>\r\n            <Input options={{\r\n                type: 'text',\r\n                name: 'title',\r\n                placeholder: 'Enter topic question',\r\n                onChange: () => {\r\n                    setDisabled(false)\r\n                }\r\n            }} />\r\n            <TextArea options={{\r\n                name: 'body',\r\n                placeholder: 'Enter content question',\r\n                onChange: () => {\r\n                    setDisabled(false)\r\n                }\r\n            }} />\r\n            <Button options={{\r\n                state: 'inactive',\r\n                classNames: 'grow',\r\n                disabled, handler: () => {\r\n                    back()\r\n                }\r\n            }}>\r\n                <p>Submit</p>\r\n            </Button>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport const SettingsLanguageContent = ({ back }) => {\r\n    const langs = [\r\n        { id: 0, icon: EnglishFlagIcon, label: 'English' },\r\n        { id: 1, icon: RussianFlagIcon, label: 'Русский' },\r\n        { id: 2, icon: BelarusFlagIcon, label: 'Белоруская' }\r\n    ]\r\n    const [checked, setChecked] = useState(langs[0])\r\n    const [disabled, setDisabled] = useState(true)\r\n\r\n    return (\r\n        <Container>\r\n            <Divider />\r\n\r\n            <List options={{\r\n                list: langs,\r\n                state: checked,\r\n                handlerItem: (item) => {\r\n                    setChecked(item)\r\n                    setDisabled(false)\r\n                }\r\n            }}>\r\n                {({ item }) => (\r\n                    <React.Fragment>\r\n                        <p className=\"avatar\">\r\n                            <img src={item.icon} alt=\"User\" />\r\n                        </p>\r\n                        <p className=\"name\">{item.label}</p>\r\n                    </React.Fragment>\r\n                )}\r\n            </List>\r\n\r\n            <Button options={{\r\n                state: 'inactive',\r\n                classNames: 'grow',\r\n                disabled, handler: () => {\r\n                    back()\r\n                }\r\n            }}>\r\n                <p>Apply</p>\r\n            </Button>\r\n        </Container>\r\n    )\r\n}","/*\r\n * COMPONENT: Checkbox\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\r\nimport '../styles/Checkbox.css'\r\n\r\nexport default ({ options }) => {\r\n    const {\r\n        type,\r\n        list=[],\r\n        handler\r\n    } = options || {}\r\n\r\n    const classes = [\r\n        'ui-checkbox',\r\n        type\r\n    ]\r\n\r\n    const handlerChecked = (item) => {\r\n        handler(list.map(el => (el.id === item.id)\r\n        ? ({\r\n            ...el,\r\n            checked: !el.checked\r\n        }) : ({\r\n            ...el\r\n        })))\r\n    }\r\n\r\n    return (\r\n        <ul className={classes.join(' ')}>\r\n            {list.map((item, key) =>\r\n                <li key={key} onClick={() => handlerChecked(item)} className={(item.checked) ? 'checked' : 'empty'}>\r\n                    <div className=\"checkmark\">\r\n                        <FontAwesomeIcon icon={faCheck} />\r\n                    </div>\r\n                    <p>{item.value}</p>\r\n                </li>    \r\n            )}\r\n        </ul>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default <svg width=\"45\" height=\"46\" viewBox=\"0 0 45 46\" aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"compass\" className=\"svg-inline--fa fa-compass fa-w-16 \" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\">\r\n<path d=\"M16.6846 22.3792L21.2298 27.5366L7.34159 44.3618C7.34159 44.3618 4.90063 47.4901 2.12299 45.0382C-0.654655 42.5863 2.12299 39.7962 2.12299 39.7962L5.82653 35.4842C5.82653 35.4842 4.2174 33.8194 3.13306 32.6941C2.04873 31.5688 1.02879 30.0731 1.02879 30.0731C1.02879 30.0731 -1.49632 26.6066 1.36548 24.5774C4.22728 22.5483 5.65819 25.1693 7.34162 27.0293C9.02505 28.8894 10.2876 30.0731 10.2876 30.0731L16.6846 22.3792Z\" fill=\"black\"/>\r\n<path d=\"M18.368 34.1314C18.368 34.1314 20.2198 34.8924 23.5025 34.6387C26.7851 34.3851 28.8052 33.6241 28.8052 33.6241L16.9371 19.1663C16.9371 19.1663 12.8128 13.8398 13.1494 9.27417C13.4861 4.70856 15.8429 2.6794 15.8429 2.6794C15.8429 2.6794 17.358 0.734782 20.809 0.142943C24.26 -0.448896 26.701 0.988427 26.701 0.988427C26.701 0.988427 29.3944 1.91846 30.9095 5.04675C32.4246 8.17505 31.6671 11.3879 31.4145 12.6561C31.162 13.9243 29.647 16.799 29.647 16.799L26.9611 20.7728L22.4924 15.3617C22.4924 15.3617 24.765 12.1488 25.0175 10.2888C25.2701 8.42869 24.6809 7.27442 22.9974 6.90682C21.314 6.53921 20.304 7.58321 19.9673 8.76688C19.6306 9.95056 20.1356 11.8106 20.809 12.8252C21.4824 13.8398 22.4924 15.3617 22.4924 15.3617L34.7814 30.2422L38.9899 25.1693C38.9899 25.1693 41.0942 22.971 43.5352 24.4929C45.9761 26.0148 44.6294 29.0585 44.6294 29.0585C44.6294 29.0585 41.5992 33.2859 38.7374 35.6533C35.8756 38.0206 32.5929 39.458 32.5929 39.458C32.5929 39.458 29.8153 41.2335 23.5025 41.5717C17.1896 41.9099 13.5703 39.9653 13.5703 39.9653L18.368 34.1314Z\" fill=\"black\"/>\r\n<path d=\"M34.6973 40.8107L40.5051 37.0061L42.8508 39.8928C42.8508 39.8928 45.5554 43.2626 42.6936 45.2918C39.8317 47.321 37.5355 44.3445 37.5355 44.3445L34.6973 40.8107Z\" fill=\"black\"/>\r\n</svg>\r\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { AuthContext } from './AuthContext'\r\nimport Input from './ui/Input'\r\nimport Button from './ui/Button'\r\nimport Checkbox from './ui/Checkbox'\r\nimport Alert from './ui/Alert'\r\nimport ImageLogo from '../assets/images/logo.js'\r\nimport { LOGIN } from '../utils/queries'\r\nimport { setUser } from '../utils/actions'\r\n\r\nconst Login = ({ setLoading, setError }) => {\r\n    const auth = useContext(AuthContext)\r\n    const dispatch = useDispatch()\r\n\r\n    const [ onLogin, { loading } ] = useMutation(LOGIN)\r\n\r\n    const [name, setName] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n    const [settings, setSettings] = useState([\r\n        { id: 0, value: 'Remember Me', checked: false }\r\n    ])\r\n\r\n    useEffect(() => {\r\n        setLoading(loading)\r\n    }, [loading, setLoading])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Input options={{\r\n                type: 'text',\r\n                value: name,\r\n                placeholder: 'Enter name',\r\n                onChange: (e) => {\r\n                    setName(e.target.value)\r\n                }\r\n            }} />\r\n\r\n            <Input options={{\r\n                type: 'password',\r\n                value: password,\r\n                placeholder: 'Enter password',\r\n                onChange: (e) => {\r\n                    setPassword(e.target.value)\r\n                }\r\n            }} />\r\n\r\n            <Checkbox options={{\r\n                list: settings,\r\n                handler: setSettings\r\n            }} />\r\n            \r\n            <Button options={{\r\n                state: 'inactive',\r\n                handler: () => {\r\n                    onLogin({\r\n                        variables: {\r\n                            name, password,\r\n                            area: 'DASHBOARD'\r\n                        }\r\n                    })\r\n                    .then(data => {\r\n                        const user = data.data.login\r\n                        auth.login(user.sessionID)\r\n                        dispatch(setUser(user))\r\n                    })\r\n                    .catch(err => {\r\n                        const msg = err.message.split(': ')[1]\r\n                        setError(msg)\r\n                    })\r\n\r\n                    setName('')\r\n                    setPassword('')\r\n                }\r\n            }}>\r\n                <p>Log In</p>\r\n            </Button>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default () => {\r\n    const [loading, setLoading] = useState('')\r\n    const [error, setError] = useState('')\r\n\r\n    const classes = [\r\n        (loading) ? 'loading' : 'form'\r\n    ]\r\n\r\n    return (\r\n        <main className=\"auth\">\r\n            {(error) && <Alert type=\"error\" message={error} />}\r\n            <form className={classes.join(' ')}>\r\n                <div className=\"logo\">\r\n                    {ImageLogo}\r\n                </div>\r\n\r\n                <Login setLoading={setLoading} setError={setError} />\r\n            </form>\r\n        </main>\r\n    )\r\n}","import React from 'react'\r\nimport '../styles/Headline.css'\r\n\r\nexport default (props) => {\r\n    const Children = props.children\r\n\r\n    return (\r\n        <div className=\"ui-headline\">\r\n            {Children}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport Row from './ui/Row'\r\nimport Headline from './ui/Headline'\r\nimport Message from './ui/Message'\r\n\r\nexport default ({ showModal, hideModal }) => {\r\n    const state = useSelector(state => state)\r\n\r\n    if (!state.user) return null\r\n    \r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Dash</span>\r\n                        <span>Board</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Message text=\"No Content\" padding />\r\n            </aside>\r\n        </main>\r\n    )\r\n}","/*\r\n * COMPONENT: Search\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport Button from './Button'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faFilter } from '@fortawesome/free-solid-svg-icons'\r\nimport Row from './Row'\r\nimport '../styles/Search.css'\r\n\r\nconst Search = ({ options }) => {\r\n    const {\r\n        type=\"text\",\r\n        placeholder='Search',\r\n        classNames,\r\n        onChange=() => {}\r\n    } = options || {}\r\n\r\n    const classes = [\r\n        'ui-search',\r\n        classNames\r\n    ]\r\n\r\n    return (\r\n        <input\r\n            type={type}\r\n            className={classes.join(' ')}\r\n            placeholder={placeholder}\r\n            onChange={onChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ({ options, filter }) => {\r\n    return (\r\n        (filter) ? <Row type=\"flex search\">\r\n            <Search options={options} />\r\n            <Button options={{ type: 'icon' }}>\r\n                <FontAwesomeIcon icon={faFilter} />\r\n            </Button>\r\n        </Row> : <Search options={options} />\r\n    )\r\n}","/*\r\n * COMPONENT: Dropdown\r\n * \r\n * MISSION: ...\r\n * IMPORTANT: Parent component must be 'relative' position\r\n *\r\n**/\r\n\r\nimport React, { useRef } from 'react'\r\nimport '../styles/Dropdown.css'\r\n\r\nexport default (props) => {\r\n    const Children = props.children\r\n\r\n    const {\r\n        type, styles, dropdown\r\n    } = props.options || {}\r\n\r\n    const classes = [\r\n        'ui-dropdown',\r\n        type\r\n    ]\r\n\r\n    const dropdownRef = useRef()\r\n\r\n    if (!dropdown) return null\r\n\r\n    return (\r\n        <div\r\n            ref={dropdownRef}\r\n            className={classes.join(' ')}\r\n            style={styles}\r\n        >\r\n            {Children}\r\n        </div>\r\n    )\r\n}","/*\r\n * COMPONENT: Checkbox\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React, { useState, useEffect } from 'react'\r\nimport '../styles/Radiobox.css'\r\n\r\nexport default ({ options }) => {\r\n    const {\r\n        type,\r\n        list=[],\r\n        handler\r\n    } = options || {}\r\n\r\n    const classes = [\r\n        'ui-radiobox',\r\n        type\r\n    ]\r\n\r\n    const [checked, setChecked] = useState(list)\r\n\r\n    const handlerChecked = (item) => {\r\n        setChecked(checked.map(el => (el.id === item.id)\r\n            ? ({\r\n                ...el,\r\n                checked: true\r\n            }) : ({\r\n                ...el,\r\n                checked: false\r\n            })))\r\n    }\r\n\r\n    useEffect(() => {\r\n        handler(checked)\r\n    }, [handler, checked])\r\n\r\n    return (\r\n        <ul className={classes.join(' ')}>\r\n            {checked.map((item, key) =>\r\n                <li key={key} onClick={() => handlerChecked(item)} className={(item.checked) ? 'checked' : 'empty'}>\r\n                    <div className=\"checkmark\"><span></span></div>\r\n                    <p>{item.value}</p>\r\n                </li>    \r\n            )}\r\n        </ul>\r\n    )\r\n}","export const config = {\r\n    proxy: {\r\n        api: 'http://localhost:5000',\r\n        apiWs: 'ws://localhost:5000',\r\n    },\r\n    get: (key) => {\r\n        return config.proxy[key]\r\n    }\r\n}","/*\r\n * COMPONENT: Table\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React, { useState, useEffect } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faEye,\r\n    faCheck,\r\n    faFilter,\r\n    faArrowLeft,\r\n    faArrowRight\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Row from './Row'\r\nimport Container from './Container'\r\nimport Button from './Button'\r\nimport Search from './Search'\r\nimport Message from './Message'\r\nimport Dropdown from './Dropdown'\r\nimport Checkbox from './Checkbox'\r\nimport Radiobox from './Radiobox'\r\nimport { getPage, getMaxPage } from '../../utils/functions'\r\nimport { config } from '../../utils/config'\r\nimport '../styles/Table.css'\r\n\r\nconst api = config.get('api')\r\n\r\nconst limitDefault = 10\r\nconst limitList = [5, 10, 15, 20, 30, 40, 50]\r\n\r\nconst Manage = ({ table, actions, dishands }) => {\r\n    return (\r\n        <div className=\"manage\">\r\n            {actions.map((Action, key) =>\r\n                <Action\r\n                    key={key}\r\n                    table={table}\r\n                    dishands={dishands}\r\n                />    \r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Table = ({\r\n    max,\r\n    name,\r\n    gridable,\r\n    empty=\"Данные отсутсвуют\",\r\n\r\n    page,\r\n    setPage,\r\n\r\n    table,\r\n    setTable,\r\n\r\n    limits,\r\n    setLimits,\r\n\r\n    headers,\r\n    setHeaders\r\n}) => {\r\n    return (\r\n        <div className={`data ${name}`}>\r\n            <Descriptors\r\n                table={table}\r\n                setTable={setTable}\r\n\r\n                limits={limits}\r\n                setLimits={setLimits}\r\n\r\n                headers={headers}\r\n                setHeaders={setHeaders}\r\n            />\r\n\r\n            <Pagination\r\n                max={max}\r\n                page={page}\r\n                setPage={setPage}\r\n            />\r\n\r\n            <div className={`table${gridable ? ' gridable' : ''}`}>\r\n                {!gridable && <Headers table={table} setTable={setTable} />}\r\n\r\n                {(table.length === 0)\r\n                    ? <Message text={empty} padding />\r\n                    : <Body table={table} setTable={setTable} />}\r\n            </div>\r\n\r\n            <Pagination\r\n                max={max}\r\n                page={page}\r\n                setPage={setPage}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Descriptor = (props) => {\r\n    const {\r\n        size,\r\n        type,\r\n        icon,\r\n        styles,\r\n        children\r\n    } = props\r\n\r\n    const Children = children\r\n\r\n    const [dropdown, setDropdown] = useState(false)\r\n    \r\n    return (\r\n        <Container clear sticky>\r\n            <Button options={{\r\n                state: 'icon inactive',\r\n                disabled: (size === 0),\r\n                handler: () => setDropdown(!dropdown)\r\n            }}>\r\n                <FontAwesomeIcon icon={icon} />\r\n            </Button>\r\n\r\n            <Dropdown options={{ type, styles, dropdown }}>\r\n                {Children}\r\n            </Dropdown>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst Descriptors = ({\r\n    table,\r\n    setTable,\r\n\r\n    headers,\r\n    setHeaders,\r\n\r\n    limits,\r\n    setLimits\r\n}) => {\r\n    const size = table.length\r\n\r\n    const handlerVisible = (headers) => {\r\n        let checkedCount = headers.reduce((prev, curr) => (curr.checked) ? prev + 1 : prev, 0)\r\n        \r\n        if (checkedCount < 1) return headers\r\n\r\n        setHeaders(headers)\r\n\r\n        setTable(table.map(t =>\r\n            ({\r\n                ...t,\r\n                data: t.data.map((c, i) => ({\r\n                    ...c,\r\n                    visible: headers[i].checked\r\n                }))\r\n            })\r\n        ))\r\n    }\r\n\r\n    return (\r\n        <div className=\"descriptors\">\r\n            <Search />\r\n\r\n            {(limits) && <Descriptor\r\n                size={size}\r\n                type=\"filter\"\r\n                icon={faFilter}\r\n                styles={{ width: 96 }}\r\n            >\r\n                <Radiobox options={{\r\n                    list: limits,\r\n                    handler: setLimits\r\n                }} />\r\n            </Descriptor>}\r\n\r\n            {(headers) && <Descriptor\r\n                size={size}\r\n                type=\"visible\"\r\n                icon={faEye}\r\n            >\r\n                <Checkbox options={{\r\n                    list: headers,\r\n                    handler: handlerVisible\r\n                }} />\r\n            </Descriptor>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Headers = ({ table, setTable }) => {\r\n    const [checked, setChecked] = useState(false)\r\n\r\n    const handlerChecked = () => {\r\n        setTable([\r\n            ...table.map(trace => ({\r\n                ...trace,\r\n                checked: !checked\r\n            }))\r\n        ])\r\n        setChecked(!checked)\r\n    }\r\n\r\n    return (\r\n        <div className=\"headers\">\r\n            {(table.length > 0) ?\r\n                <React.Fragment>\r\n                    <div className={`checkmark${checked ? ' checked' : ''}`} onClick={handlerChecked}>\r\n                        <div className={`checkmarks-item`}>\r\n                            <FontAwesomeIcon icon={faCheck} />\r\n                        </div>\r\n                    </div>\r\n                    {table[0].data.map((cell, iter) =>\r\n                        <Header\r\n                            key={iter + 1}\r\n                            iter={iter + 2}\r\n                            cell={cell}\r\n                        />\r\n                    )}\r\n                </React.Fragment>\r\n            : ''}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Header = ({ cell, iter }) => {\r\n    if (!cell.visible) return null\r\n    \r\n    return (\r\n        <div\r\n            className={`header ${cell.type}`}\r\n            style={{ gridColumn: `${iter} / ${iter + 1}` }}\r\n        >\r\n            {cell.header}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Body = ({ table, setTable }) => {\r\n    return (\r\n        <div className=\"body\">\r\n            {table.map((trace, iter) =>\r\n                <Trace key={iter} trace={trace} setTable={setTable} />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Trace = ({ trace, setTable }) => {\r\n    const handlerChecked = () => {\r\n        setTable(table => table.map(t => (t.id === trace.id) ? ({\r\n            ...t,\r\n            checked: !t.checked\r\n        }) : ({ ...t })))\r\n    }\r\n\r\n    return (\r\n        <div className={`trace${trace.checked ? ' checked' : ''}`} onClick={handlerChecked}>\r\n            <div className=\"checkmark\">\r\n                <div className=\"checkmarks-item\">\r\n                    <FontAwesomeIcon icon={faCheck} />\r\n                </div>\r\n            </div>\r\n\r\n            {trace.data.map((cell, iter) =>\r\n                <Cell key={iter} cell={cell} iter={iter + 2} />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Cell = ({ cell, iter }) => {\r\n    if (!cell.visible) return null\r\n    \r\n    return (\r\n        <div\r\n            className={`cell ${cell.type}`}\r\n            style={{ gridColumn: `${iter} / ${iter + 1}` }}\r\n        >\r\n            {(cell.type === 'text') &&\r\n                <p>{(cell.value.length > 99) ? `${cell.value.slice(0, 100)}...` : cell.value}</p>}\r\n            {(cell.type === 'color') &&\r\n                <span style={{ background: cell.value || 'black' }}></span>}\r\n            {(cell.type === 'img') &&\r\n                <img src={(cell.value).replace('./', `${api}/`)} alt={cell.value} />}\r\n            {(cell.type === 'icon') &&\r\n                <img className=\"icon\" src={(cell.value).replace('./', `${api}/`)} alt={cell.value} />}\r\n            {(cell.type === 'hub') &&\r\n                <img className=\"hub\" src={`http://localhost:5000${cell.value.replace('./', '/')}`} alt={cell.value} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Pagination = ({ page, min=0, max=0, setPage }) => {\r\n    const renderPages = () => {\r\n        const pages = []\r\n        for (let i = min; i < (max + 1); i++) {\r\n            if (i < 5) {\r\n                pages.push(\r\n                    <Button key={i} options={{\r\n                        state: (page === i) ? 'disabled icon inactive' : 'active icon',\r\n                        disabled: (page === i),\r\n                        classNames: 'grow',\r\n                        handler: () => setPage(i)\r\n                    }}>\r\n                        <p>{i + 1}</p>\r\n                    </Button>\r\n                )\r\n            }\r\n        }\r\n        return pages.map(page => page)\r\n    }\r\n    \r\n    return (\r\n        <div className=\"pagination\">\r\n            <Button options={{\r\n                state: (page === min) ? 'disabled icon inactive' : 'active icon',\r\n                disabled: (page === min),\r\n                classNames: 'grow',\r\n                handler: () => setPage(page - 1)\r\n            }}>\r\n                <FontAwesomeIcon icon={faArrowLeft} />\r\n            </Button>\r\n\r\n            <Row>{renderPages()}</Row>\r\n\r\n            <Button options={{\r\n                state: (page === max) ? 'disabled icon inactive' : 'active icon',\r\n                disabled: (page === max),\r\n                classNames: 'grow',\r\n                handler: () => setPage(page + 1)\r\n            }}>\r\n                <FontAwesomeIcon icon={faArrowRight} />\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ({ options }) => {\r\n    const [table, setTable] = useState([])\r\n\r\n    const [dishands, setDishands] = useState(true)\r\n    const [page, setPage] = useState(0)\r\n\r\n    const [headers, setHeaders] = useState([])\r\n\r\n    const [limits, setLimits] = useState(limitList.map((l, i) => ({\r\n        id: i,\r\n        value: l,\r\n        checked: (limitDefault === l)\r\n    })))\r\n\r\n    const {\r\n        name='default',\r\n        data=[],\r\n        dataTable=[],\r\n        actions=[]\r\n    } = options || {}\r\n\r\n    const classes = [\r\n        'ui-table'\r\n    ]\r\n\r\n    useEffect(() => {\r\n        if (dataTable) {\r\n            const limit = limits?.find(l => l.checked)?.value || limitDefault\r\n            const content = getPage(dataTable, limit, page)\r\n\r\n            setTable(content.map((trace, i) => ({\r\n                ...data[i],\r\n                _id: data[i].id,\r\n                id: i,\r\n                data: trace.map((cell, j) => ({\r\n                    id: `cell-${i}-${j}`,\r\n                    header: cell.header,\r\n                    value: cell.value,\r\n                    type: cell.type,\r\n                    sortabled: cell.hasOwnProperty('sortabled')\r\n                        ? cell.sortabled\r\n                        : false,\r\n                    visible: cell.hasOwnProperty('visible')\r\n                        ? cell.visible \r\n                        : true\r\n                })),\r\n                checked: false\r\n            })))\r\n        }\r\n    }, [dataTable, data, limits, page])\r\n\r\n    useEffect(() => {\r\n        const checked = table.filter(t => t.checked)\r\n        if (checked.length > 0) setDishands(false)\r\n        else setDishands(true)\r\n    }, [table])\r\n\r\n    useEffect(() => {\r\n        if (table) {\r\n            setHeaders(table[0]?.data.map((tr, i) => ({\r\n                id: i,\r\n                value: tr.header,\r\n                checked: tr.visible\r\n            })))\r\n        }\r\n    }, [table])\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            <Manage\r\n                table={table}\r\n                actions={actions}\r\n                dishands={dishands}\r\n            />\r\n            <Table\r\n                name={name}\r\n\r\n                table={table}\r\n                setTable={setTable}\r\n\r\n                page={page}\r\n                setPage={setPage}\r\n                max={getMaxPage(dataTable, limits?.find(l => l.checked)?.value || limitDefault)}\r\n\r\n                limits={limits}\r\n                setLimits={setLimits}\r\n\r\n                headers={headers}\r\n                setHeaders={setHeaders}\r\n            />\r\n        </div>\r\n    )\r\n}","/*\r\n * COMPONENT: Select\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport Select, { components } from 'react-select'\r\nimport '../styles/Select.css'\r\n\r\nconst Menu = (props) => {\r\n    return (\r\n        <div className=\"ui-select-menu\">\r\n            <components.Menu {...props}>{props.children}</components.Menu>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ({ options }) => {\r\n    const classes = [\r\n        'ui-select'\r\n    ]\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            <Select {...options} components={{ Menu }} />\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Query from '../ui/Query'\r\nimport Alert from '../ui/Alert'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport Select from '../ui/Select'\r\nimport { REGISTER, GET_ALL_ROLES } from '../../utils/queries'\r\n\r\nexport default ({ user=false, close }) => {\r\n    const [action, { loading }] = useMutation(REGISTER)\r\n\r\n    // eslint-disable-next-line\r\n    const [avatar, setAvatar] = useState('')\r\n    const [role, setRole] = useState(null)\r\n\r\n    const { handleSubmit, register, errors } = useForm()\r\n    const onSubmit = async (form) => {\r\n        const variables = {\r\n            name: form.name,\r\n            phone: form.phone,\r\n            email: form.email,\r\n            password: form.password,\r\n            confirmPassword: form.confirmPassword\r\n        }\r\n\r\n        if (role) variables.role = role.value\r\n        if (avatar) variables.avatar = avatar\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            {( \r\n                errors.name ||\r\n                errors.phone ||\r\n                errors.email ||\r\n                errors.password ||\r\n                errors.confirmPassword)\r\n            &&\r\n                <Alert type=\"error\" message={\r\n                    (errors.name.message) ||\r\n                    (errors.phone.message) ||\r\n                    (errors.email.message) ||\r\n                    (errors.password.message) ||\r\n                    (errors.confirmPassword.message)\r\n                } />\r\n            }\r\n\r\n            <Input options={{\r\n                ref: register(),\r\n                type: 'text',\r\n                name: 'name',\r\n                disabled: loading,\r\n                placeholder: 'Enter name'\r\n            }} />\r\n\r\n            <Input options={{\r\n                ref: register(),\r\n                type: 'text',\r\n                name: 'phone',\r\n                disabled: loading,\r\n                placeholder: 'Enter phone'\r\n            }} />\r\n\r\n            <Input options={{\r\n                ref: register(),\r\n                type: 'text',\r\n                name: 'email',\r\n                disabled: loading,\r\n                placeholder: 'Enter email'\r\n            }} />\r\n\r\n            <Input options={{\r\n                ref: register(),\r\n                type: 'password',\r\n                name: 'password',\r\n                disabled: loading,\r\n                placeholder: 'Enter password'\r\n            }} />\r\n\r\n            <Input options={{\r\n                ref: register(),\r\n                type: 'password',\r\n                name: 'confirmPassword',\r\n                disabled: loading,\r\n                placeholder: 'Enter confirm password'\r\n            }} />\r\n\r\n            {(user) && <Query query={GET_ALL_ROLES} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                   <Select options={{\r\n                        defaultValue: role,\r\n                        placeholder: 'Choose role',\r\n                        options: data.allRoles.map(role => ({\r\n                            value: role.id, label: role.name\r\n                        })),\r\n                        onChange: (e) => {\r\n                            setRole(e)\r\n                        }\r\n                    }} />\r\n                )}\r\n            </Query>}\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Add</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Query from '../ui/Query'\r\nimport Alert from '../ui/Alert'\r\nimport List from '../ui/List'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport Select from '../ui/Select'\r\nimport { EDIT_USER, GET_ALL_ROLES, GET_ALL_AVATARS } from '../../utils/queries'\r\nimport { config } from '../../utils/config'\r\n\r\n// eslint-disable-next-line\r\nconst api = config.get('api')\r\n\r\nexport default ({ user, close }) => {\r\n    const [action, { loading }] = useMutation(EDIT_USER)\r\n\r\n    const [avatar, setAvatar] = useState('')\r\n    const [role, setRole] = useState({\r\n        value: user.role.id, label: user.role.name\r\n    })\r\n\r\n    const { handleSubmit, register, errors } = useForm()\r\n    const onSubmit = async (form) => {\r\n        const variables = {\r\n            name: form.name,\r\n            phone: form.phone,\r\n            email: form.email\r\n        }\r\n\r\n        if (role) variables.role = role.value\r\n        if (avatar) variables.avatar = avatar.id\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            {(errors.email || errors.username) && <Alert type=\"error\" message={\r\n                (errors.email.message) || (errors.username.message)\r\n            } />}\r\n\r\n            <Input options={{\r\n                ref: register(),\r\n                type: 'text',\r\n                name: 'name',\r\n                defaultValue: user.name || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter name'\r\n            }} />\r\n\r\n            <Input options={{\r\n                ref: register(),\r\n                type: 'text',\r\n                name: 'phone',\r\n                defaultValue: user.phone || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter phone'\r\n            }} />\r\n\r\n            <Input options={{\r\n                ref: register(),\r\n                type: 'text',\r\n                name: 'email',\r\n                defaultValue: user.email || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter email'\r\n            }} />\r\n\r\n            <Query query={GET_ALL_ROLES} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                   <Select options={{\r\n                        defaultValue: role,\r\n                        placeholder: 'Choose role',\r\n                        options: data.allRoles.map(role => ({\r\n                            value: role.id, label: role.name\r\n                        })),\r\n                        onChange: (e) => {\r\n                            setRole(e)\r\n                        }\r\n                    }} />\r\n                )}\r\n            </Query>\r\n\r\n            <Query query={GET_ALL_AVATARS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    <List options={{\r\n                        type: 'grid',\r\n                        state: avatar,\r\n                        list: data.allAvatars,\r\n                        handlerItem: setAvatar\r\n                    }}>\r\n                        {({ item }) => (\r\n                            <img\r\n                                className=\"image\"\r\n                                src={(item.path).replace('./', `${api}/`)}\r\n                                alt=\"Hub\"\r\n                            />\r\n                        )}\r\n                    </List>\r\n                )}\r\n            </Query>\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Save</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nexport default (props) => {\r\n    const [action, { data, loading, error }] = useMutation(props.query)\r\n\r\n    const Children = props.children\r\n\r\n    return <Children error={error} data={data} loading={loading} action={action} />\r\n}","import React from 'react'\r\nimport Mutation from '../ui/Mutation'\r\nimport Row from '../ui/Row'\r\nimport Container from '../ui/Container'\r\nimport Message from '../ui/Message'\r\nimport Button from '../ui/Button'\r\n\r\nexport default ({ entry, entries, query, handler, close }) => {\r\n    const docs = (entry) ? 'this' : entries.length\r\n    const ents = (docs > 1 && !entry) ? 'entries' : 'entry'\r\n\r\n    return (\r\n        <Container>\r\n            <Message text={`Are you sure you want to delete ${docs} ${ents}?`} padding />\r\n            <Row type=\"flex\">\r\n                <Button options={{\r\n                    state: 'inactive',\r\n                    classNames: 'grow',\r\n                    handler: () => {\r\n                        close()\r\n                    }\r\n                }}>\r\n                    <p>No</p>\r\n                </Button>\r\n                <Mutation query={query}>\r\n                    {({ action, loading }) => (\r\n                        <Button options={{\r\n                            state: 'inactive',\r\n                            classNames: 'grow',\r\n                            disabled: loading,\r\n                            handler: async () => {\r\n                                await handler(action, entry, entries)\r\n                                close()\r\n                            }\r\n                        }}>\r\n                            <p>Yes</p>\r\n                        </Button>\r\n                    )}\r\n                </Mutation>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\n\r\nimport Query from './ui/Query'\r\nimport Subscription from './ui/Subscription'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\n\r\nimport AddUser from './content/AddUser'\r\nimport EditUser from './content/EditUser'\r\nimport DeleteEntries from './content/DeleteEntries'\r\n\r\nimport { GET_ALL_USERS, SUB_ALL_USERS, DELETE_USERS } from '../utils/queries'\r\n\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Users</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_USERS}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_USERS} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.users) || data.allUsers),\r\n                                    dataTable: ((subData && subData.users) || data.allUsers).map(user => ([\r\n                                        { header: 'Аватар', value: user.avatar.path, type: 'icon' },\r\n                                        { header: 'Имя', value: user.name, type: 'text' },\r\n                                        { header: 'Email', value: user.email, type: 'text' },\r\n                                        { header: 'Роль', value: user.role.name, type: 'text' },\r\n                                        { header: 'Дата изменения', value: <Moment date={new Date(new Date().setTime(user.updatedAt))} format=\"DD.MM.YYYY\" />, type: 'text', visible: false },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(user.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Delete Article?',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_USERS}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, docs) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            id: (entry)\r\n                                                                                ? [entry.id]\r\n                                                                                : docs.map(doc => doc.id)\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const user = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!user)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!user),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (user) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Edit User',\r\n                                                        component: ({ close }) => <EditUser\r\n                                                            user={user}\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }])\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'active icon',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Add User',\r\n                                                        component: ({ close }) => <AddUser\r\n                                                            user\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }\r\n                                                ])\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faImage } from '@fortawesome/free-solid-svg-icons'\r\nimport Dropzone from 'react-dropzone-uploader'\r\nimport { config } from '../../utils/config'\r\nimport '../styles/Dropzone.css'\r\n\r\nconst api = config.get('api')\r\n\r\nexport default ({ options }) => {\r\n    const [preview, setPreview] = useState('')\r\n\r\n    const {\r\n        ref,\r\n        name,\r\n        value,\r\n        styles={},\r\n        setImage\r\n    } = options || {}\r\n\r\n    const handleChangeStatus = ({ meta, file }, status) => {\r\n        if (status === 'done') {\r\n            setPreview(meta.previewUrl)\r\n            setImage(file)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`ui-dropzone${(preview || value) ? ' with-preview' : ''}`} styles={styles}>\r\n            {(preview || value) && <div className=\"preview\">\r\n                {(preview) ?\r\n                    <img src={preview} alt=\"Preview\" />\r\n                : (value) ?\r\n                   <img\r\n                        className=\"image\"\r\n                        src={(value).replace('./', `${api}/`)}\r\n                        alt=\"Article\"\r\n                    />\r\n                : <FontAwesomeIcon icon={faImage} />}\r\n            </div>}\r\n\r\n            <Dropzone\r\n                ref={ref}\r\n                name={name}\r\n                maxFiles={1}\r\n                multiple={false}\r\n                onChangeStatus={handleChangeStatus}\r\n                inputContent=\"Drag & Drop Image\"\r\n                accept=\"image/*\"\r\n            />\r\n        </div>\r\n    )\r\n}","/*\r\n * COMPONENT: Toggler\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport Message from './Message'\r\nimport '../styles/Toggler.css'\r\n\r\nexport default ({ options }) => {\r\n    const {\r\n        type,\r\n        state=null,\r\n        handler=null,\r\n        targets=[]\r\n    } = options || {}\r\n\r\n    const classes = [\r\n        'ui-toggler',\r\n        type\r\n    ]\r\n\r\n    const handlerState = (target) => {\r\n        handler(target)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            {targets.map((target, key) =>\r\n                <div\r\n                    key={key}\r\n                    className={`toggle${(target.type === state) ? ' active' : ''}`}\r\n                    onClick={() => handlerState(target.type)}\r\n                >\r\n                    {target.value}\r\n                </div>    \r\n            )}\r\n            {(!targets || targets.length === 0) && <Message text=\"No Content\" />}\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useSelector } from 'react-redux'\r\nimport { useForm } from 'react-hook-form'\r\nimport Row from '../ui/Row'\r\nimport Query from '../ui/Query'\r\nimport Alert from '../ui/Alert'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport TextArea from '../ui/TextArea'\r\nimport Select from '../ui/Select'\r\nimport Dropzone from '../ui/Dropzone'\r\nimport Toggler from '../ui/Toggler'\r\nimport { GET_ALL_HUBS, ADD_ARTICLE } from '../../utils/queries'\r\nimport { config } from '../../utils/config'\r\n\r\nconst api = config.get('api')\r\n\r\nexport default ({ status=false, close }) => {\r\n    const state = useSelector(state => state)\r\n    const [action, { loading }] = useMutation(ADD_ARTICLE)\r\n\r\n    const[hub, setHub] = useState(null)\r\n    const[image, setImage] = useState(null)\r\n    const [_status, _setStatus] = useState(null)\r\n\r\n    const { handleSubmit, register, errors } = useForm()\r\n    const onSubmit = async (form) => {\r\n        if (!hub) return\r\n\r\n        const variables = {\r\n            author: state.user.name,\r\n            title: form.title,\r\n            description: form.description,\r\n            body: form.body, hub,\r\n            status: 'PUBLISHED'\r\n        }\r\n\r\n        if (image) variables.image = image\r\n        if (form.status) variables.status = form.status\r\n        \r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            {(errors.email || errors.username) && <Alert type=\"error\" message={\r\n                (errors.email.message) || (errors.username.message)\r\n            } />}\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'title',\r\n                disabled: loading,\r\n                placeholder: 'Enter title'\r\n            }} />\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'description',\r\n                disabled: loading,\r\n                placeholder: 'Enter description'\r\n            }} />\r\n\r\n            <TextArea options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'body',\r\n                disabled: loading,\r\n                placeholder: 'Enter body'\r\n            }} />\r\n\r\n            <Query query={GET_ALL_HUBS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    <Toggler options={{\r\n                        type: 'auto',\r\n                        state: hub,\r\n                        handler: setHub,\r\n                        targets: (data && data.allHubs).map((hub, key) => ({\r\n                            type: hub.id,\r\n                            value: (\r\n                                <Row key={key}>\r\n                                    {(hub.icon && hub.icon.path) &&\r\n                                    <div className=\"icon\">\r\n                                        <img src={(hub.icon.path).replace('./', `${api}/`)} alt={hub.title} />\r\n                                    </div>}\r\n                                    <p>{hub.title}</p>\r\n                                </Row>\r\n                            )}))\r\n                        }}\r\n                    />\r\n                )}\r\n            </Query>\r\n\r\n            {(status) && <Select options={{\r\n                name: 'status',\r\n                value: _status,\r\n                placeholder: 'Choose status',\r\n                options: [\r\n                    { value: 'MODERATION', label: 'MODERATION' },\r\n                    { value: 'PUBLISHED', label: 'PUBLISHED' }\r\n                ],\r\n                onChange: (e) => {\r\n                    _setStatus(e)\r\n                }\r\n            }} />}\r\n\r\n            <Dropzone options={{\r\n                ref: register,\r\n                name: 'image',\r\n                setImage\r\n            }} />\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Add</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Row from '../ui/Row'\r\nimport Query from '../ui/Query'\r\nimport Alert from '../ui/Alert'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport TextArea from '../ui/TextArea'\r\nimport Select from '../ui/Select'\r\nimport Dropzone from '../ui/Dropzone'\r\nimport Toggler from '../ui/Toggler'\r\nimport { GET_ALL_HUBS, EDIT_ARTICLE } from '../../utils/queries'\r\nimport { config } from '../../utils/config'\r\n\r\nconst api = config.get('api')\r\n\r\nexport default ({ status=false, article, close }) => {\r\n    const [action, { loading }] = useMutation(EDIT_ARTICLE)\r\n\r\n    const[hub, setHub] = useState(article.hub.id)\r\n    const[image, setImage] = useState(null)\r\n\r\n    const { handleSubmit, register, errors } = useForm()\r\n    const onSubmit = async (form) => {\r\n        if (!hub) return\r\n\r\n        const variables = {\r\n            id: article.id,\r\n            title: form.title,\r\n            description: form.description,\r\n            body: form.body, hub\r\n        }\r\n\r\n        if (image) variables.image = image\r\n        if (form.status) variables.status = form.status\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            {(errors.email || errors.username) && <Alert type=\"error\" message={\r\n                (errors.email.message) || (errors.username.message)\r\n            } />}\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'title',\r\n                defaultValue: article.title || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter title'\r\n            }} />\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'description',\r\n                defaultValue: article.description || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter description'\r\n            }} />\r\n\r\n            <TextArea options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'body',\r\n                defaultValue: article.body || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter body'\r\n            }} />\r\n\r\n            <Query query={GET_ALL_HUBS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    <Toggler options={{\r\n                        type: 'auto',\r\n                        state: hub || article.hub.id,\r\n                        handler: setHub,\r\n                        targets: (data && data.allHubs).map((hub, key) => ({\r\n                            type: hub.id,\r\n                            value: (\r\n                                <Row key={key}>\r\n                                    {(hub.icon && hub.icon.path) &&\r\n                                    <div className=\"icon\">\r\n                                        <img src={(hub.icon.path).replace('./', `${api}/`)} alt={hub.title} />\r\n                                    </div>}\r\n                                    <p>{hub.title}</p>\r\n                                </Row>\r\n                            )}))\r\n                        }}\r\n                    />\r\n                )}\r\n            </Query>\r\n\r\n            {(status) && <Select options={{\r\n                value: article.status,\r\n                placeholder: 'Choose status',\r\n                options: [\r\n                    { value: 'MODERATION', label: 'MODERATION' },\r\n                    { value: 'PUBLISHED', label: 'PUBLISHED' }\r\n                ]\r\n            }} />}\r\n\r\n            <Dropzone options={{\r\n                ref: register,\r\n                name: 'image',\r\n                value: article.image.path,\r\n                setImage\r\n            }} />\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Save</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\n\r\nimport Query from './ui/Query'\r\nimport Subscription from './ui/Subscription'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\n\r\nimport AddArticle from './content/AddArticle'\r\nimport EditArticle from './content/EditArticle'\r\nimport DeleteEntries from './content/DeleteEntries'\r\n\r\nimport { GET_ALL_ARTICLES, SUB_ARTICLES, DELETE_ARTICLES } from '../utils/queries'\r\n\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Articles</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_ARTICLES}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ARTICLES} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.articles) || data.allArticles),\r\n                                    dataTable: ((subData && subData.articles) || data.allArticles).map(article => ([\r\n                                        { header: 'ID', value: article.id, type: 'text', visible: false },\r\n                                        { header: 'Изображение', value: article.image.path, type: 'img' },\r\n                                        { header: 'Заголовок', value: article.title, type: 'text' },\r\n                                        { header: 'Описание', value: article.description, type: 'text', visible: false },\r\n                                        { header: 'Комментарии', value: article.comments.length, type: 'text' },\r\n                                        { header: 'Содержание', value: article.body, type: 'text', visible: false },\r\n                                        { header: 'Сообщество', value: article.hub.title, type: 'text' },\r\n                                        { header: 'Статус', value: article.status, type: 'text' },\r\n                                        { header: 'Дата изменения', value: <Moment date={new Date(new Date().setTime(article.updatedAt))} format=\"DD.MM.YYYY\" />, type: 'text', visible: false },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(article.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Delete Article?',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_ARTICLES}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, docs) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            articles: (entry)\r\n                                                                                ? [{\r\n                                                                                    id: entry.id,\r\n                                                                                    author: entry.author.id\r\n                                                                                }]\r\n                                                                                : docs.map(doc => ({\r\n                                                                                    id: doc.id,\r\n                                                                                    author: doc.author.id\r\n                                                                                }))\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const article = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!article)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!article),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (article) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Edit Article',\r\n                                                        component: ({ close }) => <EditArticle\r\n                                                            status\r\n                                                            article={article}\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }])\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'icon active',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Add Article',\r\n                                                        component: ({ close }) => <AddArticle\r\n                                                            status\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }\r\n                                                ])\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useSelector } from 'react-redux'\r\nimport { useForm } from 'react-hook-form'\r\nimport Row from '../ui/Row'\r\nimport Query from '../ui/Query'\r\nimport Alert from '../ui/Alert'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport TextArea from '../ui/TextArea'\r\nimport Select from '../ui/Select'\r\nimport Toggler from '../ui/Toggler'\r\nimport { GET_ALL_HUBS, ADD_OFFER } from '../../utils/queries'\r\nimport { config } from '../../utils/config'\r\n\r\nconst api = config.get('api')\r\n\r\nexport default ({ status=false, close }) => {\r\n    const state = useSelector(state => state)\r\n    const [action, { loading }] = useMutation(ADD_OFFER)\r\n\r\n    const[hub, setHub] = useState(null)\r\n    const [_status, _setStatus] = useState('')\r\n\r\n    const { handleSubmit, register, errors } = useForm()\r\n    const onSubmit = async (form) => {\r\n        if (!hub) return\r\n\r\n        const variables = {\r\n            title: form.title,\r\n            message: form.message,\r\n            hub, user: state.user.id,\r\n            status: 'PUBLISHED'\r\n        }\r\n\r\n        if (_status) variables.status = _status.value\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            {(errors.email) && <Alert type=\"error\" message={\r\n                (errors.email.message)\r\n            } />}\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'title',\r\n                disabled: loading,\r\n                placeholder: 'Enter title'\r\n            }} />\r\n\r\n            <TextArea options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'message',\r\n                disabled: loading,\r\n                placeholder: 'Enter message'\r\n            }} />\r\n\r\n            <Query query={GET_ALL_HUBS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    <Toggler options={{\r\n                        type: 'auto',\r\n                        state: hub,\r\n                        handler: setHub,\r\n                        targets: (data && data.allHubs).map((hub, key) => ({\r\n                            type: hub.id,\r\n                            value: (\r\n                                <Row key={key}>\r\n                                    {(hub.icon && hub.icon.path) &&\r\n                                    <div className=\"icon\">\r\n                                        <img src={(hub.icon.path).replace('./', `${api}/`)} alt={hub.title} />\r\n                                    </div>}\r\n                                    <p>{hub.title}</p>\r\n                                </Row>\r\n                            )}))\r\n                        }}\r\n                    />\r\n                )}\r\n            </Query>\r\n\r\n            {(status) && <Select options={{\r\n                name: 'status',\r\n                value: _status,\r\n                placeholder: 'Choose status',\r\n                options: [\r\n                    { value: 'MODERATION', label: 'MODERATION' },\r\n                    { value: 'PUBLISHED', label: 'PUBLISHED' }\r\n                ],\r\n                onChange: (e) => {\r\n                    _setStatus(e)\r\n                }\r\n            }} />}\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Add</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useSelector } from 'react-redux'\r\nimport { useForm } from 'react-hook-form'\r\nimport Row from '../ui/Row'\r\nimport Query from '../ui/Query'\r\nimport Alert from '../ui/Alert'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport TextArea from '../ui/TextArea'\r\nimport Select from '../ui/Select'\r\nimport Toggler from '../ui/Toggler'\r\nimport { GET_ALL_HUBS, GET_ALL_USERS, EDIT_OFFER } from '../../utils/queries'\r\nimport { config } from '../../utils/config'\r\n\r\nconst api = config.get('api')\r\n\r\nexport default ({ user=false, status=false, offer, close }) => {\r\n    const state = useSelector(state => state)\r\n    const [action, { loading }] = useMutation(EDIT_OFFER)\r\n\r\n    const[hub, setHub] = useState(offer.hub.id)\r\n    const [_user, _setUser] = useState(offer.user.id)\r\n    const [_status, _setStatus] = useState(offer.status)\r\n\r\n    const { handleSubmit, register, errors } = useForm()\r\n    const onSubmit = async (form) => {\r\n        if (!hub) return\r\n\r\n        const variables = {\r\n            id: offer.id,\r\n            title: form.title,\r\n            message: form.message,\r\n            hub, user: state.user.id,\r\n            status: 'PUBLISHED'\r\n        }\r\n\r\n        if (_user) variables.user = _user\r\n        if (_status) variables.status = _status\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            {(errors.email || errors.username) && <Alert type=\"error\" message={\r\n                (errors.email.message) || (errors.username.message)\r\n            } />}\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'title',\r\n                defaultValue: offer.title || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter title'\r\n            }} />\r\n\r\n            <TextArea options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'message',\r\n                defaultValue: offer.message || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter message'\r\n            }} />\r\n\r\n            <Query query={GET_ALL_HUBS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    <Toggler options={{\r\n                        type: 'auto',\r\n                        state: hub,\r\n                        handler: setHub,\r\n                        targets: (data && data.allHubs).map((hub, key) => ({\r\n                            type: hub.id,\r\n                            value: (\r\n                                <Row key={key}>\r\n                                    {(hub.icon && hub.icon.path) &&\r\n                                    <div className=\"icon\">\r\n                                        <img src={(hub.icon.path).replace('./', `${api}/`)} alt={hub.title} />\r\n                                    </div>}\r\n                                    <p>{hub.title}</p>\r\n                                </Row>\r\n                            )}))\r\n                        }}\r\n                    />\r\n                )}\r\n            </Query>\r\n\r\n            {(user) && <Query query={GET_ALL_USERS}>\r\n                {({ data }) => (\r\n                    <Select options={{\r\n                        name: 'users',\r\n                        value: _user,\r\n                        placeholder: 'Choose user',\r\n                        options: data.allUsers.map(u => ({\r\n                            value: u.id,\r\n                            label: u.name\r\n                        })),\r\n                        onChange: (e) => {\r\n                            _setUser(e)\r\n                        }\r\n                    }} />\r\n                )}\r\n            </Query>}\r\n\r\n            {(status) && <Select options={{\r\n                name: 'status',\r\n                value: _status,\r\n                placeholder: 'Choose status',\r\n                options: [\r\n                    { value: 'MODERATION', label: 'MODERATION' },\r\n                    { value: 'PUBLISHED', label: 'PUBLISHED' }\r\n                ],\r\n                onChange: (e) => {\r\n                    _setStatus(e)\r\n                }\r\n            }} />}\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Save</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\n\r\nimport Query from './ui/Query'\r\nimport Subscription from './ui/Subscription'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\n\r\nimport AddOffer from './content/AddOffer'\r\nimport EditOffer from './content/EditOffer'\r\nimport DeleteEntries from './content/DeleteEntries'\r\n\r\nimport { GET_ALL_OFFERS, SUB_ALL_OFFERS, DELETE_OFFERS } from '../utils/queries'\r\n\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Offers</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_OFFERS}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_OFFERS} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.offers) || data.allOffers),\r\n                                    dataTable: ((subData && subData.offers) || data.allOffers).map(offer => ([\r\n                                        { header: 'ID', value: offer.id, type: 'text', visible: false },\r\n                                        { header: 'Заголовок', value: offer.title, type: 'text' },\r\n                                        { header: 'Описание', value: offer.message, type: 'text' },\r\n                                        { header: 'Пользователь', value: offer.user.name, type: 'text' },\r\n                                        { header: 'Сообщество', value: offer.hub.title, type: 'text' },\r\n                                        { header: 'Статус', value: offer.status, type: 'text' },\r\n                                        { header: 'Дата изменения', value: <Moment date={new Date(new Date().setTime(offer.updatedAt))} format=\"DD.MM.YYYY\" />, type: 'text', visible: false },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(offer.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Delete Offer',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_OFFERS}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, docs) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            offers: (entry)\r\n                                                                                ? [{\r\n                                                                                    id: entry.id,\r\n                                                                                    user: entry.user.id\r\n                                                                                }]\r\n                                                                                : docs.map(doc => ({\r\n                                                                                    id: doc.id,\r\n                                                                                    user: doc.user.id\r\n                                                                                }))\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const offer = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!offer)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!offer),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (offer) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Edit Offer',\r\n                                                        component: ({ close }) => <EditOffer\r\n                                                            user\r\n                                                            status\r\n                                                            offer={offer}\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }], true)\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'icon active',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Add Offer',\r\n                                                        component: ({ close }) => <AddOffer\r\n                                                            user\r\n                                                            status\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }\r\n                                                ], true)\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport Mutation from '../ui/Mutation'\r\nimport Container from '../ui/Container'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport Select from '../ui/Select'\r\nimport { ADD_HUB } from '../../utils/queries'\r\n\r\nexport default ({ status=false, close }) => {\r\n    const [title, setTitle] = useState('')\r\n    const [description, setDescription] = useState('')\r\n    const [slogan, setSlogan] = useState('')\r\n    const [color, setColor] = useState('')\r\n    // eslint-disable-next-line\r\n    const [icon, setIcon] = useState('')\r\n    const [_status, _setStatus] = useState('')\r\n\r\n    return (\r\n        <Container type=\"fat\">\r\n            <Input options={{\r\n                type: 'text',\r\n                placeholder: 'Enter title',\r\n                onChange: (e) => {\r\n                    setTitle(e.target.value)\r\n                }\r\n            }} />\r\n\r\n            <Input options={{\r\n                type: 'text',\r\n                placeholder: 'Enter description',\r\n                onChange: (e) => {\r\n                    setDescription(e.target.value)\r\n                }\r\n            }} />\r\n\r\n            <Input options={{\r\n                placeholder: 'Enter slogan',\r\n                onChange: (e) => {\r\n                    setSlogan(e.target.value)\r\n                }\r\n            }} />\r\n\r\n            <Input options={{\r\n                type: 'color',\r\n                placeholder: 'Choose color',\r\n                onChange: (e) => {\r\n                    setColor(e.target.value)\r\n                }\r\n            }} />\r\n\r\n            {(status) && <Select options={{\r\n                placeholder: 'Choose status',\r\n                options: [\r\n                    { value: 'MODERATION', label: 'MODERATION' },\r\n                    { value: 'PUBLISHED', label: 'PUBLISHED' }\r\n                ],\r\n                onChange: (e) => {\r\n                    _setStatus(e.value)\r\n                }\r\n            }} />}\r\n\r\n            <Mutation query={ADD_HUB}>\r\n                {({ action }) => (\r\n                    <Button options={{\r\n                        state: 'inactive',\r\n                        handler: async () => {\r\n                            const variables = {\r\n                                title, description, slogan,\r\n                                color, status: 'PUBLISHED'\r\n                            }\r\n\r\n                            // if (icon) variables.icon = icon\r\n                            if (status) variables.status = _status\r\n\r\n                            await action({ variables })\r\n\r\n                            close()\r\n                        }\r\n                    }}>\r\n                        <p>Add</p>\r\n                    </Button>\r\n                )}\r\n            </Mutation>\r\n        </Container>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Query from '../ui/Query'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport List from '../ui/List'\r\nimport TextArea from '../ui/TextArea'\r\nimport Select from '../ui/Select'\r\nimport { GET_ALL_ICONS, EDIT_HUB } from '../../utils/queries'\r\nimport { config } from '../../utils/config'\r\n\r\nconst api = config.get('api')\r\n\r\nexport default ({ status=false, hub, close }) => {\r\n    const [action, { loading }] = useMutation(EDIT_HUB)\r\n\r\n    const[image, setImage] = useState(hub.icon || {})\r\n    const [_status, _setStatus] = useState(hub.status)\r\n\r\n    const { handleSubmit, register } = useForm()\r\n\r\n    const onSubmit = async (form) => {\r\n        const variables = {\r\n            id: hub._id,\r\n            title: form.title,\r\n            description: form.description,\r\n            slogan: form.slogan,\r\n            color: form.color\r\n        }\r\n\r\n        if (image) variables.icon = image.id\r\n        if (form.status) variables.status = form.status\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'title',\r\n                defaultValue: hub.title || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter title'\r\n            }} />\r\n            \r\n            <TextArea options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'description',\r\n                defaultValue: hub.description || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter description'\r\n            }} />\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'slogan',\r\n                defaultValue: hub.slogan || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter slogan'\r\n            }} />\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'color',\r\n                name: 'slogan',\r\n                defaultValue: hub.color || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter color'\r\n            }} />\r\n\r\n            {(status) && <Select options={{\r\n                defaultValue: { value: _status, label: _status },\r\n                placeholder: 'Choose status',\r\n                options: [\r\n                    { value: 'MODERATION', label: 'MODERATION' },\r\n                    { value: 'PUBLISHED', label: 'PUBLISHED' }\r\n                ],\r\n                onChange: (e) => {\r\n                    _setStatus(e.value)\r\n                }\r\n            }} />}\r\n\r\n            <Query query={GET_ALL_ICONS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    <List options={{\r\n                        type: 'grid',\r\n                        state: image,\r\n                        list: data.allIcons,\r\n                        handlerItem: setImage\r\n                    }}>\r\n                        {({ item }) => (\r\n                            <img\r\n                                className=\"image\"\r\n                                src={(item.path).replace('./', `${api}/`)}\r\n                                alt=\"Hub\"\r\n                            />\r\n                        )}\r\n                    </List>\r\n                )}\r\n            </Query>\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Save</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\n\r\nimport Query from './ui/Query'\r\nimport Subscription from './ui/Subscription'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\n\r\nimport AddHub from './content/AddHub'\r\nimport EditHub from './content/EditHub'\r\nimport DeleteEntries from './content/DeleteEntries'\r\n\r\nimport { GET_ALL_HUBS, SUB_ALL_HUBS, DELETE_HUBS } from '../utils/queries'\r\n\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Hubs</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_HUBS}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_HUBS} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.hubs) || data.allHubs),\r\n                                    dataTable: ((subData && subData.hubs) || data.allHubs).map(hub => ([\r\n                                        { header: 'ID', value: hub.id, type: 'text', visible: false },\r\n                                        { header: 'Иконка', value: hub.icon.path, type: 'icon' },\r\n                                        { header: 'Заголовок', value: hub.title, type: 'text' },\r\n                                        { header: 'Описание', value: hub.description, type: 'text' },\r\n                                        { header: 'Слоган', value: hub.slogan, type: 'text', visible: false },\r\n                                        { header: 'Цвет', value: hub.color, type: 'color' },\r\n                                        { header: 'Пользователи', value: hub.countUsers, type: 'text', visible: false },\r\n                                        { header: 'Статус', value: hub.status, type: 'text' },\r\n                                        { header: 'Дата изменения', value: <Moment date={new Date(new Date().setTime(hub.updatedAt))} format=\"DD.MM.YYYY\" />, type: 'text', visible: false },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(hub.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Delete Article?',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_HUBS}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, docs) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            id: (entry)\r\n                                                                                ? [entry.id]\r\n                                                                                : docs.map(doc => doc.id)\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const hub = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!hub)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!hub),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (hub) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Edit Hub',\r\n                                                        component: ({ close }) => <EditHub\r\n                                                            status\r\n                                                            hub={hub}\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }], true)\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'icon active',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Add Hub',\r\n                                                        component: ({ close }) => <AddHub\r\n                                                            status\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }\r\n                                                ], true)\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Query from '../ui/Query'\r\nimport Row from '../ui/Row'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport Toggler from '../ui/Toggler'\r\nimport Select from '../ui/Select'\r\nimport { ADD_CHAT, GET_ALL_CHAT_TYPES, GET_ALL_USERS } from '../../utils/queries'\r\n\r\nexport default ({ close }) => {\r\n    const [action, { loading }] = useMutation(ADD_CHAT)\r\n\r\n    const[chatType, setChatType] = useState('USER_CHAT')\r\n    const[sender, setSender] = useState(null)\r\n    const[reciever, setReciever] = useState(null)\r\n    const[members, setMembers] = useState(null)\r\n\r\n    const { handleSubmit, register } = useForm()\r\n    const onSubmit = async (form) => {\r\n        const variables = {\r\n            type: chatType,\r\n            title: form.title,\r\n            members: (chatType.includes('USER'))\r\n                ? [sender.value, reciever.value]\r\n                : members.map(member => member.value)\r\n        }\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'title',\r\n                disabled: loading,\r\n                placeholder: 'Enter title'\r\n            }} />\r\n\r\n            <Query query={GET_ALL_CHAT_TYPES} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    <Toggler options={{\r\n                        type: 'auto',\r\n                        state: chatType,\r\n                        handler: setChatType,\r\n                        targets: (data && data.allChatTypes).map((type, key) => ({\r\n                            type: type,\r\n                            value: (\r\n                                <Row key={key}>\r\n                                    <p>{type.replace('_', ' ')}</p>\r\n                                </Row>\r\n                            )\r\n                        }))}}\r\n                    />\r\n                )}\r\n            </Query>\r\n\r\n            <Query query={GET_ALL_USERS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    (chatType.includes('USER')) ? (\r\n                        <React.Fragment>\r\n                            <Select options={{\r\n                                defaultValue: sender,\r\n                                placeholder: 'Choose sender',\r\n                                options: data.allUsers.map(sender => ({\r\n                                    value: sender.name, label: sender.name\r\n                                })),\r\n                                onChange: (e) => {\r\n                                    setSender(e)\r\n                                }\r\n                            }} />\r\n                            <Select options={{\r\n                                defaultValue: reciever,\r\n                                placeholder: 'Choose reciever',\r\n                                options: data.allUsers.map(reciever => ({\r\n                                    value: reciever.name, label: reciever.name\r\n                                })),\r\n                                onChange: (e) => {\r\n                                    setReciever(e)\r\n                                }\r\n                            }} />\r\n                        </React.Fragment>\r\n                    ) : (\r\n                        <Select options={{\r\n                            value: members,\r\n                            placeholder: 'Choose members',\r\n                            options: data.allUsers.map(member => ({\r\n                                value: member.name,\r\n                                label: member.name\r\n                            })),\r\n                            closeMenuOnSelect: false,\r\n                            isMulti: true,\r\n                            onChange: (e) => {\r\n                                setMembers(e)\r\n                            }\r\n                        }} />\r\n                    )\r\n                )}\r\n            </Query>\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Add</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Query from '../ui/Query'\r\nimport Row from '../ui/Row'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport Toggler from '../ui/Toggler'\r\nimport Select from '../ui/Select'\r\nimport { ADD_CHAT, GET_ALL_CHAT_TYPES, GET_ALL_USERS } from '../../utils/queries'\r\n\r\nexport default ({ chat, members, close }) => {\r\n    const [action, { loading }] = useMutation(ADD_CHAT)\r\n\r\n    const[chatType, setChatType] = useState(chat.type || 'USER_CHAT')\r\n    const[_sender, _setSender] = useState((chat.type === 'USER_CHAT') ? ({\r\n        value: chat.members[0].name, label: chat.members[0].name\r\n    }) : null)\r\n    const[_reciever, _setReciever] = useState((chat.type === 'USER_CHAT') ? ({\r\n        value: chat.members[1].name, label: chat.members[1].name\r\n    }) : null)\r\n    const[_members, _setMembers] = useState((members) ? members.map(member => ({\r\n        value: member.name, label: member.name\r\n    })) : null)\r\n\r\n    const { handleSubmit, register } = useForm()\r\n    const onSubmit = async (form) => {\r\n        const variables = {\r\n            type: chatType,\r\n            title: form.title,\r\n            members: members.map(member => member.value)\r\n        }\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'title',\r\n                defaultValue: chat.title || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter title'\r\n            }} />\r\n\r\n            <Query query={GET_ALL_CHAT_TYPES} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    <Toggler options={{\r\n                        type: 'auto',\r\n                        state: chat.type || chatType,\r\n                        handler: setChatType,\r\n                        targets: (data && data.allChatTypes).map((type, key) => ({\r\n                            type: type,\r\n                            value: (\r\n                                <Row key={key}>\r\n                                    <p>{type.replace('_', ' ')}</p>\r\n                                </Row>\r\n                            )\r\n                        }))}}\r\n                    />\r\n                )}\r\n            </Query>\r\n\r\n            <Query query={GET_ALL_USERS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    (chatType.includes('USER')) ? (\r\n                        <React.Fragment>\r\n                            <Select options={{\r\n                                defaultValue: _sender,\r\n                                placeholder: 'Choose sender',\r\n                                options: data.allUsers.map(sender => ({\r\n                                    value: sender.name, label: sender.name\r\n                                })),\r\n                                onChange: (e) => {\r\n                                    _setSender(e)\r\n                                }\r\n                            }} />\r\n                            <Select options={{\r\n                                defaultValue: _reciever,\r\n                                placeholder: 'Choose reciever',\r\n                                options: data.allUsers.map(reciever => ({\r\n                                    value: reciever.name, label: reciever.name\r\n                                })),\r\n                                onChange: (e) => {\r\n                                    _setReciever(e)\r\n                                }\r\n                            }} />\r\n                        </React.Fragment>\r\n                    ) : (\r\n                        <Select options={{\r\n                            value: _members,\r\n                            placeholder: 'Choose members',\r\n                            options: data.allUsers.map(member => ({\r\n                                value: member.name,\r\n                                label: member.name\r\n                            })),\r\n                            closeMenuOnSelect: false,\r\n                            isMulti: true,\r\n                            onChange: (e) => {\r\n                                _setMembers(e)\r\n                            }\r\n                        }} />\r\n                    )\r\n                )}\r\n            </Query>\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Save</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\n\r\nimport Query from './ui/Query'\r\nimport Subscription from './ui/Subscription'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\n\r\nimport AddChat from './content/AddChat'\r\nimport EditChat from './content/EditChat'\r\nimport DeleteEntries from './content/DeleteEntries'\r\n\r\nimport { GET_ALL_CHATS, SUB_ALL_CHATS, DELETE_CHATS } from '../utils/queries'\r\n\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Chats</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_CHATS}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_CHATS} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.chats) || data.allChats),\r\n                                    dataTable: ((subData && subData.chats) || data.allChats || []).map(chat => ([\r\n                                        { header: 'ID', value: chat.id, type: 'text', visible: false },\r\n                                        { header: 'Название', value: chat.title, type: 'text' },\r\n                                        { header: 'Участники', value: chat.members?.length, type: 'text' },\r\n                                        { header: 'Сообщений', value: chat.messages?.length, type: 'text' },\r\n                                        { header: 'Тип чата', value: chat.type, type: 'text' },\r\n                                        { header: 'Дата изменения', value: <Moment date={new Date(new Date().setTime(chat.updatedAt))} format=\"DD.MM.YYYY\" />, type: 'text', visible: false },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(chat.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Delete Chat',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_CHATS}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, docs) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            id: (entry)\r\n                                                                                ? [{\r\n                                                                                    id: entry.id,\r\n                                                                                    user: entry.user.id\r\n                                                                                }]\r\n                                                                                : docs.map(doc => ({\r\n                                                                                    id: doc.id,\r\n                                                                                    user: doc.user.id\r\n                                                                                }))\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const chat = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!chat)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!chat),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (chat) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Edit Chat',\r\n                                                        component: ({ close }) => <EditChat\r\n                                                            chat={chat}\r\n                                                            members={chat.members}\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }], true)\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'icon active',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Add Chat',\r\n                                                        component: ({ close }) => <AddChat\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }\r\n                                                ], true)\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Button from '../ui/Button'\r\nimport Dropzone from '../ui/Dropzone'\r\nimport { ADD_OFFER } from '../../utils/queries'\r\n\r\nexport default ({ close }) => {\r\n    const [action] = useMutation(ADD_OFFER)\r\n\r\n    const[image, setImage] = useState(null)\r\n\r\n    const { handleSubmit, register } = useForm()\r\n    const onSubmit = async () => {\r\n        const variables = { file: image }\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            <Dropzone options={{\r\n                ref: register,\r\n                name: 'image',\r\n                setImage\r\n            }} />\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Add</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Button from '../ui/Button'\r\nimport Dropzone from '../ui/Dropzone'\r\nimport { EDIT_OFFER } from '../../utils/queries'\r\n\r\nexport default ({ image, close }) => {\r\n    const [action] = useMutation(EDIT_OFFER)\r\n\r\n    const[_image, _setImage] = useState(null)\r\n\r\n    const { handleSubmit, register } = useForm()\r\n    const onSubmit = async () => {\r\n        const variables = { file: _image }\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            <Dropzone options={{\r\n                ref: register,\r\n                name: 'image',\r\n                value: image.path,\r\n                setImage: _setImage\r\n            }} />\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Add</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\n\r\nimport Query from './ui/Query'\r\nimport Subscription from './ui/Subscription'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\n\r\nimport AddImage from './content/AddImage'\r\nimport EditImage from './content/EditImage'\r\nimport DeleteEntries from './content/DeleteEntries'\r\n\r\nimport { GET_ALL_IMAGES, SUB_ALL_IMAGES, DELETE_IMAGES } from '../utils/queries'\r\n\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Gallery</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_IMAGES}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_IMAGES} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.images) || data.allImages),\r\n                                    dataTable: ((subData && subData.images) || data.allImages).map(image => ([\r\n                                        { header: 'ID', value: image.id, type: 'text', visible: false },\r\n                                        { header: 'Изображение', value: image.path, type: 'img' },\r\n                                        { header: 'Название', value: image.name, type: 'text' },\r\n                                        { header: 'Путь', value: image.path, type: 'text' },\r\n                                        { header: 'Дата изменения', value: <Moment date={new Date(new Date().setTime(image.updatedAt))} format=\"DD.MM.YYYY\" />, type: 'text', visible: false },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(image.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Delete Offer',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_IMAGES}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, entries) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            id: (entry)\r\n                                                                                ? [{\r\n                                                                                    id: entry.id,\r\n                                                                                    user: entry.user.id\r\n                                                                                }]\r\n                                                                                : entries.map(ent => ent._id)\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const image = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!image)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!image),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (image) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Edit Image',\r\n                                                        component: ({ close }) => <EditImage\r\n                                                            image={image}\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }], true)\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'icon active',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Add Image',\r\n                                                        component: ({ close }) => <AddImage\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }\r\n                                                ], true)\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Row from '../ui/Row'\r\nimport Query from '../ui/Query'\r\nimport Alert from '../ui/Alert'\r\nimport Input from '../ui/Input'\r\nimport Button from '../ui/Button'\r\nimport Toggler from '../ui/Toggler'\r\nimport Dropzone from '../ui/Dropzone'\r\nimport { GET_ALL_HUBS, ADD_AVATAR } from '../../utils/queries'\r\nimport { config } from '../../utils/config'\r\n\r\nconst api = config.get('api')\r\n\r\nexport default ({ close }) => {\r\n    const [action, { loading }] = useMutation(ADD_AVATAR)\r\n\r\n    const[hub, setHub] = useState(null)\r\n    const[image, setImage] = useState(null)\r\n\r\n    const { handleSubmit, register, errors } = useForm()\r\n    const onSubmit = async (form) => {\r\n        if (!hub) return null\r\n\r\n        const variables = {\r\n            order: parseInt(form.order),\r\n            complexity: parseInt(form.complexity),\r\n            file: image,\r\n            hub\r\n        }\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            {(errors.order || errors.complexity) && <Alert type=\"error\" message={\r\n                (errors.order.message || errors.order.complexity)\r\n            } />}\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'number',\r\n                name: 'order',\r\n                disabled: loading,\r\n                placeholder: 'Enter order'\r\n            }} />\r\n            \r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'number',\r\n                name: 'complexity',\r\n                disabled: loading,\r\n                placeholder: 'Enter complexity'\r\n            }} />\r\n\r\n            <Dropzone options={{\r\n                ref: register,\r\n                name: 'image',\r\n                setImage\r\n            }} />\r\n\r\n            <Query query={GET_ALL_HUBS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    <Toggler options={{\r\n                        type: 'auto',\r\n                        state: hub,\r\n                        handler: setHub,\r\n                        targets: (data && data.allHubs).map((hub, key) => ({\r\n                            type: hub.id,\r\n                            value: (\r\n                                <Row key={key}>\r\n                                    {(hub.icon && hub.icon.path) &&\r\n                                    <div className=\"icon\">\r\n                                        <img src={(hub.icon.path).replace('./', `${api}/`)} alt={hub.title} />\r\n                                    </div>}\r\n                                    <p>{hub.title}</p>\r\n                                </Row>\r\n                            )}))\r\n                        }}\r\n                    />\r\n                )}\r\n            </Query>\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Add</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Row from '../ui/Row'\r\nimport Query from '../ui/Query'\r\nimport Alert from '../ui/Alert'\r\nimport Input from '../ui/Input'\r\nimport Button from '../ui/Button'\r\nimport Toggler from '../ui/Toggler'\r\nimport Dropzone from '../ui/Dropzone'\r\nimport { GET_ALL_HUBS, ADD_AVATAR } from '../../utils/queries'\r\nimport { config } from '../../utils/config'\r\n\r\nconst api = config.get('api')\r\n\r\nexport default ({ avatar, close }) => {\r\n    const [action, { loading }] = useMutation(ADD_AVATAR)\r\n\r\n    const[hub, setHub] = useState(avatar.hub.id)\r\n    const[image, setImage] = useState(null)\r\n\r\n    const { handleSubmit, register, errors } = useForm()\r\n    const onSubmit = async (form) => {\r\n        if (!hub) return null\r\n\r\n        const variables = {\r\n            order: parseInt(form.order),\r\n            complexity: parseInt(form.complexity),\r\n            file: image,\r\n            hub\r\n        }\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            {(errors.order || errors.complexity) && <Alert type=\"error\" message={\r\n                (errors.order.message || errors.order.complexity)\r\n            } />}\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'number',\r\n                name: 'order',\r\n                defaultValue: avatar.order || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter order'\r\n            }} />\r\n            \r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'number',\r\n                name: 'complexity',\r\n                defaultValue: avatar.complexity || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter complexity'\r\n            }} />\r\n\r\n            <Dropzone options={{\r\n                ref: register,\r\n                name: 'image',\r\n                value: avatar.path,\r\n                setImage\r\n            }} />\r\n\r\n            <Query query={GET_ALL_HUBS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    <Toggler options={{\r\n                        type: 'auto',\r\n                        state: hub,\r\n                        handler: setHub,\r\n                        targets: (data && data.allHubs).map((hub, key) => ({\r\n                            type: hub.id,\r\n                            value: (\r\n                                <Row key={key}>\r\n                                    {(hub.icon && hub.icon.path) &&\r\n                                    <div className=\"icon\">\r\n                                        <img src={(hub.icon.path).replace('./', `${api}/`)} alt={hub.title} />\r\n                                    </div>}\r\n                                    <p>{hub.title}</p>\r\n                                </Row>\r\n                            )}))\r\n                        }}\r\n                    />\r\n                )}\r\n            </Query>\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Save</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\n\r\nimport Query from './ui/Query'\r\nimport Subscription from './ui/Subscription'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\n\r\nimport AddAvatar from './content/AddAvatar'\r\nimport EditAvatar from './content/EditAvatar'\r\nimport DeleteEntries from './content/DeleteEntries'\r\n\r\nimport { GET_ALL_AVATARS, SUB_ALL_AVATARS, DELETE_AVATARS } from '../utils/queries'\r\n\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Avatars</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_AVATARS}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_AVATARS} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.avatars) || data.allAvatars),\r\n                                    dataTable: ((subData && subData.avatars) || data.allAvatars).map(avatar => ([\r\n                                        { header: 'ID', value: avatar.id, type: 'text', visible: false },\r\n                                        { header: 'Изображение', value: avatar.path, type: 'icon' },\r\n                                        { header: 'Порядок', value: avatar.order, type: 'text' },\r\n                                        { header: 'Название', value: avatar.name, type: 'text', visible: false },\r\n                                        { header: 'Путь', value: avatar.path, type: 'text', visible: false },\r\n                                        { header: 'Редкость', value: avatar.complexity, type: 'text' },\r\n                                        { header: 'Сообщество', value: avatar.hub.title, type: 'text' },\r\n                                        { header: 'Дата изменения', value: <Moment date={new Date(new Date().setTime(avatar.updatedAt))} format=\"DD.MM.YYYY\" />, type: 'text', visible: false },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(avatar.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Delete Avatar',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_AVATARS}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, entries) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            id: (entry)\r\n                                                                                ? [{\r\n                                                                                    id: entry.id,\r\n                                                                                    user: entry.user.id\r\n                                                                                }]\r\n                                                                                : entries.map(ent => ent._id)\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const avatar = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!avatar)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!avatar),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (avatar) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Edit Avatar',\r\n                                                        component: ({ close }) => <EditAvatar\r\n                                                            avatar={avatar}\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }], true)\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'icon active',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Add Avatar',\r\n                                                        component: ({ close }) => <AddAvatar\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }\r\n                                                ], true)\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Row from '../ui/Row'\r\nimport Query from '../ui/Query'\r\nimport Button from '../ui/Button'\r\nimport Toggler from '../ui/Toggler'\r\nimport Dropzone from '../ui/Dropzone'\r\nimport { GET_ALL_HUBS, ADD_ICON } from '../../utils/queries'\r\nimport { config } from '../../utils/config'\r\n\r\nconst api = config.get('api')\r\n\r\nexport default ({ close }) => {\r\n    const [action] = useMutation(ADD_ICON)\r\n\r\n    const[hub, setHub] = useState(null)\r\n    const[image, setImage] = useState(null)\r\n\r\n    const { handleSubmit, register } = useForm()\r\n    const onSubmit = async () => {\r\n        if (!hub) return null\r\n\r\n        const variables = {\r\n            file: image,\r\n            hub\r\n        }\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            <Dropzone options={{\r\n                ref: register,\r\n                name: 'image',\r\n                setImage\r\n            }} />\r\n\r\n            <Query query={GET_ALL_HUBS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    <Toggler options={{\r\n                        type: 'auto',\r\n                        state: hub,\r\n                        handler: setHub,\r\n                        targets: (data && data.allHubs).map((hub, key) => ({\r\n                            type: hub.id,\r\n                            value: (\r\n                                <Row key={key}>\r\n                                    {(hub.icon && hub.icon.path) &&\r\n                                    <div className=\"icon\">\r\n                                        <img src={(hub.icon.path).replace('./', `${api}/`)} alt={hub.title} />\r\n                                    </div>}\r\n                                    <p>{hub.title}</p>\r\n                                </Row>\r\n                            )}))\r\n                        }}\r\n                    />\r\n                )}\r\n            </Query>\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Add</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Row from '../ui/Row'\r\nimport Query from '../ui/Query'\r\nimport Button from '../ui/Button'\r\nimport Toggler from '../ui/Toggler'\r\nimport Dropzone from '../ui/Dropzone'\r\nimport { GET_ALL_HUBS, ADD_ICON } from '../../utils/queries'\r\nimport { config } from '../../utils/config'\r\n\r\nconst api = config.get('api')\r\n\r\nexport default ({ icon, close }) => {\r\n    const [action] = useMutation(ADD_ICON)\r\n\r\n    const[hub, setHub] = useState(null)\r\n    const[image, setImage] = useState(null)\r\n\r\n    const { handleSubmit, register } = useForm()\r\n    const onSubmit = async () => {\r\n        if (!hub) return null\r\n\r\n        const variables = {\r\n            file: image,\r\n            hub\r\n        }\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            <Dropzone options={{\r\n                ref: register,\r\n                name: 'image',\r\n                value: icon.path,\r\n                setImage\r\n            }} />\r\n\r\n            <Query query={GET_ALL_HUBS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    <Toggler options={{\r\n                        type: 'auto',\r\n                        state: hub,\r\n                        handler: setHub,\r\n                        targets: (data && data.allHubs).map((hub, key) => ({\r\n                            type: hub.id,\r\n                            value: (\r\n                                <Row key={key}>\r\n                                    {(hub.icon && hub.icon.path) &&\r\n                                    <div className=\"icon\">\r\n                                        <img src={(hub.icon.path).replace('./', `${api}/`)} alt={hub.title} />\r\n                                    </div>}\r\n                                    <p>{hub.title}</p>\r\n                                </Row>\r\n                            )}))\r\n                        }}\r\n                    />\r\n                )}\r\n            </Query>\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Save</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\n\r\nimport Query from './ui/Query'\r\nimport Subscription from './ui/Subscription'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\n\r\nimport AddIcon from './content/AddIcon'\r\nimport EditIcon from './content/EditIcon'\r\nimport DeleteEntries from './content/DeleteEntries'\r\n\r\nimport { GET_ALL_ICONS, SUB_ALL_ICONS, DELETE_ICONS } from '../utils/queries'\r\n\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Icons</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_ICONS}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_ICONS} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.icons) || data.allIcons),\r\n                                    dataTable: ((subData && subData.icons) || data.allIcons).map(icon => ([\r\n                                        { header: 'ID', value: icon.id, type: 'text', visible: false },\r\n                                        { header: 'Изображение', value: icon.path, type: 'icon' },\r\n                                        { header: 'Сообщество', value: icon.hub.title, type: 'text' },\r\n                                        { header: 'Название', value: icon.name, type: 'text', visible: false },\r\n                                        { header: 'Путь', value: icon.path, type: 'text', visible: false },\r\n                                        { header: 'Дата изменения', value: <Moment date={new Date(new Date().setTime(icon.updatedAt))} format=\"DD.MM.YYYY\" />, type: 'text', visible: false },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(icon.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Delete Offer',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_ICONS}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, entries) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            id: (entry)\r\n                                                                                ? [{\r\n                                                                                    id: entry.id,\r\n                                                                                    user: entry.user.id\r\n                                                                                }]\r\n                                                                                : entries.map(ent => ent._id)\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const icon = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!icon)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!icon),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (icon) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Edit Icon',\r\n                                                        component: ({ close }) => <EditIcon\r\n                                                            icon={icon}\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }], true)\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'icon active',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Add Icon',\r\n                                                        component: ({ close }) => <AddIcon\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }\r\n                                                ], true)\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Query from '../ui/Query'\r\nimport Select from '../ui/Select'\r\nimport Alert from '../ui/Alert'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport { EDIT_ROLE, GET_ALL_PERMITIONS } from '../../utils/queries'\r\n\r\nexport default ({ role, close }) => {\r\n    const [permissions, setPermissions] = useState(role.permissions.map(p => ({\r\n        value: p, label: p\r\n    })))\r\n    const [action, { loading }] = useMutation(EDIT_ROLE)\r\n\r\n    const { handleSubmit, register, errors } = useForm()\r\n    const onSubmit = async (form) => {\r\n        const variables = {\r\n            id: role.id,\r\n            name: form.name\r\n        }\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            {(errors.name) && <Alert type=\"error\" message={errors.name.message} />}\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'name',\r\n                defaultValue: role.name,\r\n                disabled: loading,\r\n                placeholder: 'Enter name'\r\n            }} />\r\n\r\n            <Query query={GET_ALL_PERMITIONS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    <Select options={{\r\n                        value: permissions,\r\n                        options: data.allPermissions.map(p => ({\r\n                            value: p,\r\n                            label: p\r\n                        })),\r\n                        closeMenuOnSelect: false,\r\n                        isMulti: true,\r\n                        onChange: (e) => {\r\n                            setPermissions(e)\r\n                        }\r\n                    }} />\r\n                )}\r\n            </Query>\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Save</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Query from '../ui/Query'\r\nimport Select from '../ui/Select'\r\nimport Alert from '../ui/Alert'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport { ADD_ROLE, GET_ALL_PERMITIONS } from '../../utils/queries'\r\n\r\nexport default ({ close }) => {\r\n    const [permissions, setPermissions] = useState(null)\r\n    const [action, { loading }] = useMutation(ADD_ROLE)\r\n\r\n    const { handleSubmit, register, errors } = useForm()\r\n    const onSubmit = async (form) => {\r\n        const variables = {\r\n            name: form.name,\r\n            permissions: permissions.map(p => p.value)\r\n        }\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            {(errors.name) && <Alert type=\"error\" message={errors.name.message} />}\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'name',\r\n                disabled: loading,\r\n                placeholder: 'Enter name'\r\n            }} />\r\n\r\n            <Query query={GET_ALL_PERMITIONS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    <Select options={{\r\n                        value: permissions,\r\n                        placeholder: 'Choose permissions',\r\n                        options: data.allPermissions.map(p => ({\r\n                            value: p,\r\n                            label: p\r\n                        })),\r\n                        closeMenuOnSelect: false,\r\n                        isMulti: true,\r\n                        onChange: (e) => {\r\n                            setPermissions(e)\r\n                        }\r\n                    }} />\r\n                )}\r\n            </Query>\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Save</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\n\r\nimport Query from './ui/Query'\r\nimport Subscription from './ui/Subscription'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\n\r\nimport EditRole from './content/EditRole'\r\nimport AddRole from './content/AddRole'\r\nimport DeleteEntries from './content/DeleteEntries'\r\n\r\nimport {\r\n    GET_ALL_ROLES,\r\n    DELETE_ROLES,\r\n    SUB_ALL_ROLES\r\n} from '../utils/queries'\r\n\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Roles</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_ROLES}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_ROLES} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.roles) || data.allRoles),\r\n                                    dataTable: ((subData && subData.roles) || data.allRoles).map(role => ([\r\n                                        { header: 'ID', value: role.id, type: 'text', visible: false },\r\n                                        { header: 'Имя', value: role.name, type: 'text' },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(role.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Delete Role?',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_ROLES}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, docs) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            id: (entry)\r\n                                                                                ? [entry.id]\r\n                                                                                : docs.map(doc => doc.id)\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const role = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!role)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!role),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (role) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Edit Role',\r\n                                                        component: ({ close }) => <EditRole\r\n                                                            role={role}\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }], true)\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'active icon',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Add Role',\r\n                                                        component: ({ close }) => <AddRole\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }\r\n                                                ], true)\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Alert from '../ui/Alert'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport { ADD_LANGUAGE } from '../../utils/queries'\r\n\r\nexport default ({ close }) => {\r\n    const [action, { loading }] = useMutation(ADD_LANGUAGE)\r\n\r\n    const { handleSubmit, register, errors } = useForm()\r\n    const onSubmit = async (form) => {\r\n        const variables = {\r\n            code: form.code\r\n        }\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            {(errors.code) && <Alert type=\"error\" message={\r\n                (errors.code.message)\r\n            } />}\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'code',\r\n                disabled: loading,\r\n                placeholder: 'Enter code'\r\n            }} />\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Add</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Alert from '../ui/Alert'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport { ADD_LANGUAGE } from '../../utils/queries'\r\n\r\nexport default ({ language, close }) => {\r\n    const [action, { loading }] = useMutation(ADD_LANGUAGE)\r\n\r\n    const { handleSubmit, register, errors } = useForm()\r\n    const onSubmit = async (form) => {\r\n        const variables = {\r\n            code: form.code\r\n        }\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            {(errors.code) && <Alert type=\"error\" message={\r\n                (errors.code.message)\r\n            } />}\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'code',\r\n                value: language.code,\r\n                disabled: loading,\r\n                placeholder: 'Enter code'\r\n            }} />\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Save</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\n\r\nimport Query from './ui/Query'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\n\r\nimport AddLanguage from './content/AddLanguage'\r\nimport EditLanguage from './content/EditLanguage'\r\nimport DeleteEntries from './content/DeleteEntries'\r\n\r\nimport { GET_ALL_LANGUAGES, DELETE_LANGUAGES } from '../utils/queries'\r\n\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Language</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_LANGUAGES}>\r\n                    {({ data }) => (\r\n                        <Table options={{\r\n                            data: data.allLanguages,\r\n                            dataTable: data.allLanguages.map(language => ([\r\n                                { header: 'ID', value: language.id, type: 'text', visible: false },\r\n                                { header: 'Код', value: language.code, type: 'text' },\r\n                                { header: 'Дата изменения', value: <Moment date={new Date(new Date().setTime(language.updatedAt))} format=\"DD.MM.YYYY\" />, type: 'text', visible: false },\r\n                                { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(language.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                            ])),\r\n                            actions: [\r\n                                ({ table, dishands }) => (\r\n                                    <Button options={{\r\n                                        state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                        disabled: dishands,\r\n                                        classNames: 'stretch',\r\n                                        handler: () => {\r\n                                            showModal([\r\n                                                {\r\n                                                    path: '/',\r\n                                                    title: 'Delete Language',\r\n                                                    component: ({ close }) => <DeleteEntries\r\n                                                        query={DELETE_LANGUAGES}\r\n                                                        entries={table.filter(t => t.checked)}\r\n                                                        handler={async (action, entry, docs) => {\r\n                                                            await action({\r\n                                                                variables: {\r\n                                                                    id: (entry)\r\n                                                                        ? [{\r\n                                                                            id: entry.id,\r\n                                                                            user: entry.user.id\r\n                                                                        }]\r\n                                                                        : docs.map(doc => ({\r\n                                                                            id: doc.id,\r\n                                                                            user: doc.user.id\r\n                                                                        }))\r\n                                                                }\r\n                                                            })\r\n                                                        }}\r\n                                                        close={close}\r\n                                                    />\r\n                                                }\r\n                                            ], true)\r\n                                        }\r\n                                    }}>\r\n                                        <FontAwesomeIcon icon={faTrash} />\r\n                                    </Button>\r\n                                ),\r\n                                ({ table, dishands }) => {\r\n                                    const docs = table.filter(t => t.checked)\r\n                                    const language = (docs.length === 1) ? docs[0] : false\r\n                                    return (\r\n                                        <Button options={{\r\n                                            state: (dishands || (!language)) ? 'disable icon inactive' : 'active icon',\r\n                                            disabled: dishands || (!language),\r\n                                            classNames: 'stretch',\r\n                                            handler: () => (language) && showModal([{\r\n                                                path: '/',\r\n                                                title: 'Edit Language',\r\n                                                component: ({ close }) => <EditLanguage\r\n                                                    language={language}\r\n                                                    close={close}\r\n                                                />\r\n                                            }], true)\r\n                                        }}>\r\n                                            <FontAwesomeIcon icon={faPen} />\r\n                                        </Button>\r\n                                    )\r\n                                },\r\n                                () => (\r\n                                    <Button options={{\r\n                                        state: 'icon active',\r\n                                        classNames: 'stretch',\r\n                                        handler: () => showModal([\r\n                                            {\r\n                                                path: '/',\r\n                                                title: 'Add Language',\r\n                                                component: ({ close }) => <AddLanguage\r\n                                                    close={close}\r\n                                                />\r\n                                            }\r\n                                        ], true)\r\n                                    }}>\r\n                                        <FontAwesomeIcon icon={faPlus} />\r\n                                    </Button>\r\n                                )\r\n                            ]\r\n                        }} />\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React from 'react'\r\nimport Home from './components/Home'\r\nimport Users from './components/Users'\r\nimport Articles from './components/Articles'\r\nimport Offers from './components/Offers'\r\nimport Hubs from './components/Hubs'\r\n// eslint-disable-next-line\r\nimport Tours from './components/Tours'\r\nimport Chats from './components/Chats'\r\nimport Images from './components/Images'\r\nimport Avatars from './components/Avatars'\r\nimport Icons from './components/Icons'\r\n// eslint-disable-next-line\r\nimport Pets from './components/Pets'\r\nimport Roles from './components/Roles'\r\nimport Languages from './components/Languages'\r\n\r\nexport default [\r\n    {\r\n        exact: true,\r\n        path: '/',\r\n        component: ({ showModal, hideModal }) => <Home showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/users',\r\n        component: ({ showModal, hideModal }) => <Users showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/articles',\r\n        component: ({ showModal, hideModal }) => <Articles showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/offers',\r\n        component: ({ showModal, hideModal }) => <Offers showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/hubs',\r\n        component: ({ showModal, hideModal }) => <Hubs showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/chats',\r\n        component: ({ showModal, hideModal }) => <Chats showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    /*\r\n    {\r\n        exact: true,\r\n        path: '/tours',\r\n        component: ({ showModal, hideModal }) => <Tours showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/pets',\r\n        component: ({ showModal, hideModal }) => <Pets showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    */\r\n    {\r\n        exact: true,\r\n        path: '/roles',\r\n        component: ({ showModal, hideModal }) => <Roles showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/images',\r\n        component: ({ showModal, hideModal }) => <Images showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/avatars',\r\n        component: ({ showModal, hideModal }) => <Avatars showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/icons',\r\n        component: ({ showModal, hideModal }) => <Icons showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/languages',\r\n        component: ({ showModal, hideModal }) => <Languages showModal={showModal} hideModal={hideModal} />\r\n    }\r\n]","import React, { useState, useEffect, useContext } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faUsers,\r\n    faNewspaper,\r\n    faAddressBook,\r\n    faGamepad,\r\n    // eslint-disable-next-line\r\n    faPaw,\r\n    faEye,\r\n    faImage,\r\n    faGlobeAsia,\r\n    faPaperPlane,\r\n    // eslint-disable-next-line\r\n    faTrophy,\r\n    faBell,\r\n    faTheaterMasks,\r\n    faIcons,\r\n    faCog\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport { AuthContext } from './AuthContext'\r\n\r\nimport Row from './ui/Row'\r\nimport Navigation from './ui/Navigation'\r\nimport Modal from './ui/Modal'\r\n\r\nimport ViewEmpty from './content/ViewEmpty'\r\nimport ViewNotifications from './content/ViewNotifications'\r\nimport {\r\n    SettingsEditProfileContent,\r\n    SettingsHomeContent,\r\n    SettingsQuestionContent,\r\n    SettingsLanguageContent\r\n} from './content/ViewSettings'\r\n\r\nimport Auth from './Auth'\r\n\r\nimport SVGLogo from '../assets/images/logo'\r\n\r\nimport routes from '../routes'\r\nimport '../assets/styles/App.css'\r\n\r\nfunction getButton(name, handler, routes, icon) {\r\n    return ({\r\n        options: {\r\n            type: 'large-round',\r\n            handler: () => handler(routes, true)\r\n        },\r\n        component: (\r\n            <Row>\r\n                <FontAwesomeIcon icon={icon} />\r\n                <p>{name}</p>\r\n            </Row>\r\n        )\r\n    })\r\n}\r\n\r\nconst Content = () => {\r\n    const state = useSelector(state => state)\r\n\r\n    const { logout } = useContext(AuthContext)\r\n\r\n    const [closeByBackground, setClosedByBackground] = useState(true)\r\n    const [content, setModal] = useState()\r\n    const [center, setCenterModal] = useState(false)\r\n  \r\n    const showModal = (content, center=false) => {\r\n        setModal(content)\r\n        setCenterModal(center)\r\n        document.body.style.overflow = 'hidden'\r\n    }\r\n    const hideModal = () => {\r\n        setModal(null)\r\n        setCenterModal(false)\r\n        document.body.style.overflow = 'initial'\r\n    }\r\n\r\n    useEffect(() => {\r\n        if ((state.user) && !state.user.avatar) {\r\n            setClosedByBackground(false)\r\n            showModal([\r\n                {\r\n                    path: '/',\r\n                    title: 'Choose your Avatar',\r\n                    component: () => <ViewEmpty />\r\n                }\r\n            ], true)\r\n        }\r\n    }, [state.user, logout])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Navigation options={{\r\n                dashboard: true,\r\n                links: [\r\n                    {\r\n                        path: '/',\r\n                        type: 'wide',\r\n                        component: (\r\n                            <Row>\r\n                                <p className=\"icon\">\r\n                                    {SVGLogo}\r\n                                </p>\r\n                                <p>Dashboard</p>\r\n                            </Row>\r\n                        )\r\n                    },\r\n                    {\r\n                        path: '/users',\r\n                        groupTitle: 'Content',\r\n                        component: (\r\n                            <Row>\r\n                                <p className=\"icon\">\r\n                                    <FontAwesomeIcon icon={faUsers} />\r\n                                </p>\r\n                                <p>Users</p>\r\n                            </Row>\r\n                        )\r\n                    },\r\n                    {\r\n                        path: '/articles',\r\n                        component: (\r\n                            <Row>\r\n                                <p className=\"icon\">\r\n                                    <FontAwesomeIcon icon={faNewspaper} />\r\n                                </p>\r\n                                <p>Articles</p>\r\n                            </Row>\r\n                        )\r\n                    },\r\n                    {\r\n                        path: '/offers',\r\n                        component: (\r\n                            <Row>\r\n                                <p className=\"icon\">\r\n                                    <FontAwesomeIcon icon={faAddressBook} />\r\n                                </p>\r\n                                <p>Offers</p>\r\n                            </Row>\r\n                        )\r\n                    },\r\n                    {\r\n                        path: '/hubs',\r\n                        component: (\r\n                            <Row>\r\n                                <p className=\"icon\">\r\n                                    <FontAwesomeIcon icon={faGamepad} />\r\n                                </p>\r\n                                <p>Hubs</p>\r\n                            </Row>\r\n                        )\r\n                    },\r\n                    {\r\n                        path: '/chats',\r\n                        component: (\r\n                            <Row>\r\n                                <p className=\"icon\">\r\n                                    <FontAwesomeIcon icon={faPaperPlane} />\r\n                                </p>\r\n                                <p>Chats</p>\r\n                            </Row>\r\n                        )\r\n                    },\r\n                    /*\r\n                    {\r\n                        path: '/tours',\r\n                        component: (\r\n                            <Row>\r\n                                <p className=\"icon\">\r\n                                    <FontAwesomeIcon icon={faTrophy} />\r\n                                </p>\r\n                                <p>Tours</p>\r\n                            </Row>\r\n                        )\r\n                    },\r\n                    {\r\n                        path: '/pets',\r\n                        component: (\r\n                            <Row>\r\n                                <p className=\"icon\">\r\n                                    <FontAwesomeIcon icon={faPaw} />\r\n                                </p>\r\n                                <p>Pets</p>\r\n                            </Row>\r\n                        )\r\n                    },\r\n                    */\r\n                    {\r\n                        path: '/roles',\r\n                        groupTitle: 'Settings',\r\n                        component: (\r\n                            <Row>\r\n                                <p className=\"icon\">\r\n                                    <FontAwesomeIcon icon={faEye} />\r\n                                </p>\r\n                                <p>Roles</p>\r\n                            </Row>\r\n                        )\r\n                    },\r\n                    {\r\n                        path: '/images',\r\n                        component: (\r\n                            <Row>\r\n                                <p className=\"icon\">\r\n                                    <FontAwesomeIcon icon={faImage} />\r\n                                </p>\r\n                                <p>Images</p>\r\n                            </Row>\r\n                        )\r\n                    },\r\n                    {\r\n                        path: '/avatars',\r\n                        component: (\r\n                            <Row>\r\n                                <p className=\"icon\">\r\n                                    <FontAwesomeIcon icon={faTheaterMasks} />\r\n                                </p>\r\n                                <p>Avatars</p>\r\n                            </Row>\r\n                        )\r\n                    },\r\n                    {\r\n                        path: '/icons',\r\n                        component: (\r\n                            <Row>\r\n                                <p className=\"icon\">\r\n                                    <FontAwesomeIcon icon={faIcons} />\r\n                                </p>\r\n                                <p>Icons</p>\r\n                            </Row>\r\n                        )\r\n                    },\r\n                    {\r\n                        path: '/languages',\r\n                        component: (\r\n                            <Row>\r\n                                <p className=\"icon\">\r\n                                    <FontAwesomeIcon icon={faGlobeAsia} />\r\n                                </p>\r\n                                <p>Languages</p>\r\n                            </Row>\r\n                        )\r\n                    }\r\n                ],\r\n                buttons: [\r\n                    getButton('Notifications', showModal, [\r\n                        {\r\n                            path: '/',\r\n                            title: 'Notifications',\r\n                            component: () => <ViewNotifications />\r\n                        }\r\n                    ], faBell),\r\n                    getButton('Settings', showModal, [\r\n                        {\r\n                            path: '/',\r\n                            title: 'Settings',\r\n                            component: ({ jump, close }) => <SettingsHomeContent jump={jump} close={close} />\r\n                        },\r\n                        {\r\n                            path: '/edit',\r\n                            title: 'Edit Profile',\r\n                            component: ({ jump }) => <SettingsEditProfileContent jump={jump} />\r\n                        },\r\n                        {\r\n                            path: '/privacy-and-security',\r\n                            title: 'Privacy and Security',\r\n                            component: ({ jump }) => <ViewEmpty jump={jump} /> //<SettingsPrivacySecurityContent jump={jump} />\r\n                        },\r\n                        {\r\n                            path: '/language',\r\n                            title: 'Select language',\r\n                            component: ({ back }) => <SettingsLanguageContent back={back} />\r\n                        },\r\n                        {\r\n                            path: '/ask-a-question',\r\n                            title: 'Ask a Question',\r\n                            component: ({ back }) => <SettingsQuestionContent back={back} />\r\n                        }\r\n                    ], faCog)\r\n                ]\r\n            }} />\r\n\r\n            <Switch>\r\n                {routes.map((props, key) =>\r\n                    <Route\r\n                        {...props}\r\n                        key={key}\r\n                        component={() => props.component({ showModal, hideModal })}\r\n                    />\r\n                )}\r\n                <Redirect to=\"/\" />\r\n            </Switch>\r\n            \r\n            <Modal options={{\r\n                routes: content,\r\n                closeByBackground,\r\n                center, hideModal\r\n            }} />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default () => {\r\n    const { isAuthenticated } = useContext(AuthContext)\r\n\r\n    return (\r\n        <Switch>\r\n            {(isAuthenticated && \r\n                <Route\r\n                    path=\"/\"\r\n                    component={({ showModal }) =>\r\n                        <Content showModal={showModal} />\r\n                    }\r\n                />\r\n            )}\r\n\r\n            {(!isAuthenticated) && (\r\n                <React.Fragment>\r\n                    <Route\r\n                        path=\"/auth\"\r\n                        component={({ showModal }) =>\r\n                            <Auth showModal={showModal} />\r\n                        }\r\n                    />\r\n                    <Redirect to=\"/auth\" />\r\n                </React.Fragment>\r\n            )}\r\n        </Switch>\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\nimport { AuthContext } from './AuthContext'\r\nimport { useAuth } from '../hooks/auth.hook'\r\nimport { useQuery } from '@apollo/react-hooks'\r\n\r\nimport Row from './ui/Row'\r\nimport Container from './ui/Container'\r\nimport Alert from './ui/Alert'\r\nimport Skeleton from './ui/Skeleton'\r\n\r\nimport Main from './Main'\r\n\r\nimport { setUser } from '../utils/actions'\r\nimport { GET_USER } from '../utils/queries'\r\n\r\nimport '../assets/styles/App.css'\r\n\r\nconst SkeletonContent = () => (\r\n  <main className=\"skeleton\">\r\n      <aside>\r\n          <Container>\r\n              <Skeleton options={{ height: '85px' }} />\r\n              <Skeleton options={{ height: '45px' }} />\r\n          </Container>\r\n          <Container>\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n          </Container>\r\n      </aside>\r\n      \r\n      <aside>\r\n          <Row type=\"flex\">\r\n              <Skeleton options={{ height: '45px' }} />\r\n              <Skeleton options={{ height: '45px' }} />\r\n              <Skeleton options={{ height: '45px' }} />\r\n              <Skeleton options={{ height: '45px' }} />\r\n              <Skeleton options={{ height: '45px' }} />\r\n          </Row>\r\n          <Row type=\"flex\">\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n          </Row>\r\n      </aside>\r\n      \r\n      <aside>\r\n          <Container>\r\n              <Skeleton options={{ height: '85px' }} />\r\n              <Skeleton options={{ height: '45px' }} />\r\n          </Container>\r\n          <Container>\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n          </Container>\r\n      </aside>\r\n  </main>\r\n)\r\n\r\nexport default () => {\r\n  const { sessionID, login, logout } = useAuth()\r\n  const isAuthenticated = !!sessionID\r\n\r\n  const state = useSelector(state => state)\r\n  const dispatch = useDispatch()\r\n\r\n  const { data, loading, error } = useQuery(GET_USER)\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      if (data.getUser) dispatch(setUser(data.getUser))\r\n      else logout()\r\n    }\r\n  }, [data, logout, dispatch])\r\n\r\n  if (loading && !state.user) {\r\n    return <SkeletonContent />\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <main className=\"alert\">\r\n        <Alert type=\"error\" message=\"Sorry, site is temporarily unavailable\" />\r\n      </main>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={{\r\n      sessionID, login, logout, isAuthenticated\r\n    }}>\r\n      <div className=\"app\">\r\n        <Router>\r\n          <Main />\r\n        </Router>\r\n      </div>\r\n    </AuthContext.Provider>\r\n  )\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { ApolloClient } from 'apollo-client'\r\nimport { InMemoryCache } from 'apollo-cache-inmemory'\r\nimport { ApolloProvider } from '@apollo/react-hooks'\r\nimport { split } from '@apollo/client'\r\nimport { getMainDefinition } from '@apollo/client/utilities'\r\nimport { WebSocketLink } from '@apollo/client/link/ws'\r\nimport { createUploadLink } from 'apollo-upload-client'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport storeFactory from './storeFactory'\r\nimport App from './components/App'\r\nimport { config } from './utils/config'\r\nimport './index.css'\r\n\r\nconst api = config.get('api')\r\nconst apiWs = config.get('apiWs')\r\n\r\nconst wsLink = new WebSocketLink({\r\n  uri: `${apiWs}/graphql`,\r\n  options: {\r\n    reconnect: true\r\n  }\r\n})\r\n\r\nconst uploadLink = createUploadLink({\r\n  uri: `${api}/graphql`,\r\n  credentials: 'include'\r\n})\r\n\r\nconst splitLink = split(\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query);\r\n    return (\r\n      definition.kind === 'OperationDefinition' &&\r\n      definition.operation === 'subscription'\r\n    )\r\n  },\r\n  wsLink,\r\n  uploadLink\r\n)\r\n\r\nconst client = new ApolloClient({\r\n  link: splitLink,\r\n  cache: new InMemoryCache()\r\n})\r\n\r\nconst store = storeFactory\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </ApolloProvider>,\r\n  document.getElementById('root')\r\n)\r\n\r\nserviceWorker.unregister()"],"sourceRoot":""}