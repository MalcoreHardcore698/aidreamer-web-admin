{"version":3,"sources":["serviceWorker.js","utils/types.js","utils/reducers.js","storeFactory.js","initialState.js","components/AuthContext.js","utils/functions.js","hooks/auth.hook.js","components/ui/Row.js","components/ui/Container.js","components/ui/Alert.js","components/ui/Skeleton.js","components/ui/Button.js","components/ui/Divider.js","components/ui/Navigation.js","components/ui/Transition.js","components/ui/Modal.js","components/ui/Message.js","components/content/ViewEmpty.js","components/ui/Query.js","components/ui/Subscription.js","components/ui/List.js","utils/config.js","components/ui/Avatar.js","utils/queries.js","components/content/ViewNotifications.js","components/ui/Checkbox.js","components/ui/Input.js","components/ui/TextArea.js","utils/actions.js","components/content/ViewSettings.js","assets/images/logo.js","components/Auth.js","components/ui/Column.js","components/ui/Headline.js","components/Home.js","components/ui/Dropdown.js","components/ui/Table.js","components/ui/Select.js","components/content/AddUser.js","components/content/EditUser.js","components/ui/Mutation.js","components/content/DeleteEntries.js","components/Users.js","components/ui/Toggler.js","components/ui/Dropzone.js","components/ui/HubToggler.js","hooks/window.size.hook.js","components/content/AddArticle.js","components/content/EditArticle.js","components/Articles.js","components/Acts.js","components/content/AddOffer.js","components/content/EditOffer.js","components/Offers.js","components/content/AddHub.js","components/content/EditHub.js","components/Hubs.js","components/Tours.js","components/content/AddChat.js","components/content/EditChat.js","components/Chats.js","components/content/AddImage.js","components/content/EditImage.js","components/Images.js","components/content/AddAvatar.js","components/content/EditAvatar.js","components/Avatars.js","components/content/AddIcon.js","components/content/EditIcon.js","components/Icons.js","components/content/AddFlag.js","components/content/EditFlag.js","components/Flags.js","components/Pets.js","components/content/EditRole.js","components/content/AddRole.js","components/Roles.js","components/content/AddLanguage.js","components/content/EditLanguage.js","components/Languages.js","routes.js","components/Main.js","components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","SET_USER","SET_FORM","SET_DATA_TABLE","SET_DOCUMENT","SET_DOCUMENTS","SET_CURRENT_HUB","ADD_OFFER","SET_CHAT","CLOSE_CHAT","reducers","combineReducers","user","state","action","type","C","payload","ADD_CHAT","chats","map","chat","userId","chatId","filter","document","documents","table","filters","currentHub","createStore","applyMiddleware","thunk","noop","AuthContext","createContext","sessionID","login","logout","isAuthenticated","getMaxPage","data","limit","arr","maxPage","length","slice","useAuth","useState","setSessionID","ready","setReady","useCallback","value","name","expiresDays","date","Date","setTime","getTime","expires","toUTCString","domain","cookie","JSON","stringify","setCookie","useEffect","session","cname","ca","decodeURIComponent","split","i","c","charAt","substring","indexOf","getCookie","props","Children","children","classes","className","join","style","clear","sticky","message","component","options","Button","child","disabled","path","handler","handlerClick","e","a","preventDefault","to","onClick","Ripple","color","during","classNames","distance","horizontal","d","Math","round","margin","Block","links","buttons","dashboard","axis","group","key","Fragment","title","link","index","exact","button","showContent","animation","duration","unmountOnExit","handlerEnter","handlerExited","CSSTransition","in","timeout","onEnter","onExited","getPath","navigator","Switch","Childrens","Child","Route","close","back","jump","Compoent","setNavigator","content","setContent","setAnimation","home","routes","center","hideModal","closeByBackground","transitions","fade","handlerExit","swing","handlerBack","setTimeout","handlerJump","handlerClose","id","lockdown","icon","faArrowLeft","find","route","compare","getTitle","text","padding","useQuery","query","variables","loading","error","refetch","pseudo","height","widthRandomness","heightRandomness","gridColumn","skeletons","count","push","skeleton","renderSkeleton","useSubscription","subData","list","handlerItem","item","config","proxy","api","apiWs","get","avatar","properties","src","replace","alt","LOGIN","gql","REGISTER","GET_ALL_USERS","SUB_ALL_USERS","GET_USER","EDIT_USER","DELETE_USERS","GET_STATS","GET_ALL_RARITIES","GET_ALL_STATUS","GET_ALL_CHAT_TYPES","DELETE_CHATS","GET_ALL_CHATS","SUB_ALL_CHATS","SUB_NOTIFICATIONS","GET_USER_NOTIFICATIONS","GET_ALL_HUBS","SUB_ALL_HUBS","ADD_HUB","EDIT_HUB","DELETE_HUBS","GET_ALL_ARTICLES","SUB_ARTICLES","ADD_ARTICLE","EDIT_ARTICLE","DELETE_ARTICLES","GET_ALL_OFFERS","SUB_ALL_OFFERS","EDIT_OFFER","DELETE_OFFERS","GET_ALL_ROLES","ADD_ROLE","EDIT_ROLE","DELETE_ROLES","SUB_ALL_ROLES","GET_ALL_PERMITIONS","GET_ALL_IMAGES","SUB_ALL_IMAGES","DELETE_IMAGES","GET_ALL_AVATARS","SUB_ALL_AVATARS","ADD_AVATAR","EDIT_AVATAR","DELETE_AVATARS","GET_ALL_ICONS","SUB_ALL_ICONS","ADD_ICON","EDIT_ICON","DELETE_ICONS","GET_ALL_FLAGS","SUB_ALL_FLAGS","ADD_FLAG","EDIT_FLAG","DELETE_FLAGS","GET_ALL_LANGUAGES","SUB_ALL_LANGUAGES","ADD_LANGUAGE","EDIT_LANGUAGE","DELETE_LANGUAGES","Query","Subscription","notifications","allUserNotifications","createdAt","format","founded","el","handlerChecked","faCheck","ref","defaultValue","placeholder","autoComplete","onChange","onKeyPress","resize","setUser","setCurrentHub","hub","SettingsEditProfileContent","useMutation","useSelector","setDisabled","setAvatar","preferences","hubs","setHubs","useForm","handleSubmit","register","errors","onSubmit","form","phone","availableAvatars","allHubs","items","SettingsHomeContent","auth","useContext","dispatch","useDispatch","faPen","faLock","faFlag","faQuestion","SettingsQuestionContent","SettingsLanguageContent","checked","setChecked","allLanguages","flag","width","viewBox","aria-hidden","focusable","data-prefix","data-icon","role","xmlns","fill","Login","setLoading","setError","onLogin","setName","password","setPassword","settings","setSettings","target","area","then","catch","err","msg","ImageLogo","MyResponsiveLine","top","right","bottom","left","xScale","yScale","min","max","stacked","reverse","axisTop","axisRight","axisBottom","axisLeft","colors","scheme","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","from","pointLabel","pointLabelYOffset","crosshairType","motionStiffness","animate","useMesh","legends","countUsers","countOffers","countArticles","styles","dropdown","dropdownRef","useRef","limitList","Manage","actions","dishands","Action","Table","gridable","empty","page","setPage","setTable","limits","setLimits","headers","setHeaders","Headers","trace","cell","iter","Header","visible","header","Body","Trace","t","Cell","background","Pagination","pages","renderPages","faArrowRight","setDishands","l","dataTable","start","end","getPage","_id","j","sortabled","hasOwnProperty","tr","Menu","components","setPreferences","setRole","email","confirmPassword","p","allRoles","label","username","entry","entries","docs","ents","Mutation","showModal","users","allUsers","updatedAt","DeleteEntries","names","doc","faTrash","EditUser","AddUser","faPlus","targets","classesToggle","handlerState","preview","setPreview","setImage","faImage","maxFiles","multiple","onChangeStatus","status","meta","file","previewUrl","inputContent","accept","override","all","size","undefined","windowSize","setWindowSize","handleResize","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","hubDropdown","setHubDropdown","slicedIndex","setSlicedIndex","slicedStarts","slicedEnds","faEllipsisH","h","setHub","image","_status","_setStatus","author","description","body","required","HubToggler","allStatus","article","articles","allArticles","comments","EditArticle","AddArticle","offer","_user","_setUser","u","offers","allOffers","EditOffer","AddOffer","slogan","allIcons","EditHub","AddHub","chatType","setChatType","sender","setSender","reciever","setReciever","members","setMembers","includes","member","allChatTypes","closeMenuOnSelect","isMulti","_sender","_setSender","_reciever","_setReciever","_members","_setMembers","allChats","messages","EditChat","AddChat","_image","_setImage","images","allImages","ent","EditImage","AddImage","rarity","setRarity","allRarities","avatars","allAvatars","EditAvatar","AddAvatar","icons","EditIcon","AddIcon","flags","allFlags","EditFlag","AddFlag","permissions","setPermissions","allPermissions","roles","EditRole","AddRole","setFlag","code","language","languages","EditLanguage","AddLanguage","Home","Users","Articles","Offers","Hubs","Chats","Tours","Acts","Pets","Roles","Images","Avatars","Icons","Flags","Languages","getButton","Content","setClosedByBackground","setModal","setCenterModal","overflow","ViewEmpty","SVGLogo","faUsers","faNewspaper","faAddressBook","faGamepad","faPaperPlane","faTrophy","faPaw","faRocket","faEye","faTheaterMasks","faIcons","faGlobeAsia","ViewNotifications","faBell","faCog","Auth","SkeletonContent","getUser","Provider","Main","wsLink","WebSocketLink","uri","reconnect","uploadLink","createUploadLink","credentials","splitLink","definition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","store","storeFactory","ReactDOM","render","getElementById","serviceWorker","registration","unregister","console"],"mappings":"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","file":"static/js/main.a449990e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export default {\r\n    SET_USER: 'SET_USER',\r\n    SET_FORM: 'SET_FORM',\r\n    SET_DATA_TABLE: 'SET_DATA_TABLE',\r\n    SET_DOCUMENT: 'SET_DOCUMENT',\r\n    SET_DOCUMENTS: 'SET_DOCUMENTS',\r\n    SET_CURRENT_HUB: 'SET_CURRENT_HUB',\r\n\r\n    ADD_OFFER: 'ADD_OFFER',\r\n\r\n    SET_CHAT: 'SET_CHAT',\r\n    CLOSE_CHAT: 'CLOSE_CHAT'\r\n}","import { combineReducers } from 'redux'\r\nimport C from './types'\r\n\r\nexport function userReducer(state = {}, action) {\r\n    switch (action.type) {\r\n        case C.SET_USER:\r\n            return action.payload.user\r\n        case C.ADD_CHAT:\r\n            return {\r\n                ...state,\r\n                chats: state.chats.map(chat => (chat.userId !== action.payload.chatId) ? ({\r\n                    chatId: action.payload.chatId\r\n                }) : chat),\r\n            }\r\n        case C.CLOSE_CHAT:\r\n            return {\r\n                ...state,\r\n                chats: state.chats.filter(chat =>\r\n                    (chat.chatId !== action.payload.chatId)\r\n                )\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport function chatReducer(state={}, { type, payload }) {\r\n    switch (type) {\r\n        case C.SET_CHAT:\r\n            return payload.chat\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport function documentReducer(state={}, { type, payload }) {\r\n    switch (type) {\r\n        case C.SET_DOCUMENT:\r\n            return payload.document\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport function documentsReducer(state={}, { type, payload }) {\r\n    switch (type) {\r\n        case C.SET_DOCUMENTS:\r\n            return payload.documents\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport function tableReducer(state=[], { type, payload }) {\r\n    switch(type) {\r\n        case C.SET_DATA_TABLE:\r\n            return payload.table\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport function filtersReducer(state={}, { type, payload }) {\r\n    switch(type) {\r\n        case C.SET_CURRENT_HUB:\r\n            return {\r\n                ...state,\r\n                currentHub: payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const reducers = combineReducers({\r\n    user: userReducer,\r\n    chat: chatReducer,\r\n    document: documentReducer,\r\n    documents: documentsReducer,\r\n    table: tableReducer,\r\n    filters: filtersReducer\r\n})","import {\r\n    createStore,\r\n    applyMiddleware\r\n} from 'redux'\r\n\r\nimport thunk from 'redux-thunk'\r\nimport { reducers } from './utils/reducers'\r\nimport initialState from './initialState'\r\n\r\n\r\nexport default createStore(\r\n    reducers,\r\n    initialState,\r\n    applyMiddleware(thunk)\r\n)","export default {\r\n    user: null,\r\n    chat: null,\r\n    document: null,\r\n    documents: [],\r\n    table: [],\r\n    filters: {\r\n        currentHub: 'all'\r\n    }\r\n}","import { createContext } from 'react'\r\n\r\nfunction noop() {}\r\n\r\nexport const AuthContext = createContext({\r\n    sessionID: null,\r\n    login: noop,\r\n    logout: noop,\r\n    isAuthenticated: false\r\n})","const isDev = process.env.NODE_ENV === 'development'\r\n\r\nexport function parseLink(str) {\r\n    return str.toLowerCase().replace(' ', '-')\r\n}\r\n\r\nexport function getPage(data, limit, page) {\r\n    const start = (page * limit)\r\n    const end = (start + limit)\r\n\r\n    return data.slice(start, end)\r\n}\r\n\r\nexport function getMaxPage(data, limit) {\r\n    let arr = data\r\n    let maxPage = 0\r\n    while (arr.length > 0) {\r\n        arr = arr.slice(limit)\r\n        maxPage += 1\r\n    }\r\n\r\n    return (maxPage - 1)\r\n}\r\n\r\nexport function setCookie(name, value, expiresDays=30) {\r\n    const date = new Date()\r\n    date.setTime(date.getTime() + (expiresDays * 24*60*60*1000))\r\n    const expires = \"expires=\"+ date.toUTCString()\r\n    const domain = (isDev) ? '' : 'domain=.aidreamer.com;'\r\n\r\n    document.cookie = `${name}=${JSON.stringify(value)};${expires};${domain}path=/`\r\n}\r\n\r\nexport function getCookie(cname) {\r\n    const name = cname + \"=\"\r\n    const decodedCookie = decodeURIComponent(document.cookie)\r\n    const ca = decodedCookie.split(';')\r\n\r\n    for(var i = 0; i < ca.length; i++) {\r\n        let c = ca[i]\r\n\r\n        while (c.charAt(0) === ' ') {\r\n            c = c.substring(1)\r\n        }\r\n\r\n        if (c.indexOf(name) === 0) {\r\n            return c.substring(name.length, c.length)\r\n        }\r\n    }\r\n    return ''\r\n}\r\n\r\nexport function clearCookie(name) {\r\n    const domain = (isDev) ? '' : 'domain=.aidreamer.com;'\r\n    document.cookie = name + `=;expires=Thu, 01 Jan 1970 00:00:00 GMT; ${domain}`;\r\n}","import { useState, useCallback, useEffect } from 'react'\r\nimport { setCookie, getCookie, clearCookie } from '../utils/functions'\r\n\r\nconst cookie = 'secret'\r\n\r\nexport const useAuth = () => {\r\n  const [sessionID, setSessionID] = useState('')\r\n  const [ready, setReady] = useState(false)\r\n\r\n  const login = useCallback((value) => {\r\n    if (value) {\r\n      setSessionID(value)\r\n      setCookie(cookie, value)\r\n    }\r\n  }, [])\r\n\r\n  const logout = useCallback(() => {\r\n    setSessionID('')\r\n    clearCookie(cookie)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const session = getCookie(cookie)\r\n\r\n    if (session) setSessionID(session)\r\n    else login(session)\r\n\r\n    setReady(true)\r\n  }, [login])\r\n\r\n  return { login, logout, sessionID, ready }\r\n}","/*\r\n * COMPONENT: Row\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport '../styles/Row.css'\r\n\r\nexport default (props) => {\r\n    const Children = props.children\r\n\r\n    const classes = [\r\n        'ui-row',\r\n        props.type,\r\n        props.className\r\n    ]\r\n\r\n    return (\r\n        <div className={classes.join(' ')} style={{ ...props.style }}>\r\n            {Children}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport '../styles/Container.css'\r\n\r\nexport default (props) => {\r\n    const Children = props.children\r\n    \r\n    const classes = [\r\n        'ui-container', props.type,\r\n        (props.clear) ? 'clear' : '',\r\n        (props.sticky) ? 'sticky' : ''\r\n    ]\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            {Children}\r\n        </div>\r\n    )\r\n}","/*\r\n * COMPONENT: Alert\r\n * \r\n * MISSION: Modal content with buttons. Confirmation anything\r\n * or warnings about something\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport '../styles/Alert.css'\r\n\r\nexport default ({ type, message }) => {\r\n    const classes = [\r\n        'ui-alert',\r\n        type\r\n    ]\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            {message}\r\n        </div>\r\n    )\r\n}","/*\r\n * COMPONENT: Skeleton\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport Skeleton from 'react-skeleton-loader'\r\nimport '../styles/Skeleton.css'\r\n\r\nexport default ({ component, options }) => {\r\n    const classes = [\r\n        'ui-skeleton',\r\n        component\r\n    ]\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            <Skeleton {...options} />\r\n        </div>\r\n    )\r\n}","/*\r\n * COMPONENT: Button\r\n * \r\n * MISSION: Rendering Image with given properties\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport Ripples from 'react-ripples'\r\nimport { Link } from 'react-router-dom'\r\nimport '../styles/Button.css'\r\n\r\nconst Button = ({ type, child, classes, disabled, path, handler }) => {\r\n    const handlerClick = async (e) => {\r\n        e.preventDefault()\r\n        await handler(e)\r\n    }\r\n\r\n    if (type === 'link') {\r\n        return (\r\n            <Link\r\n                to={path}\r\n                className={classes.join(' ')}\r\n                disabled={disabled}\r\n                onClick={(handler) && handlerClick}\r\n            >\r\n\r\n            </Link>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <button\r\n            type={type}\r\n            className={classes.join(' ')}\r\n            disabled={disabled}\r\n            onClick={(handler) && handlerClick}\r\n        >\r\n            {child}\r\n        </button>\r\n    )\r\n}\r\n\r\nconst Ripple = ({ type, child, classes, disabled, path, handler }) => {\r\n    if (handler)\r\n        return (\r\n            <Ripples color=\"#afbdc4\" during={1000}>\r\n                <Button\r\n                    type={type}\r\n                    path={path}\r\n                    child={child}\r\n                    classes={classes}\r\n                    disabled={disabled}\r\n                    handler={handler}\r\n                />\r\n            </Ripples>\r\n        )\r\n\r\n    return (\r\n        <Ripples color=\"#afbdc4\" during={1000}>\r\n            <Button\r\n                type={type}\r\n                path={path}\r\n                child={child}\r\n                classes={classes}\r\n                disabled={disabled}\r\n            />\r\n        </Ripples>\r\n    )\r\n}\r\n\r\nexport default (props) => {\r\n    const Children = props.children\r\n\r\n    const {\r\n        type, state,\r\n        classNames, disabled,\r\n        handler, path\r\n    } = props.options || {}\r\n\r\n    const classes = [\r\n        'ui-button',\r\n        classNames,\r\n        state\r\n    ]\r\n\r\n    const options = {\r\n        type, path,\r\n        child: Children,\r\n        disabled\r\n    }\r\n\r\n    return (\r\n        <Ripple\r\n            {...options}\r\n            classes={classes}\r\n            handler={handler}\r\n        />\r\n    )\r\n}","/*\r\n * COMPONENT: Entry\r\n * \r\n * MISSION: Space between components\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport '../styles/Divider.css'\r\n\r\nexport default ({ distance, horizontal }) => {\r\n    const classes = [\r\n        'ui-divider'\r\n    ]\r\n\r\n    const d = Math.round((distance) / 2)\r\n\r\n    return (\r\n        <div\r\n            className={classes.join(' ')}\r\n            style={{ margin: (horizontal) ? `${d}px 0` : `0 ${d}px` }}\r\n        />\r\n    )\r\n}","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport Button from './Button'\r\nimport Divider from './Divider'\r\nimport '../styles/Navigation.css'\r\n\r\nconst Block = ({ children }) =>\r\n    <div className=\"block\">{children}</div>\r\n\r\nexport default ({ options }) => {\r\n    const {\r\n        links,\r\n        buttons,\r\n        dashboard,\r\n        axis\r\n    } = options\r\n\r\n    const classes = [\r\n        'ui-navigation',\r\n        (dashboard) ? 'dashboard' : '',\r\n        axis\r\n    ]\r\n\r\n    const renderLinks = () => {\r\n        return links.map((group, key) => (\r\n            <React.Fragment key={key}>\r\n                <p className=\"title\">{group.title}</p>\r\n                <div className=\"links\">\r\n                    {group.links.map((link, index) =>\r\n                        <NavLink\r\n                            exact\r\n                            key={index}\r\n                            to={link.path}\r\n                            className={link.type}\r\n                            onClick={link.handler}\r\n                        >\r\n                            {link.component}\r\n                        </NavLink>\r\n                    )}\r\n                </div>\r\n            </React.Fragment>\r\n        ))\r\n    }\r\n\r\n    const renderButtons = () => {\r\n        return buttons.map((button, key) =>\r\n            <Button key={key} options={button.options}>\r\n                {button.component}\r\n            </Button>)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            <Block>{renderLinks()}</Block>\r\n            <Block>\r\n                <Divider />\r\n                {renderButtons()}\r\n            </Block>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport '../styles/Transition.css'\r\n\r\nexport default (props) => {\r\n    const Children = props.children\r\n    const showContent = props.showContent\r\n    const animation = props.animation || 'default'\r\n    const duration = props.duration || 100\r\n    const unmountOnExit = props.unmountOnExit || true\r\n    const handlerEnter = props.handlerEnter || null\r\n    const handlerExited = props.handlerExited || null\r\n\r\n    return (\r\n        <CSSTransition\r\n            in={showContent}\r\n            timeout={duration}\r\n            classNames={animation}\r\n            onEnter={handlerEnter}\r\n            onExited={handlerExited}\r\n            unmountOnExit={unmountOnExit}\r\n        >\r\n            {Children}\r\n        </CSSTransition>\r\n    )\r\n}","/*\r\n * COMPONENT: Modal\r\n * \r\n * MISSION: Dynamic Modal with feture navigation\r\n * by pages and unlimited depths. Given Modal\r\n * haven't to need in 'react-router' or 'react-router-dom.\r\n * This custom Switch, Route and Link for scalable and\r\n * dynamical app\r\n *\r\n**/\r\n\r\nimport React, { useState } from 'react'\r\nimport PreventOutsideScroll from 'react-prevent-outside-scroll'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\r\nimport '../styles/Modal.css'\r\nimport Transition from './Transition'\r\nimport Button from './Button'\r\n\r\nconst DURATION = 100\r\n\r\nfunction getPath(navigator) {\r\n    if (!navigator || navigator.length === 0)\r\n        return null\r\n\r\n    return navigator[navigator.length - 1]\r\n}\r\n\r\nconst Switch = (props) => {\r\n    const Childrens = props.children\r\n    if (!Childrens) return null\r\n    \r\n    const path = props.path\r\n\r\n    let Child = null\r\n    for (const child of Childrens) {\r\n        if (path === child.props.path) {\r\n            Child = child\r\n            break\r\n        }\r\n    }\r\n    return Child\r\n}\r\n\r\nconst Route = ({ component, close, back, jump }) => {\r\n    const Compoent = component\r\n    return <Compoent\r\n        close={close}\r\n        back={back}\r\n        jump={jump}\r\n    />\r\n}\r\n\r\nexport default ({ options }) => {\r\n    const [navigator, setNavigator] = useState(['/'])\r\n    const [content, setContent] = useState(false)\r\n    const [animation, setAnimation] = useState(null)\r\n\r\n    const {\r\n        type,\r\n        title,\r\n        home,\r\n        routes,\r\n        center,\r\n        hideModal=() => {},\r\n        closeByBackground=true\r\n    } = options\r\n\r\n    const classes = [\r\n        'ui-modal',\r\n        (center) ? 'center' : '',\r\n        type\r\n    ]\r\n\r\n    const transitions = {\r\n        fade: {\r\n            showContent: (routes) ? true : false,\r\n            animation: 'fade',\r\n            handlerEnter: () => setContent(true),\r\n            handlerExit: () => setContent(false),\r\n            duration: DURATION\r\n        },\r\n        swing: {\r\n            showContent: (content),\r\n            animation: 'swing',\r\n            duration: DURATION\r\n        }\r\n    }\r\n\r\n    const getTitle = () => {\r\n        function compare(route) {\r\n            return (route.path === getPath(navigator))\r\n        }\r\n\r\n        const title = routes?.find(route => compare(route))?.title\r\n\r\n        return title || 'Default Title'\r\n    }\r\n\r\n    const handlerBack = () => {\r\n        setAnimation('slideOutRight')\r\n        setTimeout(() => {\r\n            setNavigator([\r\n                ...navigator.filter((e, i) => (i !== (navigator.length - 1)))\r\n            ])\r\n            setAnimation('slideInLeft')\r\n        }, DURATION)\r\n    }\r\n    const handlerJump = (path) => {\r\n        setAnimation('slideOutLeft')\r\n        setTimeout(() => {\r\n            setNavigator([\r\n                ...navigator,\r\n                path\r\n            ])\r\n            setAnimation('slideInRight')\r\n        }, DURATION)\r\n    }\r\n    const handlerClose = () => {\r\n        setContent(false)\r\n        setAnimation(null)\r\n        \r\n        setTimeout(() => {\r\n            setNavigator(['/'])\r\n            hideModal()\r\n        }, DURATION)\r\n    }\r\n\r\n    return (\r\n        <Transition {...transitions.fade}>\r\n            <PreventOutsideScroll>\r\n                <div className={classes.join(' ')}>\r\n                    <div\r\n                        className={`background${(!closeByBackground) ? ' clear' : ''}`}\r\n                        onClick={(closeByBackground) ? handlerClose : () => {}}\r\n                    ></div>\r\n\r\n                    <Transition {...transitions.swing}>\r\n                        <div id='scroller' className={`wrapper animate${(animation) ? ` ${animation}` : ''}`}>\r\n                            <div className=\"headline\">\r\n                                {(navigator.length > 1) && <Button options={{\r\n                                    state: 'icon',\r\n                                    lockdown: true,\r\n                                    handler: () => handlerBack()\r\n                                }}>\r\n                                    <FontAwesomeIcon icon={faArrowLeft} />\r\n                                </Button>}\r\n                                <h1>{(title && !routes) ? title : getTitle()}</h1>\r\n                            </div>\r\n\r\n                            {(home && !routes) ? home\r\n                            : <Switch path={getPath(navigator)}>\r\n                                {routes?.map((props, key) =>\r\n                                    <Route key={key} {...props} close={handlerClose} back={handlerBack} jump={handlerJump} />\r\n                                )}\r\n                            </Switch>}\r\n                        </div>\r\n                    </Transition>\r\n                </div>\r\n            </PreventOutsideScroll>\r\n        </Transition>\r\n    )\r\n}","/*\r\n * COMPONENT: Message\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\n\r\nimport '../styles/Message.css'\r\n\r\nexport default ({ text, padding }) => {\r\n    return (\r\n        <p\r\n            className=\"ui-message\"\r\n            style={{ padding: (padding) ? 15 : 0 }}\r\n        >{text || 'Undefined'}</p>\r\n    )\r\n}","import React from 'react'\r\nimport Container from '../ui/Container'\r\nimport Message from '../ui/Message'\r\n\r\nexport default () => {\r\n    return (\r\n        <Container>\r\n            <Message text=\"No Content\" padding />\r\n        </Container>\r\n    )\r\n}","import React from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport Skeleton from './Skeleton'\r\nimport Message from './Message'\r\nimport Row from './Row'\r\n\r\nexport default (props) => {\r\n    const { data, loading, error, refetch } = useQuery(\r\n        props.query,\r\n        { variables: props.variables }\r\n    )\r\n\r\n    const Children = props.children\r\n    const pseudo = props.pseudo\r\n\r\n    const options = {\r\n        height: `${pseudo?.height || 256}px`,\r\n        widthRandomness: 0,\r\n        heightRandomness: 0\r\n    }\r\n\r\n    const renderSkeleton = () => {\r\n        const skeletons = []\r\n\r\n        for (let i = 0; i < (pseudo?.count || 1); i++) {\r\n            skeletons.push(<Skeleton key={i} options={options} />)\r\n        }\r\n\r\n        return skeletons.map(skeleton => skeleton)\r\n    }\r\n\r\n    if (loading || !data) return (\r\n        <Row type=\"flex loader\" style={{ gridColumn: '1 / 5' }}>\r\n            {renderSkeleton()}\r\n        </Row>\r\n    )\r\n    if (error) return <Message text={error} padding />\r\n\r\n    return (\r\n        <Children data={data} refetch={refetch} />\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport { useSubscription } from '@apollo/react-hooks'\r\n\r\nexport default (props) => {\r\n    const { data } = useSubscription(\r\n        props.query,\r\n        { variables: props.variables }\r\n    )\r\n\r\n    const Children = props.children\r\n\r\n    useEffect(() => {\r\n        if (props.refetch) props.refetch()\r\n    }, [data, props])\r\n\r\n    return <Children subData={data} />\r\n}","/*\r\n * COMPONENT: List\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport '../styles/List.css'\r\n\r\nexport default (props) => {\r\n    const Children = props.children\r\n\r\n    const {\r\n        list,\r\n        type,\r\n        state={},\r\n        handler,\r\n        handlerItem,\r\n    } = props.options || {}\r\n\r\n    const classes = [\r\n        'ui-list', type,\r\n        (handler) ? ' clickable' : ''\r\n    ]\r\n\r\n    return (\r\n        <div\r\n            className={classes.join(' ')}\r\n            onClick={() => (handler) && handler()}\r\n        >\r\n            {list.map((item, key) => (\r\n                <div\r\n                    key={key}\r\n                    className={`ui-item${(state.id === item.id) ? ' checked' : ''}`}\r\n                    onClick={() => (handlerItem) ? handlerItem(item) : null}\r\n                >\r\n                    <Children item={item} />\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}","const isDev = process.env.NODE_ENV === 'development'\r\n\r\nexport const config = {\r\n    proxy: {\r\n        api: (isDev) ? 'http://localhost:8000' : 'http://api.aidreamer.com',\r\n        apiWs: (isDev) ? 'ws://localhost:8000' : 'ws://api.aidreamer.com'\r\n    },\r\n    get: (key) => {\r\n        return config.proxy[key]\r\n    }\r\n}","/*\r\n * COMPONENT: Avatar\r\n * \r\n * MISSION: Rendering Image with given properties\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport '../styles/Avatar.css'\r\nimport { config } from '../../utils/config'\r\n\r\nconst api = config.get('api')\r\n\r\nexport default ({ avatar, properties=[] }) => {\r\n    const classes = [\r\n        'ui-avatar',\r\n        ...properties\r\n    ]\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            <img src={(avatar?.path || '').replace('./', `${api}/`)} alt=\"Avatar\" />\r\n        </div>\r\n    )\r\n}","import gql from 'graphql-tag'\r\n\r\n// BEGIN USER\r\nexport const LOGIN = gql`\r\n    mutation login(\r\n        $name: String!\r\n        $password: String!\r\n        $area: String\r\n    ) {\r\n        login(\r\n            name: $name\r\n            password: $password\r\n            area: $area\r\n        ) {\r\n            id\r\n            name\r\n            email\r\n            phone\r\n            role {\r\n                name\r\n            }\r\n            balance\r\n            level\r\n            experience\r\n            avatar {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            availableAvatars {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            preferences {\r\n                id\r\n                title\r\n                color\r\n                slogan\r\n                icon {\r\n                    name\r\n                    path\r\n                }\r\n            }\r\n            sessionID\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const REGISTER = gql`\r\n    mutation register(\r\n        $name: String!\r\n        $email: String!\r\n        $password: String!\r\n        $confirmPassword: String!\r\n        $phone: String\r\n        $role: ID\r\n        $avatar: ID\r\n    ) {\r\n        register(\r\n            registerInput: {\r\n                name: $name\r\n                email: $email\r\n                password: $password\r\n                confirmPassword: $confirmPassword\r\n                phone: $phone\r\n                role: $role\r\n                avatar: $avatar\r\n            }\r\n        ) {\r\n            name\r\n            email\r\n            phone\r\n            role {\r\n                name\r\n            }\r\n            balance\r\n            level\r\n            experience\r\n            avatar {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            availableAvatars {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            preferences {\r\n                id\r\n                title\r\n                color\r\n                slogan\r\n                icon {\r\n                    name\r\n                    path\r\n                }\r\n            }\r\n            sessionID\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const GET_ALL_USERS = gql`\r\n    query allUsers {\r\n        allUsers {\r\n            name\r\n            email\r\n            phone\r\n            role {\r\n                name\r\n            }\r\n            balance\r\n            level\r\n            experience\r\n            avatar {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            availableAvatars {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            preferences {\r\n                id\r\n                title\r\n                color\r\n                slogan\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_USERS = gql`\r\n    subscription users {\r\n        users {\r\n            name\r\n            email\r\n            phone\r\n            role {\r\n                name\r\n            }\r\n            balance\r\n            level\r\n            experience\r\n            avatar {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            availableAvatars {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            preferences {\r\n                id\r\n                title\r\n                color\r\n                slogan\r\n                icon {\r\n                    name\r\n                    path\r\n                }\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const GET_USER = gql`\r\n    query getUser {\r\n        getUser {\r\n            name\r\n            password\r\n            email\r\n            phone\r\n            role {\r\n                name\r\n            }\r\n            balance\r\n            level\r\n            experience\r\n            avatar {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            availableAvatars {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            preferences {\r\n                id\r\n                title\r\n                color\r\n                slogan\r\n                icon {\r\n                    name\r\n                    path\r\n                }\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const EDIT_USER = gql`\r\n    mutation editUser(\r\n        $name: String\r\n        $email: String\r\n        $password: String\r\n        $phone: String\r\n        $role: ID\r\n        $balance: Int\r\n        $level: Int\r\n        $avatar: ID\r\n        $availableAvatars: [ID]\r\n        $experience: Int\r\n        $preferences: [ID]\r\n        $settings: [Setting]\r\n    ) {\r\n        editUser(\r\n            name: $name\r\n            email: $email\r\n            password: $password\r\n            phone: $phone\r\n            role: $role\r\n            balance: $balance\r\n            level: $level\r\n            avatar: $avatar\r\n            availableAvatars: $availableAvatars\r\n            experience: $experience\r\n            preferences: $preferences\r\n            settings: $settings\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_USERS = gql`\r\n    mutation deleteUsers(\r\n        $names: [String]\r\n    ) {\r\n        deleteUsers(names: $names)\r\n    }\r\n`\r\n\r\n// BEGIN STATS\r\nexport const GET_STATS = gql`\r\n    query allStats {\r\n        countUsers\r\n        countOffers\r\n        countArticles\r\n        countComments\r\n        countHubs\r\n    }\r\n`\r\n\r\nexport const GET_ALL_RARITIES = gql`\r\n    query allRarities {\r\n        allRarities\r\n    }\r\n`\r\n\r\nexport const GET_ALL_STATUS = gql`\r\n    query allStatus {\r\n        allStatus\r\n    }\r\n`\r\n// END STATS\r\n\r\n// BEGIN CHAT\r\nexport const GET_ALL_CHAT_TYPES = gql`\r\n    query allChatTypes {\r\n        allChatTypes\r\n    }\r\n`\r\n\r\nexport const ADD_CHAT = gql`\r\n    mutation addChat(\r\n        $type: ChatType!\r\n        $title: String!\r\n        $members: [String]!\r\n    ) {\r\n        addChat (\r\n            type: $type\r\n            title: $title\r\n            members: $members\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_CHAT = gql`\r\n    mutation editChat(\r\n        $id: ID!\r\n        $type: ChatType\r\n        $title: String\r\n        $members: [String]\r\n    ) {\r\n        editChat (\r\n            id: $id\r\n            type: $type\r\n            title: $title\r\n            members: $members\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_CHATS = gql`\r\n    mutation deleteChats(\r\n        $id: [ID]!\r\n    ) {\r\n        deleteChats (\r\n            id: $id\r\n        )\r\n    }\r\n`\r\n\r\nexport const GET_ALL_CHATS = gql`\r\n    query allChats {\r\n        allChats {\r\n            id\r\n            type\r\n            title\r\n            members {\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            messages {\r\n                user {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                text\r\n                type\r\n                updatedAt\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_CHATS = gql`\r\n    subscription chats {\r\n        chats {\r\n            id\r\n            type\r\n            title\r\n            members {\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            messages {\r\n                user {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                text\r\n                type\r\n                updatedAt\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_USER_CHATS = gql`\r\n    mutation deleteUserChats(\r\n        $id: [ID]!\r\n    ) {\r\n        deleteUserChats(\r\n            id: $id\r\n        )\r\n    }\r\n`\r\n\r\nexport const GET_USER_CHATS = gql`\r\n    query allUserChats {\r\n        allUserChats {\r\n            id\r\n            chat {\r\n                id\r\n                type\r\n                title\r\n                members {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                messages {\r\n                    user {\r\n                        name\r\n                        avatar {\r\n                            path\r\n                        }\r\n                    }\r\n                    text\r\n                    type\r\n                    updatedAt\r\n                    createdAt\r\n                }\r\n            }\r\n            interlocutor {\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const GET_CHAT_MESSAGES = gql`\r\n    query allChatMessages(\r\n        $id: ID!\r\n    ) {\r\n        allChatMessages(\r\n            id: $id\r\n        ) {\r\n            user {\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            text\r\n            type\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_USER_CHATS = gql`\r\n    subscription userChats(\r\n        $name: String!\r\n    ) {\r\n        userChats(\r\n            name: $name\r\n        ) {\r\n            id\r\n            chat {\r\n                id\r\n                type\r\n                title\r\n                members {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                messages {\r\n                    user {\r\n                        name\r\n                        avatar {\r\n                            path\r\n                        }\r\n                    }\r\n                    text\r\n                    type\r\n                    updatedAt\r\n                    createdAt\r\n                }\r\n            }\r\n            interlocutor {\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_MESSAGES = gql`\r\n    subscription messages(\r\n        $id: ID\r\n    ) {\r\n        messages(\r\n            id: $id\r\n        ) {\r\n            user {\r\n                name\r\n            }\r\n            text\r\n            type\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const OPEN_USER_CHAT = gql`\r\n    mutation openUserChat(\r\n        $name: String!\r\n        $type: ChatType!\r\n    ) {\r\n        openUserChat(\r\n            name: $name\r\n        ) {\r\n            id\r\n            chat {\r\n                id\r\n                title\r\n                members {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                messages {\r\n                    user {\r\n                        name\r\n                        avatar {\r\n                            path\r\n                        }\r\n                    }\r\n                    text\r\n                    type\r\n                    updatedAt\r\n                    createdAt\r\n                }\r\n            }\r\n            interlocutor {\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_USER_CHAT_MESSAGE = gql`\r\n    mutation addUserChatMessage(\r\n        $id: ID!\r\n        $text: String!\r\n    ) {\r\n        addUserChatMessage(\r\n            id: $id\r\n            text: $text\r\n        )\r\n    }\r\n`\r\n// END CHAT\r\n\r\nexport const SUB_NOTIFICATIONS = gql`\r\n    subscription notifications {\r\n        notifications {\r\n            id\r\n            text\r\n            user {\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const GET_USER_NOTIFICATIONS = gql`\r\n    query allUserNotifications {\r\n        allUserNotifications {\r\n            id\r\n            text\r\n            user {\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n// END USER\r\n\r\n// BEGIN HUB\r\nexport const GET_ALL_HUBS = gql`\r\n    query allHubs($status: Status) {\r\n        allHubs(status: $status) {\r\n            id\r\n            title\r\n            description\r\n            slogan\r\n            icon {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            color\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_HUBS = gql`\r\n    subscription hubs(\r\n        $status: Status\r\n    ) {\r\n        hubs(\r\n            status: $status\r\n        ) {\r\n            id\r\n            title\r\n            description\r\n            slogan\r\n            icon {\r\n                path\r\n            }\r\n            color\r\n            countUsers\r\n            countOffers\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_HUB = gql`\r\n    mutation addHub(\r\n        $title: String!\r\n        $description: String!\r\n        $slogan: String!\r\n        $color: String\r\n        $icon: ID\r\n        $status: Status!\r\n    ) {\r\n        addHub(\r\n            title: $title\r\n            description: $description\r\n            slogan: $slogan\r\n            color: $color\r\n            icon: $icon\r\n            status: $status\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_HUB = gql`\r\n    mutation editHub(\r\n        $id: ID!\r\n        $title: String\r\n        $description: String\r\n        $slogan: String\r\n        $color: String\r\n        $icon: ID\r\n        $status: Status\r\n    ) {\r\n        editHub(\r\n            id: $id\r\n            title: $title\r\n            description: $description\r\n            slogan: $slogan\r\n            color: $color\r\n            icon: $icon\r\n            status: $status\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_HUBS = gql`\r\n    mutation deleteHubs(\r\n        $id: [ID]\r\n    ) {\r\n        deleteHubs(id: $id)\r\n    }\r\n`\r\n// END HUB\r\n\r\n// BEGIN ARTICLE\r\nexport const GET_USER_ARTICLES = gql`\r\n    query allUserArticles {\r\n        allUserArticles {\r\n            id\r\n            title\r\n            description\r\n            body\r\n            views\r\n            image {\r\n                path\r\n            }\r\n            comments {\r\n                id\r\n                user {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                text\r\n                updatedAt\r\n                createdAt\r\n            }\r\n            hub {\r\n                id\r\n                title\r\n                color\r\n            }\r\n            author {\r\n                id\r\n                name\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const GET_ALL_ARTICLES = gql`\r\n    query allArticles($status: Status) {\r\n        allArticles(status: $status) {\r\n            id\r\n            title\r\n            description\r\n            body\r\n            views\r\n            image {\r\n                path\r\n            }\r\n            comments {\r\n                id\r\n                user {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                text\r\n                updatedAt\r\n                createdAt\r\n            }\r\n            hub {\r\n                id\r\n                title\r\n                color\r\n            }\r\n            author {\r\n                id\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_USER_ARTICLES = gql`\r\n    subscription userArticles(\r\n        $name: String!\r\n    ) {\r\n        userArticles(\r\n            name: $name\r\n        ) {\r\n            id\r\n            title\r\n            description\r\n            body\r\n            views\r\n            image {\r\n                path\r\n            }\r\n            comments {\r\n                id\r\n                user {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                text\r\n                updatedAt\r\n                createdAt\r\n            }\r\n            hub {\r\n                id\r\n                title\r\n                color\r\n            }\r\n            author {\r\n                id\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_ARTICLES = gql`\r\n    subscription articles(\r\n        $status: Status\r\n    ) {\r\n        articles(\r\n            status: $status\r\n        ) {\r\n            id\r\n            title\r\n            description\r\n            body\r\n            views\r\n            image {\r\n                path\r\n            }\r\n            comments {\r\n                id\r\n                user {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                text\r\n                updatedAt\r\n                createdAt\r\n            }\r\n            hub {\r\n                id\r\n                title\r\n                color\r\n            }\r\n            author {\r\n                id\r\n                name\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const GET_ARTICLE = gql`\r\n    query getArticle($id: ID!) {\r\n        getArticle(id: $id) {\r\n            id\r\n            title\r\n            description\r\n            body\r\n            image {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            comments {\r\n                id\r\n                user {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                text\r\n                updatedAt\r\n                createdAt\r\n            }\r\n            hub {\r\n                id\r\n                title\r\n                color\r\n            }\r\n            source\r\n            url\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_ARTICLE = gql`\r\n    mutation addArticle(\r\n        $author: String!\r\n        $title: String!\r\n        $description: String!\r\n        $body: String!\r\n        $hub: ID!\r\n        $image: Upload\r\n        $status: Status!\r\n    ) {\r\n        addArticle(\r\n            author: $author\r\n            title: $title\r\n            description: $description\r\n            body: $body\r\n            hub: $hub\r\n            image: $image\r\n            status: $status\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_ARTICLE = gql`\r\n    mutation editArticle(\r\n        $id: ID!\r\n        $title: String\r\n        $description: String\r\n        $body: String\r\n        $hub: ID\r\n        $image: Upload\r\n        $status: Status\r\n    ) {\r\n        editArticle(\r\n            id: $id\r\n            title: $title\r\n            description: $description\r\n            body: $body\r\n            hub: $hub\r\n            image: $image\r\n            status: $status\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_ARTICLES = gql`\r\n    mutation deleteArticles(\r\n        $articles: [InputArticle]\r\n    ) {\r\n        deleteArticles(articles: $articles)\r\n    }\r\n`\r\n\r\nexport const ADD_COMMENT = gql`\r\n    mutation addComment(\r\n        $article: ID!\r\n        $text: String!\r\n    ) {\r\n        addComment(\r\n            article: $article\r\n            text: $text\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_COMMENT = gql`\r\n    mutation editComment(\r\n        $id: ID!\r\n        $article: ID\r\n        $user: ID\r\n        $text: String\r\n    ) {\r\n        editComment(\r\n            id: $id\r\n            article: $article\r\n            user: $user\r\n            text: $text\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELTE_COMMENTS = gql`\r\n    mutation deleteComments(\r\n        $id: [ID]!\r\n        $article: ID!\r\n    ) {\r\n        deleteComments(\r\n            id: $id\r\n            article: $article\r\n        )\r\n    }\r\n`\r\n// END ARTICLE\r\n\r\n// BEGIN OFFER\r\nexport const GET_USER_OFFERS = gql`\r\n    query allUserOffers {\r\n        allUserOffers {\r\n            id\r\n            title\r\n            message\r\n            user {\r\n                id\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            hub {\r\n                id\r\n                title\r\n                color\r\n            }\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_USER_OFFERS = gql`\r\n    subscription userOffers(\r\n        $name: String!\r\n    ) {\r\n        userOffers(\r\n            name: $name\r\n        ) {\r\n            id\r\n            title\r\n            message\r\n            user {\r\n                id\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            hub {\r\n                id\r\n                title\r\n                color\r\n            }\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const GET_ALL_OFFERS = gql`\r\n    query allOffers($status: Status) {\r\n        allOffers(status: $status) {\r\n            id\r\n            title\r\n            message\r\n            user {\r\n                id\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            hub {\r\n                id\r\n                title\r\n                color\r\n            }\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_OFFERS = gql`\r\n    subscription offers(\r\n        $status: Status\r\n    ) {\r\n        offers(\r\n            status: $status\r\n        ) {\r\n            id\r\n            title\r\n            message\r\n            user {\r\n                id\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            hub {\r\n                id\r\n                title\r\n                color\r\n            }\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_OFFER = gql`\r\n    mutation addOffer(\r\n        $hub: ID!\r\n        $title: String!\r\n        $message: String!\r\n        $status: Status!\r\n    ) {\r\n        addOffer(\r\n            hub: $hub\r\n            title: $title\r\n            message: $message\r\n            status: $status\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_OFFER = gql`\r\n    mutation editOffer(\r\n        $id: ID!\r\n        $hub: ID\r\n        $title: String\r\n        $message: String\r\n        $status: Status\r\n    ) {\r\n        editOffer(\r\n            id: $id\r\n            hub: $hub\r\n            title: $title\r\n            message: $message\r\n            status: $status\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_OFFERS = gql`\r\n    mutation deleteOffers(\r\n        $offers: [InputOffer]\r\n    ) {\r\n        deleteOffers(offers: $offers)\r\n    }\r\n`\r\n// END HUB\r\n\r\n// BEGIN ROLE\r\nexport const GET_ALL_ROLES = gql`\r\n    query allRoles {\r\n        allRoles {\r\n            id\r\n            name\r\n            permissions\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_ROLE = gql`\r\n    mutation addRole(\r\n        $name: String!\r\n        $permissions: [Permission!]!\r\n    ) {\r\n        addRole(\r\n            name: $name\r\n            permissions: $permissions\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_ROLE = gql`\r\n    mutation editRole(\r\n        $id: ID!\r\n        $name: String!\r\n        $permissions: [Permission]\r\n    ) {\r\n        editRole(\r\n            id: $id\r\n            name: $name\r\n            permissions: $permissions\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_ROLES = gql`\r\n    mutation deleteRoles($id: [ID]!) {\r\n        deleteRoles(id: $id)\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_ROLES = gql`\r\n    subscription roles {\r\n        roles {\r\n            id\r\n            name\r\n            permissions\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n// END ROLE\r\n\r\n// BEGIN PERMITIONS\r\nexport const GET_ALL_PERMITIONS = gql`\r\n    query allPermissions {\r\n        allPermissions\r\n    }\r\n`\r\n// END PERMITIONS\r\n\r\n// BEGIN IMAGES\r\nexport const GET_ALL_IMAGES = gql`\r\n    query allImages {\r\n        allImages {\r\n            id\r\n            path\r\n            name\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_IMAGES = gql`\r\n    subscription images {\r\n        images {\r\n            id\r\n            name\r\n            path\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_IMAGE = gql`\r\n    mutation addImage(\r\n        $file: Upload!\r\n    ) {\r\n        addImage(\r\n            file: $file\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_IMAGE = gql`\r\n    mutation editImage(\r\n        $id: ID!\r\n        $file: Upload\r\n    ) {\r\n        editImage(\r\n            id: $id\r\n            file: $file\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_IMAGES = gql`\r\n    mutation deleteImages(\r\n        $id: [ID]!\r\n    ) {\r\n        deleteImages(\r\n            id: $id\r\n        )\r\n    }\r\n`\r\n// END IMAGES\r\n\r\n// BEGIN AVATARS\r\nexport const GET_ALL_AVATARS = gql`\r\n    query allAvatars {\r\n        allAvatars {\r\n            id\r\n            path\r\n            name\r\n            rarity\r\n            hub {\r\n                id\r\n                title\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_AVATARS = gql`\r\n    subscription avatars {\r\n        avatars {\r\n            id\r\n            path\r\n            name\r\n            rarity\r\n            hub {\r\n                id\r\n                title\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_AVATAR = gql`\r\n    mutation addAvatar(\r\n        $file: Upload!\r\n        $rarity: Rarity!\r\n        $hub: ID!\r\n    ) {\r\n        addAvatar(\r\n            file: $file\r\n            rarity: $rarity\r\n            hub: $hub\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_AVATAR = gql`\r\n    mutation editAvatar(\r\n        $id: ID!\r\n        $file: Upload\r\n        $rarity: Rarity\r\n        $hub: ID\r\n    ) {\r\n        editAvatar(\r\n            id: $id\r\n            file: $file\r\n            rarity: $rarity\r\n            hub: $hub\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_AVATARS = gql`\r\n    mutation deleteAvatars(\r\n        $id: [ID]!\r\n    ) {\r\n        deleteAvatars(\r\n            id: $id\r\n        )\r\n    }\r\n`\r\n// END AVATARS\r\n\r\n// BEGIN ICONS\r\nexport const GET_ALL_ICONS = gql`\r\n    query allIcons {\r\n        allIcons {\r\n            id\r\n            path\r\n            name\r\n            hub {\r\n                id\r\n                title\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_ICONS = gql`\r\n    subscription icons {\r\n        icons {\r\n            id\r\n            path\r\n            name\r\n            hub {\r\n                id\r\n                title\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_ICON = gql`\r\n    mutation addIcon(\r\n        $file: Upload!\r\n        $hub: ID!\r\n    ) {\r\n        addIcon(\r\n            file: $file\r\n            hub: $hub\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_ICON = gql`\r\n    mutation editIcon(\r\n        $id: ID!\r\n        $file: Upload\r\n        $hub: ID\r\n    ) {\r\n        editIcon(\r\n            id: $id\r\n            file: $file\r\n            hub: $hub\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_ICONS = gql`\r\n    mutation deleteIcons(\r\n        $id: [ID]!\r\n    ) {\r\n        deleteIcons(\r\n            id: $id\r\n        )\r\n    }\r\n`\r\n// END ICONS\r\n\r\n// BEGIN ICONS\r\nexport const GET_ALL_FLAGS = gql`\r\n    query allFlags {\r\n        allFlags {\r\n            id\r\n            path\r\n            name\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_FLAGS = gql`\r\n    subscription flags {\r\n        flags {\r\n            id\r\n            path\r\n            name\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_FLAG = gql`\r\n    mutation addFlag(\r\n        $file: Upload!\r\n    ) {\r\n        addFlag(\r\n            file: $file\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_FLAG = gql`\r\n    mutation editFlag(\r\n        $id: ID!\r\n        $file: Upload\r\n    ) {\r\n        editFlag(\r\n            id: $id\r\n            file: $file\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_FLAGS = gql`\r\n    mutation deleteFlags(\r\n        $id: [ID]!\r\n    ) {\r\n        deleteFlags(\r\n            id: $id\r\n        )\r\n    }\r\n`\r\n// END FLAGS\r\n\r\n// BEGIN LANGUAGE\r\nexport const GET_ALL_LANGUAGES = gql`\r\n    query allLanguages {\r\n        allLanguages {\r\n            id\r\n            code\r\n            title\r\n            flag {\r\n                id\r\n                path\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_LANGUAGES = gql`\r\n    subscription languages {\r\n        languages {\r\n            id\r\n            code\r\n            title\r\n            flag {\r\n                id\r\n                path\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_LANGUAGE = gql`\r\n    mutation addLanguage(\r\n        $code: String!\r\n        $title: String!\r\n        $flag: ID!\r\n    ) {\r\n        addLanguage(\r\n            code: $code\r\n            title: $title\r\n            flag: $flag\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_LANGUAGE = gql`\r\n    mutation editLanguage(\r\n        $id: ID!\r\n        $code: String\r\n        $title: String\r\n        $flag: ID\r\n    ) {\r\n        editLanguage(\r\n            id: $id\r\n            code: $code\r\n            title: $title\r\n            flag: $flag\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_LANGUAGES = gql`\r\n    mutation deleteLanguages(\r\n        $id: [ID]!\r\n    ) {\r\n        deleteLanguages(\r\n            id: $id\r\n        )\r\n    }\r\n`\r\n// END LANGUAGE","import React from 'react'\r\nimport Moment from 'react-moment'\r\nimport Container from './../ui/Container'\r\nimport Query from './../ui/Query'\r\nimport Subscription from './../ui/Subscription'\r\nimport Message from './../ui/Message'\r\nimport List from './../ui/List'\r\nimport Avatar from '../ui/Avatar'\r\n\r\nimport {\r\n    GET_USER_NOTIFICATIONS,\r\n    SUB_NOTIFICATIONS\r\n} from '../../utils/queries'\r\n\r\nexport default () => {\r\n    return (\r\n        <Container>\r\n            <Query query={GET_USER_NOTIFICATIONS} pseudo={{ height: 45, count: 6 }}>\r\n                {({ data, refetch }) => (\r\n                    <Subscription query={SUB_NOTIFICATIONS} refetch={refetch}>\r\n                        {({ subData }) => {\r\n                            const notifications = ((subData && subData.notifications) || data.allUserNotifications)\r\n\r\n                            if (notifications.length === 0)\r\n                                return <Message text=\"Empty\" padding />\r\n\r\n                            return (\r\n                                (notifications.length > 0) ?\r\n                                <List options={{ list: notifications }}>\r\n                                    {({ item }) => (\r\n                                        <React.Fragment>\r\n                                            <Avatar avatar={{ path: item?.user?.avatar?.path }} properties={['circle']} />\r\n                                            <p className=\"name\">{item.text}</p>\r\n                                            <p className=\"date\">\r\n                                                <Moment date={new Date(new Date().setTime(item.createdAt))} format=\"h:m\" />\r\n                                            </p>\r\n                                        </React.Fragment>\r\n                                    )}\r\n                                </List> :\r\n                                <Message text=\"No Comments\" padding />\r\n                            )\r\n                        }}\r\n                    </Subscription>\r\n                )}\r\n            </Query>\r\n        </Container>\r\n    )\r\n}","/*\r\n * COMPONENT: Checkbox\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\r\nimport '../styles/Checkbox.css'\r\n\r\nexport default ({ options }) => {\r\n    const {\r\n        type,\r\n        state=[],\r\n        list=[],\r\n        handler\r\n    } = options || {}\r\n\r\n    const classes = [\r\n        'ui-checkbox',\r\n        type\r\n    ]\r\n\r\n    const handlerChecked = (item) => {\r\n        const founded = state.find(el => el.id === item.id)\r\n        handler((founded)\r\n            ? state.filter(el => el.id !== item.id)\r\n            : ([ ...state, item ])\r\n        )\r\n    }\r\n\r\n    return (\r\n        <ul className={classes.join(' ')}>\r\n            {list.map((item, key) =>\r\n                <li key={key} onClick={() => handlerChecked(item)} className={(state.find(el => el.id === item.id)) ? 'checked' : 'empty'}>\r\n                    <div className=\"checkmark\">\r\n                        <FontAwesomeIcon icon={faCheck} />\r\n                    </div>\r\n                    <p>{item.title}</p>\r\n                </li>    \r\n            )}\r\n        </ul>\r\n    )\r\n}","/*\r\n * COMPONENT: Input\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport '../styles/Input.css'\r\n\r\nexport default ({ options }) => {\r\n    const {\r\n        type='text',\r\n        value, ref, name,\r\n        defaultValue,\r\n        placeholder='Write a message...',\r\n        autoComplete=\"Default text\",\r\n        onChange=() => {},\r\n        onKeyPress=() => {}\r\n    } = options\r\n\r\n    const classes = [\r\n        'ui-input'\r\n    ]\r\n\r\n    return (\r\n        <input\r\n            ref={ref}\r\n            type={type}\r\n            name={name}\r\n            value={value}\r\n            defaultValue={defaultValue}\r\n            className={classes.join(' ')}\r\n            placeholder={placeholder}\r\n            autoComplete={autoComplete}\r\n            onChange={onChange}\r\n            onKeyPress={onKeyPress}\r\n        />\r\n    )\r\n}","/*\r\n * COMPONENT: TextArea\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport '../styles/TextArea.css'\r\n\r\nexport default ({ options }) => {\r\n    const {\r\n        ref,\r\n        type,\r\n        value,\r\n        name,\r\n        defaultValue,\r\n        placeholder='Write a message...',\r\n        onChange=() => {}, resize=false\r\n    } = options || {}\r\n\r\n    const classes = [\r\n        'ui-textarea',\r\n        type\r\n    ]\r\n\r\n    return (\r\n        <textarea\r\n            ref={ref}\r\n            name={name}\r\n            value={value}\r\n            defaultValue={defaultValue}\r\n            className={classes.join(' ')}\r\n            placeholder={placeholder}\r\n            style={{ resize: (resize) ? 'auto' : 'none' }}\r\n            onChange={onChange}\r\n        />\r\n    )\r\n}","import C from './types'\r\n\r\nexport function setUser(user) {\r\n    return {\r\n        type: C.SET_USER,\r\n        payload: {\r\n            user: (user?.name) ? user : null\r\n        }\r\n    }\r\n}\r\n\r\nexport function setForm(form) {\r\n    return {\r\n        type: C.SET_FORM,\r\n        payload: {\r\n            form\r\n        }\r\n    }\r\n}\r\n\r\nexport function setChat(chat) {\r\n    return {\r\n        type: C.SET_CHAT,\r\n        payload: {\r\n            chat\r\n        }\r\n    }\r\n}\r\n\r\nexport function setCurrentHub(hub) {\r\n    return {\r\n        type: C.SET_CURRENT_HUB,\r\n        payload: hub\r\n    }\r\n}\r\n\r\nexport function closeChat(chatId) {\r\n    return {\r\n        type: C.CLOSE_CHAT,\r\n        payload: {\r\n            chatId\r\n        }\r\n    }\r\n}\r\n\r\nexport function addMember(chatId, user) {\r\n    return {\r\n        type: C.ADD_MEMBER,\r\n        payload: {\r\n            chatId, user\r\n        }\r\n    }\r\n}\r\n\r\nexport function newMessage(userId, chatId, message) {\r\n    return {\r\n        type: C.NEW_MESSAGE,\r\n        payload: {\r\n            userId, chatId, message\r\n        }\r\n    }\r\n}\r\n\r\nexport function setDocument(document) {\r\n    return {\r\n        type: C.SET_DOCUMENT,\r\n        payload: {\r\n            document\r\n        }\r\n    }\r\n}\r\n\r\nexport function setDocuments(documents) {\r\n    return {\r\n        type: C.SET_DOCUMENTS,\r\n        payload: {\r\n            documents\r\n        }\r\n    }\r\n}\r\n\r\nexport function setDataTable(table) {\r\n    return {\r\n        type: C.SET_DATA_TABLE,\r\n        payload: {\r\n            table\r\n        }\r\n    }\r\n}","import React, { useState, useContext } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faLock,\r\n    faFlag,\r\n    faQuestion\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport { AuthContext } from '../AuthContext'\r\nimport Container from './../ui/Container'\r\nimport Row from './../ui/Row'\r\nimport Alert from './../ui/Alert'\r\nimport Query from './../ui/Query'\r\nimport Avatar from './../ui/Avatar'\r\nimport Button from './../ui/Button'\r\nimport List from './../ui/List'\r\nimport Checkbox from './../ui/Checkbox'\r\nimport Input from './../ui/Input'\r\nimport TextArea from './../ui/TextArea'\r\nimport Divider from './../ui/Divider'\r\nimport Message from './../ui/Message'\r\nimport { setUser } from '../../utils/actions'\r\nimport { EDIT_USER, GET_ALL_HUBS, GET_ALL_LANGUAGES } from '../../utils/queries'\r\n\r\nimport { config } from '../../utils/config'\r\n\r\nconst api = config.get('api')\r\n\r\nexport const SettingsEditProfileContent = ({ jump }) => {\r\n    const [action, { loading }] = useMutation(EDIT_USER)\r\n    const state = useSelector(state => state)\r\n\r\n    const [disabled, setDisabled] = useState(true)\r\n    const [avatar, setAvatar] = useState('')\r\n    const [hubs, setHubs] = useState(state.user.preferences)\r\n\r\n    const { handleSubmit, register, errors } = useForm()\r\n    const onSubmit = async (form) => {\r\n        const variables = {\r\n            name: state.user.name,\r\n            phone: form.phone\r\n        }\r\n\r\n        if (avatar) variables.avatar = avatar.id\r\n\r\n        await action({ variables })\r\n\r\n        jump('/')\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            {(errors.avatar || errors.name) && <Alert type=\"error\" message={\r\n                (errors.avatar.message) || (errors.name.message)\r\n            } />}\r\n\r\n            <p className=\"ui-title\">General</p>\r\n            <Input options={{\r\n                type: 'text',\r\n                name: 'name',\r\n                defaultValue: state.user.name || '',\r\n                disabled: true,\r\n                placeholder: 'Enter name'\r\n            }} />\r\n\r\n            <Input options={{\r\n                ref: register(),\r\n                type: 'number',\r\n                name: 'phone',\r\n                defaultValue: state.user.phone || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter phone'\r\n            }} />\r\n\r\n            <p className=\"ui-title\">Avatar</p>\r\n            <List options={{\r\n                type: 'grid',\r\n                state: avatar || state.user.avatar,\r\n                list: state.user.availableAvatars,\r\n                handlerItem: (item) => {\r\n                    setAvatar(item)\r\n                    setDisabled(false)\r\n                }\r\n            }}>\r\n                {({ item }) => (\r\n                    <img\r\n                        className=\"image\"\r\n                        src={(item.path).replace('./', `${api}/`)}\r\n                        alt=\"Hub\"\r\n                    />\r\n                )}\r\n            </List>\r\n\r\n            <p className=\"ui-title\">Preferences</p>\r\n            <Query query={GET_ALL_HUBS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    <Checkbox options={{\r\n                        type: 'grid',\r\n                        state: hubs,\r\n                        list: data.allHubs,\r\n                        handler: (items) => {\r\n                            setHubs(items)\r\n                            if (items.length > 2)\r\n                                setDisabled(false)\r\n                        }\r\n                    }} />\r\n                )}\r\n            </Query>\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow',\r\n                disabled: (disabled) || (loading)\r\n            }}>\r\n                <p>Save</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const SettingsHomeContent = ({ jump, close }) => {\r\n    const auth = useContext(AuthContext)\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <Container>\r\n            <Button options={{\r\n                state: 'inactive',\r\n                classNames: 'grow',\r\n                handler: () => jump('/edit')\r\n            }}>\r\n                <FontAwesomeIcon icon={faPen} />\r\n                <p>Edit profile</p>\r\n            </Button>\r\n            <Button options={{\r\n                state: 'inactive',\r\n                classNames: 'grow',\r\n                handler: () => jump('/privacy-and-security')\r\n            }}>\r\n                <FontAwesomeIcon icon={faLock} />\r\n                <p>Privacy and Security</p>\r\n            </Button>\r\n\r\n            <Divider />\r\n            \r\n            <Row type=\"col2\">\r\n                <Button options={{\r\n                    state: 'inactive',\r\n                    classNames: 'grow',\r\n                    handler: () => jump('/language')\r\n                }}>\r\n                    <FontAwesomeIcon icon={faFlag} />\r\n                    <p>Language</p>\r\n                </Button>\r\n                <Button options={{\r\n                    state: 'inactive',\r\n                    classNames: 'grow',\r\n                    handler: () => jump('/ask-a-question')\r\n                }}>\r\n                    <FontAwesomeIcon icon={faQuestion} />\r\n                    <p>Ask a question</p>\r\n                </Button>\r\n            </Row>\r\n\r\n            <Divider />\r\n            \r\n            <Button options={{\r\n                state: 'active clear',\r\n                classNames: 'grow',\r\n                handler: () => {\r\n                    close()\r\n                    dispatch(setUser(null))\r\n                    auth.logout()\r\n                }\r\n            }}>\r\n                <p>Log Out</p>\r\n            </Button>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport const SettingsQuestionContent = ({ back }) => {\r\n    const [disabled, setDisabled] = useState(true)\r\n\r\n    return (\r\n        <Container>\r\n            <Input options={{\r\n                type: 'text',\r\n                name: 'title',\r\n                placeholder: 'Enter topic question',\r\n                onChange: () => {\r\n                    setDisabled(false)\r\n                }\r\n            }} />\r\n            <TextArea options={{\r\n                name: 'body',\r\n                placeholder: 'Enter content question',\r\n                onChange: () => {\r\n                    setDisabled(false)\r\n                }\r\n            }} />\r\n            <Button options={{\r\n                state: 'inactive',\r\n                classNames: 'grow',\r\n                disabled, handler: () => {\r\n                    back()\r\n                }\r\n            }}>\r\n                <p>Submit</p>\r\n            </Button>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport const SettingsLanguageContent = ({ back }) => {\r\n    const [checked, setChecked] = useState({})\r\n    const [disabled, setDisabled] = useState(true)\r\n\r\n    return (\r\n        <Container>\r\n            <Divider />\r\n\r\n            <Query query={GET_ALL_LANGUAGES}>\r\n                {({ data }) => (\r\n                    (data.allLanguages.length > 0) ? <List options={{\r\n                        list: data.allLanguages,\r\n                        state: checked,\r\n                        handlerItem: (item) => {\r\n                            setChecked(item)\r\n                            setDisabled(false)\r\n                        }\r\n                    }}>\r\n                        {({ item }) => (\r\n                            <React.Fragment>\r\n                                <Avatar avatar={{ path: item.flag.path }} />\r\n                                <p className=\"name\">{item.title}</p>\r\n                            </React.Fragment>\r\n                        )}\r\n                    </List>\r\n                    : <Message text=\"No Content\" padding />\r\n                )}\r\n            </Query>\r\n\r\n            <Button options={{\r\n                state: 'inactive',\r\n                classNames: 'grow',\r\n                disabled, handler: () => {\r\n                    back()\r\n                }\r\n            }}>\r\n                <p>Apply</p>\r\n            </Button>\r\n        </Container>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default <svg width=\"45\" height=\"46\" viewBox=\"0 0 45 46\" aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"compass\" className=\"svg-inline--fa fa-compass fa-w-16 \" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\">\r\n<path d=\"M16.6846 22.3792L21.2298 27.5366L7.34159 44.3618C7.34159 44.3618 4.90063 47.4901 2.12299 45.0382C-0.654655 42.5863 2.12299 39.7962 2.12299 39.7962L5.82653 35.4842C5.82653 35.4842 4.2174 33.8194 3.13306 32.6941C2.04873 31.5688 1.02879 30.0731 1.02879 30.0731C1.02879 30.0731 -1.49632 26.6066 1.36548 24.5774C4.22728 22.5483 5.65819 25.1693 7.34162 27.0293C9.02505 28.8894 10.2876 30.0731 10.2876 30.0731L16.6846 22.3792Z\" fill=\"black\"/>\r\n<path d=\"M18.368 34.1314C18.368 34.1314 20.2198 34.8924 23.5025 34.6387C26.7851 34.3851 28.8052 33.6241 28.8052 33.6241L16.9371 19.1663C16.9371 19.1663 12.8128 13.8398 13.1494 9.27417C13.4861 4.70856 15.8429 2.6794 15.8429 2.6794C15.8429 2.6794 17.358 0.734782 20.809 0.142943C24.26 -0.448896 26.701 0.988427 26.701 0.988427C26.701 0.988427 29.3944 1.91846 30.9095 5.04675C32.4246 8.17505 31.6671 11.3879 31.4145 12.6561C31.162 13.9243 29.647 16.799 29.647 16.799L26.9611 20.7728L22.4924 15.3617C22.4924 15.3617 24.765 12.1488 25.0175 10.2888C25.2701 8.42869 24.6809 7.27442 22.9974 6.90682C21.314 6.53921 20.304 7.58321 19.9673 8.76688C19.6306 9.95056 20.1356 11.8106 20.809 12.8252C21.4824 13.8398 22.4924 15.3617 22.4924 15.3617L34.7814 30.2422L38.9899 25.1693C38.9899 25.1693 41.0942 22.971 43.5352 24.4929C45.9761 26.0148 44.6294 29.0585 44.6294 29.0585C44.6294 29.0585 41.5992 33.2859 38.7374 35.6533C35.8756 38.0206 32.5929 39.458 32.5929 39.458C32.5929 39.458 29.8153 41.2335 23.5025 41.5717C17.1896 41.9099 13.5703 39.9653 13.5703 39.9653L18.368 34.1314Z\" fill=\"black\"/>\r\n<path d=\"M34.6973 40.8107L40.5051 37.0061L42.8508 39.8928C42.8508 39.8928 45.5554 43.2626 42.6936 45.2918C39.8317 47.321 37.5355 44.3445 37.5355 44.3445L34.6973 40.8107Z\" fill=\"black\"/>\r\n</svg>\r\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { AuthContext } from './AuthContext'\r\nimport Input from './ui/Input'\r\nimport Button from './ui/Button'\r\nimport Checkbox from './ui/Checkbox'\r\nimport Alert from './ui/Alert'\r\nimport ImageLogo from '../assets/images/logo.js'\r\nimport { LOGIN } from '../utils/queries'\r\nimport { setUser } from '../utils/actions'\r\n\r\nconst Login = ({ setLoading, setError }) => {\r\n    const auth = useContext(AuthContext)\r\n    const dispatch = useDispatch()\r\n\r\n    const [ onLogin, { loading } ] = useMutation(LOGIN)\r\n\r\n    const [name, setName] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n    const [settings, setSettings] = useState([])\r\n\r\n    useEffect(() => {\r\n        setLoading(loading)\r\n    }, [loading, setLoading])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Input options={{\r\n                type: 'text',\r\n                value: name,\r\n                placeholder: 'Enter name',\r\n                onChange: (e) => {\r\n                    setName(e.target.value)\r\n                }\r\n            }} />\r\n\r\n            <Input options={{\r\n                type: 'password',\r\n                value: password,\r\n                placeholder: 'Enter password',\r\n                onChange: (e) => {\r\n                    setPassword(e.target.value)\r\n                }\r\n            }} />\r\n\r\n            <Checkbox options={{\r\n                state: settings,\r\n                list: [\r\n                    { id: 0, title: 'Remember Me' }\r\n                ],\r\n                handler: setSettings\r\n            }} />\r\n            \r\n            <Button options={{\r\n                state: 'inactive',\r\n                handler: () => {\r\n                    onLogin({\r\n                        variables: {\r\n                            name, password,\r\n                            area: 'DASHBOARD'\r\n                        }\r\n                    })\r\n                    .then(data => {\r\n                        const user = data.data.login\r\n                        auth.login(user.sessionID)\r\n                        dispatch(setUser(user))\r\n                    })\r\n                    .catch(err => {\r\n                        const msg = err.message.split(': ')[1]\r\n                        setError(msg)\r\n                    })\r\n\r\n                    setName('')\r\n                    setPassword('')\r\n                }\r\n            }}>\r\n                <p>Log In</p>\r\n            </Button>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default () => {\r\n    const [loading, setLoading] = useState('')\r\n    const [error, setError] = useState('')\r\n\r\n    const classes = [\r\n        (loading) ? 'loading' : 'form'\r\n    ]\r\n\r\n    return (\r\n        <main className=\"auth\">\r\n            {(error) && <Alert type=\"error\" message={error} />}\r\n            <form className={classes.join(' ')}>\r\n                <div className=\"logo\">\r\n                    {ImageLogo}\r\n                </div>\r\n\r\n                <Login setLoading={setLoading} setError={setError} />\r\n            </form>\r\n        </main>\r\n    )\r\n}","import React from 'react'\r\nimport '../styles/Column.css'\r\n\r\nexport default (props) => {\r\n    const Children = props.children\r\n\r\n    const classes = [\r\n        'ui-column',\r\n        (props.center) ? 'center' : ''\r\n    ]\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            {Children}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport '../styles/Headline.css'\r\n\r\nexport default (props) => {\r\n    const Children = props.children\r\n\r\n    return (\r\n        <div className=\"ui-headline\">\r\n            {Children}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { ResponsiveLine } from '@nivo/line'\r\nimport Query from './ui/Query'\r\nimport Row from './ui/Row'\r\nimport Container from './ui/Container'\r\nimport Column from './ui/Column'\r\nimport Headline from './ui/Headline'\r\nimport {\r\n    GET_STATS\r\n} from '../utils/queries'\r\n\r\nconst MyResponsiveLine = ({ data }) => (\r\n    <div className=\"graphic-line\">\r\n        <ResponsiveLine\r\n            data={data}\r\n            margin={{ top: 25, right: 25, bottom: 25, left: 25 }}\r\n            xScale={{ type: 'point' }}\r\n            yScale={{\r\n                type: 'linear',\r\n                min: 'auto',\r\n                max: 'auto',\r\n                stacked: true,\r\n                reverse: false\r\n            }}\r\n            axisTop={null}\r\n            axisRight={null}\r\n            axisBottom={null}\r\n            axisLeft={null}\r\n            colors={{ scheme: 'nivo' }}\r\n            pointSize={10}\r\n            pointColor={{ theme: 'background' }}\r\n            pointBorderWidth={2}\r\n            pointBorderColor={{ from: 'serieColor' }}\r\n            pointLabel=\"y\"\r\n            pointLabelYOffset={-12}\r\n            crosshairType=\"cross\"\r\n            motionStiffness={75}\r\n            animate={false}\r\n            useMesh={true}\r\n            legends={[]}\r\n        />\r\n    </div>\r\n)\r\n\r\nexport default () => {\r\n    const state = useSelector(state => state)\r\n\r\n    if (!state.user) return null\r\n    \r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Dash</span>\r\n                        <span>Board</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_STATS}>\r\n                    {({ data }) => (\r\n                        <React.Fragment>\r\n                            <Container type=\"clear statblocks\">\r\n                                <Row type=\"flex statblock red\">\r\n                                    <Column>\r\n                                        <p className=\"value\">{data.countUsers}</p>\r\n                                        <p className=\"legend\">users</p>\r\n                                    </Column>\r\n                                </Row>\r\n\r\n                                <Row type=\"flex statblock blue\">\r\n                                    <Column>\r\n                                        <p className=\"value\">{data.countOffers}</p>\r\n                                        <p className=\"legend\">offers</p>\r\n                                    </Column>\r\n                                </Row>\r\n\r\n                                <Row type=\"flex statblock orange\">\r\n                                    <Column>\r\n                                        <p className=\"value\">{data.countArticles}</p>\r\n                                        <p className=\"legend\">articles</p>\r\n                                    </Column>\r\n                                </Row>\r\n                            </Container>\r\n\r\n                            <MyResponsiveLine data={[\r\n                                {\r\n                                    \"id\": \"japan\",\r\n                                    \"color\": \"hsl(16, 70%, 50%)\",\r\n                                    \"data\": [\r\n                                    {\r\n                                        \"x\": \"plane\",\r\n                                        \"y\": 259\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"helicopter\",\r\n                                        \"y\": 247\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"boat\",\r\n                                        \"y\": 276\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"train\",\r\n                                        \"y\": 149\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"subway\",\r\n                                        \"y\": 48\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"bus\",\r\n                                        \"y\": 272\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"car\",\r\n                                        \"y\": 40\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"moto\",\r\n                                        \"y\": 170\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"bicycle\",\r\n                                        \"y\": 107\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"horse\",\r\n                                        \"y\": 85\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"skateboard\",\r\n                                        \"y\": 197\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"others\",\r\n                                        \"y\": 108\r\n                                    }\r\n                                    ]\r\n                                },\r\n                                {\r\n                                    \"id\": \"norway\",\r\n                                    \"color\": \"hsl(163, 70%, 50%)\",\r\n                                    \"data\": [\r\n                                    {\r\n                                        \"x\": \"plane\",\r\n                                        \"y\": 179\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"helicopter\",\r\n                                        \"y\": 287\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"boat\",\r\n                                        \"y\": 9\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"train\",\r\n                                        \"y\": 47\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"subway\",\r\n                                        \"y\": 124\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"bus\",\r\n                                        \"y\": 258\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"car\",\r\n                                        \"y\": 124\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"moto\",\r\n                                        \"y\": 188\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"bicycle\",\r\n                                        \"y\": 247\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"horse\",\r\n                                        \"y\": 104\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"skateboard\",\r\n                                        \"y\": 69\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"others\",\r\n                                        \"y\": 235\r\n                                    }\r\n                                    ]\r\n                                }\r\n                            ]} />\r\n                        </React.Fragment>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","/*\r\n * COMPONENT: Dropdown\r\n * \r\n * MISSION: ...\r\n * IMPORTANT: Parent component must be 'relative' position\r\n *\r\n**/\r\n\r\nimport React, { useRef } from 'react'\r\nimport '../styles/Dropdown.css'\r\n\r\nexport default (props) => {\r\n    const Children = props.children\r\n\r\n    const {\r\n        type, styles, dropdown\r\n    } = props.options || {}\r\n\r\n    const classes = [\r\n        'ui-dropdown',\r\n        type\r\n    ]\r\n\r\n    const dropdownRef = useRef()\r\n\r\n    if (!dropdown) return null\r\n\r\n    return (\r\n        <div\r\n            ref={dropdownRef}\r\n            className={classes.join(' ')}\r\n            style={styles}\r\n        >\r\n            {Children}\r\n        </div>\r\n    )\r\n}","/*\r\n * COMPONENT: Table\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React, { useState, useEffect } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faEye,\r\n    faCheck,\r\n    faFilter,\r\n    faArrowLeft,\r\n    faArrowRight\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Row from './Row'\r\nimport Container from './Container'\r\nimport Button from './Button'\r\nimport Search from './Search'\r\nimport Message from './Message'\r\nimport Dropdown from './Dropdown'\r\nimport Checkbox from './Checkbox'\r\nimport Radiobox from './Radiobox'\r\nimport { getPage, getMaxPage } from '../../utils/functions'\r\nimport { config } from '../../utils/config'\r\nimport '../styles/Table.css'\r\n\r\nconst api = config.get('api')\r\n\r\nconst limitDefault = 10\r\nconst limitList = [5, 10, 15, 20, 30, 40, 50]\r\n\r\nconst Manage = ({ table, actions, dishands }) => {\r\n    return (\r\n        <div className=\"manage\">\r\n            {actions.map((Action, key) =>\r\n                <Action\r\n                    key={key}\r\n                    table={table}\r\n                    dishands={dishands}\r\n                />    \r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Table = ({\r\n    max,\r\n    name,\r\n    gridable,\r\n    empty=\"Данные отсутсвуют\",\r\n\r\n    page,\r\n    setPage,\r\n\r\n    table,\r\n    setTable,\r\n\r\n    limits,\r\n    setLimits,\r\n\r\n    headers,\r\n    setHeaders\r\n}) => {\r\n    return (\r\n        <div className={`data ${name}`}>\r\n            {/*<Descriptors\r\n                table={table}\r\n                setTable={setTable}\r\n\r\n                limits={limits}\r\n                setLimits={setLimits}\r\n\r\n                headers={headers}\r\n                setHeaders={setHeaders}\r\n            />*/}\r\n\r\n            <Pagination\r\n                max={max}\r\n                page={page}\r\n                setPage={setPage}\r\n            />\r\n\r\n            <div className={`table${gridable ? ' gridable' : ''}`}>\r\n                {!gridable && <Headers table={table} setTable={setTable} />}\r\n\r\n                {(table.length === 0)\r\n                    ? <Message text={empty} padding />\r\n                    : <Body table={table} setTable={setTable} />}\r\n            </div>\r\n\r\n            <Pagination\r\n                max={max}\r\n                page={page}\r\n                setPage={setPage}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n// eslint-disable-next-line\r\nconst Descriptor = (props) => {\r\n    const {\r\n        size,\r\n        type,\r\n        icon,\r\n        styles,\r\n        children\r\n    } = props\r\n\r\n    const Children = children\r\n\r\n    const [dropdown, setDropdown] = useState(false)\r\n    \r\n    return (\r\n        <Container clear sticky>\r\n            <Button options={{\r\n                state: 'icon inactive',\r\n                disabled: (size === 0),\r\n                handler: () => setDropdown(!dropdown)\r\n            }}>\r\n                <FontAwesomeIcon icon={icon} />\r\n            </Button>\r\n\r\n            <Dropdown options={{ type, styles, dropdown }}>\r\n                {Children}\r\n            </Dropdown>\r\n        </Container>\r\n    )\r\n}\r\n\r\n// eslint-disable-next-line\r\nconst Descriptors = ({\r\n    table,\r\n    setTable,\r\n\r\n    headers,\r\n    setHeaders,\r\n\r\n    limits,\r\n    setLimits\r\n}) => {\r\n    const size = table.length\r\n\r\n    const handlerVisible = (headers) => {\r\n        let checkedCount = headers.reduce((prev, curr) => (curr.checked) ? prev + 1 : prev, 0)\r\n        \r\n        if (checkedCount < 1) return headers\r\n\r\n        setHeaders(headers)\r\n\r\n        setTable(table.map(t =>\r\n            ({\r\n                ...t,\r\n                data: t.data.map((c, i) => ({\r\n                    ...c,\r\n                    visible: headers[i].checked\r\n                }))\r\n            })\r\n        ))\r\n    }\r\n\r\n    return (\r\n        <div className=\"descriptors\">\r\n            <Search />\r\n\r\n            {(limits) && <Descriptor\r\n                size={size}\r\n                type=\"filter\"\r\n                icon={faFilter}\r\n                styles={{ width: 96 }}\r\n            >\r\n                <Radiobox options={{\r\n                    list: limits,\r\n                    handler: setLimits\r\n                }} />\r\n            </Descriptor>}\r\n\r\n            {(headers) && <Descriptor\r\n                size={size}\r\n                type=\"visible\"\r\n                icon={faEye}\r\n            >\r\n                <Checkbox options={{\r\n                    state: headers,\r\n                    list: headers,\r\n                    handler: handlerVisible\r\n                }} />\r\n            </Descriptor>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Headers = ({ table, setTable }) => {\r\n    const [checked, setChecked] = useState(false)\r\n\r\n    const handlerChecked = () => {\r\n        setTable([\r\n            ...table.map(trace => ({\r\n                ...trace,\r\n                checked: !checked\r\n            }))\r\n        ])\r\n        setChecked(!checked)\r\n    }\r\n\r\n    return (\r\n        <div className=\"headers\">\r\n            {(table.length > 0) ?\r\n                <React.Fragment>\r\n                    <div className={`checkmark${checked ? ' checked' : ''}`} onClick={handlerChecked}>\r\n                        <div className={`checkmarks-item`}>\r\n                            <FontAwesomeIcon icon={faCheck} />\r\n                        </div>\r\n                    </div>\r\n                    {table[0].data.map((cell, iter) =>\r\n                        <Header\r\n                            key={iter + 1}\r\n                            iter={iter + 2}\r\n                            cell={cell}\r\n                        />\r\n                    )}\r\n                </React.Fragment>\r\n            : ''}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Header = ({ cell, iter }) => {\r\n    if (!cell.visible) return null\r\n    \r\n    return (\r\n        <div\r\n            className={`header ${cell.type}`}\r\n            style={{ gridColumn: `${iter} / ${iter + 1}` }}\r\n        >\r\n            {cell.header}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Body = ({ table, setTable }) => {\r\n    return (\r\n        <div className=\"body\">\r\n            {table.map((trace, iter) =>\r\n                <Trace key={iter} trace={trace} setTable={setTable} />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Trace = ({ trace, setTable }) => {\r\n    const handlerChecked = () => {\r\n        setTable(table => table.map(t => (t.id === trace.id) ? ({\r\n            ...t,\r\n            checked: !t.checked\r\n        }) : ({ ...t })))\r\n    }\r\n\r\n    return (\r\n        <div className={`trace${trace.checked ? ' checked' : ''}`} onClick={handlerChecked}>\r\n            <div className=\"checkmark\">\r\n                <div className=\"checkmarks-item\">\r\n                    <FontAwesomeIcon icon={faCheck} />\r\n                </div>\r\n            </div>\r\n\r\n            {trace.data.map((cell, iter) =>\r\n                <Cell key={iter} cell={cell} iter={iter + 2} />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Cell = ({ cell, iter }) => {\r\n    if (!cell.visible) return null\r\n    \r\n    return (\r\n        <div\r\n            className={`cell ${cell.type}`}\r\n            style={{ gridColumn: `${iter} / ${iter + 1}` }}\r\n        >\r\n            {(cell.type === 'text') &&\r\n                <p>{(cell.value.length > 99) ? `${cell.value.slice(0, 100)}...` : cell.value}</p>}\r\n            {(cell.type === 'color') &&\r\n                <span style={{ background: cell.value || 'black' }}></span>}\r\n            {(cell.type === 'img') &&\r\n                <img src={(cell.value).replace('./', `${api}/`)} alt={cell.value} />}\r\n            {(cell.type === 'icon') &&\r\n                <img className=\"icon\" src={(cell.value).replace('./', `${api}/`)} alt={cell.value} />}\r\n            {(cell.type === 'hub') &&\r\n                <img className=\"hub\" src={`${api}${cell.value.replace('./', '/')}`} alt={cell.value} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Pagination = ({ page, min=0, max=0, setPage }) => {\r\n    const renderPages = () => {\r\n        const pages = []\r\n        for (let i = min; i < (max + 1); i++) {\r\n            if (i < 5) {\r\n                pages.push(\r\n                    <Button key={i} options={{\r\n                        state: (page === i) ? 'disabled icon inactive' : 'active icon',\r\n                        disabled: (page === i),\r\n                        classNames: 'grow',\r\n                        handler: () => setPage(i)\r\n                    }}>\r\n                        <p>{i + 1}</p>\r\n                    </Button>\r\n                )\r\n            }\r\n        }\r\n        return pages.map(page => page)\r\n    }\r\n    \r\n    return (\r\n        <div className=\"pagination\">\r\n            <Button options={{\r\n                state: (page === min) ? 'disabled icon inactive' : 'active icon',\r\n                disabled: (page === min),\r\n                classNames: 'grow',\r\n                handler: () => setPage(page - 1)\r\n            }}>\r\n                <FontAwesomeIcon icon={faArrowLeft} />\r\n            </Button>\r\n\r\n            <Row>{renderPages()}</Row>\r\n\r\n            <Button options={{\r\n                state: (page === max) ? 'disabled icon inactive' : 'active icon',\r\n                disabled: (page === max),\r\n                classNames: 'grow',\r\n                handler: () => setPage(page + 1)\r\n            }}>\r\n                <FontAwesomeIcon icon={faArrowRight} />\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ({ options }) => {\r\n    const [table, setTable] = useState([])\r\n\r\n    const [dishands, setDishands] = useState(true)\r\n    const [page, setPage] = useState(0)\r\n\r\n    const [headers, setHeaders] = useState([])\r\n\r\n    const [limits, setLimits] = useState(limitList.map((l, i) => ({\r\n        id: i,\r\n        value: l,\r\n        checked: (limitDefault === l)\r\n    })))\r\n\r\n    const {\r\n        name='default',\r\n        data=[],\r\n        dataTable=[],\r\n        actions=[]\r\n    } = options || {}\r\n\r\n    const classes = [\r\n        'ui-table'\r\n    ]\r\n\r\n    useEffect(() => {\r\n        if (dataTable) {\r\n            const limit = limits?.find(l => l.checked)?.value || limitDefault\r\n            const content = getPage(dataTable, limit, page)\r\n\r\n            setTable(content.map((trace, i) => ({\r\n                ...data[i],\r\n                _id: data[i].id,\r\n                id: i,\r\n                data: trace.map((cell, j) => ({\r\n                    id: `cell-${i}-${j}`,\r\n                    header: cell.header,\r\n                    value: cell.value,\r\n                    type: cell.type,\r\n                    sortabled: cell.hasOwnProperty('sortabled')\r\n                        ? cell.sortabled\r\n                        : false,\r\n                    visible: cell.hasOwnProperty('visible')\r\n                        ? cell.visible \r\n                        : true\r\n                })),\r\n                checked: false\r\n            })))\r\n        }\r\n    }, [dataTable, data, limits, page])\r\n\r\n    useEffect(() => {\r\n        const checked = table.filter(t => t.checked)\r\n        if (checked.length > 0) setDishands(false)\r\n        else setDishands(true)\r\n    }, [table])\r\n\r\n    useEffect(() => {\r\n        if (table) {\r\n            setHeaders(table[0]?.data.map((tr, i) => ({\r\n                id: i,\r\n                title: tr.header,\r\n                checked: tr.visible\r\n            })))\r\n        }\r\n    }, [table])\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            <Manage\r\n                table={table}\r\n                actions={actions}\r\n                dishands={dishands}\r\n            />\r\n            <Table\r\n                name={name}\r\n\r\n                table={table}\r\n                setTable={setTable}\r\n\r\n                page={page}\r\n                setPage={setPage}\r\n                max={getMaxPage(dataTable, limits?.find(l => l.checked)?.value || limitDefault)}\r\n\r\n                limits={limits}\r\n                setLimits={setLimits}\r\n\r\n                headers={headers}\r\n                setHeaders={setHeaders}\r\n            />\r\n        </div>\r\n    )\r\n}","/*\r\n * COMPONENT: Select\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport Select, { components } from 'react-select'\r\nimport '../styles/Select.css'\r\n\r\nconst Menu = (props) => {\r\n    return (\r\n        <div className=\"ui-select-menu\">\r\n            <components.Menu {...props}>{props.children}</components.Menu>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ({ options }) => {\r\n    const classes = [\r\n        'ui-select'\r\n    ]\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            <Select {...options} components={{ Menu }} />\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Query from '../ui/Query'\r\nimport Alert from '../ui/Alert'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport List from '../ui/List'\r\nimport Message from '../ui/Message'\r\nimport Select from '../ui/Select'\r\nimport Checkbox from '../ui/Checkbox'\r\nimport { REGISTER, GET_ALL_HUBS, GET_ALL_ROLES } from '../../utils/queries'\r\nimport { config } from '../../utils/config'\r\n\r\nconst api = config.get('api')\r\n\r\nexport default ({ user=false, close }) => {\r\n    const [action, { loading }] = useMutation(REGISTER)\r\n\r\n    const [preferences, setPreferences] = useState([])\r\n    const [avatar, setAvatar] = useState('')\r\n    const [role, setRole] = useState(null)\r\n\r\n    const { handleSubmit, register, errors } = useForm()\r\n    const onSubmit = async (form) => {\r\n        const variables = {\r\n            name: form.name,\r\n            phone: form.phone,\r\n            email: form.email,\r\n            password: form.password,\r\n            confirmPassword: form.confirmPassword\r\n        }\r\n\r\n        if (role) variables.role = role.value\r\n        if (avatar) variables.avatar = avatar\r\n        if (preferences) variables.preferences = preferences.map(p => p.id)\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            {( \r\n                errors.name ||\r\n                errors.phone ||\r\n                errors.email ||\r\n                errors.password ||\r\n                errors.confirmPassword)\r\n            &&\r\n                <Alert type=\"error\" message={\r\n                    (errors.name.message) ||\r\n                    (errors.phone.message) ||\r\n                    (errors.email.message) ||\r\n                    (errors.password.message) ||\r\n                    (errors.confirmPassword.message)\r\n                } />\r\n            }\r\n\r\n            <Input options={{\r\n                ref: register(),\r\n                type: 'text',\r\n                name: 'name',\r\n                disabled: loading,\r\n                placeholder: 'Enter name'\r\n            }} />\r\n\r\n            <Input options={{\r\n                ref: register(),\r\n                type: 'text',\r\n                name: 'phone',\r\n                disabled: loading,\r\n                placeholder: 'Enter phone'\r\n            }} />\r\n\r\n            <Input options={{\r\n                ref: register(),\r\n                type: 'text',\r\n                name: 'email',\r\n                disabled: loading,\r\n                placeholder: 'Enter email'\r\n            }} />\r\n\r\n            <Input options={{\r\n                ref: register(),\r\n                type: 'password',\r\n                name: 'password',\r\n                disabled: loading,\r\n                placeholder: 'Enter password'\r\n            }} />\r\n\r\n            <Input options={{\r\n                ref: register(),\r\n                type: 'password',\r\n                name: 'confirmPassword',\r\n                disabled: loading,\r\n                placeholder: 'Enter confirm password'\r\n            }} />\r\n\r\n            <Query query={GET_ALL_ROLES} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                   <Select options={{\r\n                        defaultValue: role,\r\n                        placeholder: 'Choose role',\r\n                        options: data.allRoles.map(role => ({\r\n                            value: role.id, label: role.name\r\n                        })),\r\n                        onChange: (e) => {\r\n                            setRole(e)\r\n                        }\r\n                    }} />\r\n                )}\r\n            </Query>\r\n\r\n            <p className=\"ui-title\">Avatar</p>\r\n            {(user.availableAvatars && (user.availableAvatars.length > 0)) ? <List options={{\r\n                type: 'grid',\r\n                state: avatar,\r\n                list: user.availableAvatars,\r\n                handlerItem: setAvatar\r\n            }}>\r\n                {({ item }) => (\r\n                    <img\r\n                        className=\"image\"\r\n                        src={(item.path).replace('./', `${api}/`)}\r\n                        alt=\"Hub\"\r\n                    />\r\n                )}\r\n            </List> : <Message text=\"No Available Avatars\" padding />}\r\n\r\n            <p className=\"ui-title\">Preferences</p>\r\n            <Query query={GET_ALL_HUBS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    <Checkbox options={{\r\n                        type: 'grid',\r\n                        state: preferences,\r\n                        list: data.allHubs,\r\n                        handler: (items) => {\r\n                            setPreferences(items)\r\n                        }\r\n                    }} />\r\n                )}\r\n            </Query>\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Add</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Query from '../ui/Query'\r\nimport Alert from '../ui/Alert'\r\nimport List from '../ui/List'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport Select from '../ui/Select'\r\nimport Checkbox from '../ui/Checkbox'\r\nimport Message from '../ui/Message'\r\nimport { EDIT_USER, GET_ALL_HUBS, GET_ALL_ROLES } from '../../utils/queries'\r\nimport { config } from '../../utils/config'\r\n\r\nconst api = config.get('api')\r\n\r\nexport default ({ user, close }) => {\r\n    const [action, { loading }] = useMutation(EDIT_USER)\r\n\r\n    const [preferences, setPreferences] = useState([])\r\n    const [avatar, setAvatar] = useState(user.avatar)\r\n    const [role, setRole] = useState({\r\n        value: user.role.id, label: user.role.name\r\n    })\r\n\r\n    const { handleSubmit, register, errors } = useForm()\r\n    const onSubmit = async (form) => {\r\n        const variables = {\r\n            name: form.name,\r\n            phone: form.phone,\r\n            email: form.email\r\n        }\r\n\r\n        if (role) variables.role = role.value\r\n        if (avatar) variables.avatar = avatar.id\r\n        if (preferences) variables.preferences = preferences.map(p => p.id)\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            {(errors.email || errors.username) && <Alert type=\"error\" message={\r\n                (errors.email.message) || (errors.username.message)\r\n            } />}\r\n\r\n            <p className=\"ui-title\">General</p>\r\n            <Input options={{\r\n                ref: register(),\r\n                type: 'text',\r\n                name: 'name',\r\n                defaultValue: user.name || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter name'\r\n            }} />\r\n\r\n            <Input options={{\r\n                ref: register(),\r\n                type: 'text',\r\n                name: 'phone',\r\n                defaultValue: user.phone || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter phone'\r\n            }} />\r\n\r\n            <Input options={{\r\n                ref: register(),\r\n                type: 'text',\r\n                name: 'email',\r\n                defaultValue: user.email || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter email'\r\n            }} />\r\n\r\n            <Query query={GET_ALL_ROLES} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                   <Select options={{\r\n                        defaultValue: role,\r\n                        placeholder: 'Choose role',\r\n                        options: data.allRoles.map(role => ({\r\n                            value: role.id, label: role.name\r\n                        })),\r\n                        onChange: (e) => {\r\n                            setRole(e)\r\n                        }\r\n                    }} />\r\n                )}\r\n            </Query>\r\n\r\n            <p className=\"ui-title\">Avatar</p>\r\n            {(user.availableAvatars && (user.availableAvatars.length > 0)) ? <List options={{\r\n                type: 'grid',\r\n                state: avatar,\r\n                list: user.availableAvatars,\r\n                handlerItem: setAvatar\r\n            }}>\r\n                {({ item }) => (\r\n                    <img\r\n                        className=\"image\"\r\n                        src={(item.path).replace('./', `${api}/`)}\r\n                        alt=\"Hub\"\r\n                    />\r\n                )}\r\n            </List> : <Message text=\"No Available Avatars\" padding />}\r\n\r\n            <p className=\"ui-title\">Preferences</p>\r\n            <Query query={GET_ALL_HUBS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    <Checkbox options={{\r\n                        type: 'grid',\r\n                        state: preferences,\r\n                        list: data.allHubs,\r\n                        handler: (items) => {\r\n                            setPreferences(items)\r\n                        }\r\n                    }} />\r\n                )}\r\n            </Query>\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Save</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nexport default (props) => {\r\n    const [action, { data, loading, error }] = useMutation(props.query)\r\n\r\n    const Children = props.children\r\n\r\n    return <Children error={error} data={data} loading={loading} action={action} />\r\n}","import React from 'react'\r\nimport Mutation from '../ui/Mutation'\r\nimport Row from '../ui/Row'\r\nimport Container from '../ui/Container'\r\nimport Message from '../ui/Message'\r\nimport Button from '../ui/Button'\r\n\r\nexport default ({ entry, entries, query, handler, close }) => {\r\n    const docs = (entry) ? 'this' : entries.length\r\n    const ents = (docs > 1 && !entry) ? 'entries' : 'entry'\r\n\r\n    return (\r\n        <Container>\r\n            <Message text={`Are you sure you want to delete ${docs} ${ents}?`} padding />\r\n            <Row type=\"flex\">\r\n                <Button options={{\r\n                    state: 'inactive',\r\n                    classNames: 'grow',\r\n                    handler: () => {\r\n                        close()\r\n                    }\r\n                }}>\r\n                    <p>No</p>\r\n                </Button>\r\n                <Mutation query={query}>\r\n                    {({ action, loading }) => (\r\n                        <Button options={{\r\n                            state: 'inactive',\r\n                            classNames: 'grow',\r\n                            disabled: loading,\r\n                            handler: async () => {\r\n                                await handler(action, entry, entries)\r\n                                close()\r\n                            }\r\n                        }}>\r\n                            <p>Yes</p>\r\n                        </Button>\r\n                    )}\r\n                </Mutation>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\n\r\nimport Query from './ui/Query'\r\nimport Subscription from './ui/Subscription'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\n\r\nimport AddUser from './content/AddUser'\r\nimport EditUser from './content/EditUser'\r\nimport DeleteEntries from './content/DeleteEntries'\r\n\r\nimport { GET_ALL_USERS, SUB_ALL_USERS, DELETE_USERS } from '../utils/queries'\r\n\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Users</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_USERS}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_USERS} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.users) || (data && data.allUsers) || []),\r\n                                    dataTable: ((subData && subData.users) || (data && data.allUsers) || []).map(user => ([\r\n                                        { header: 'Аватар', value: user.avatar.path, type: 'icon' },\r\n                                        { header: 'Имя', value: user.name, type: 'text' },\r\n                                        { header: 'Email', value: user.email, type: 'text' },\r\n                                        { header: 'Роль', value: user.role.name, type: 'text' },\r\n                                        { header: 'Дата изменения', value: <Moment date={new Date(new Date().setTime(user.updatedAt))} format=\"DD.MM.YYYY\" />, type: 'text', visible: false },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(user.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Delete Article?',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_USERS}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, docs) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            names: (entry)\r\n                                                                                ? [entry.name]\r\n                                                                                : docs.map(doc => doc.name)\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const user = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!user)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!user),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (user) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Edit User',\r\n                                                        component: ({ close }) => <EditUser\r\n                                                            user={user}\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }])\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'active icon',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Add User',\r\n                                                        component: ({ close }) => <AddUser\r\n                                                            user\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }\r\n                                                ])\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","/*\r\n * COMPONENT: Toggler\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\nimport React from 'react'\r\nimport Message from './Message'\r\nimport '../styles/Toggler.css'\r\n\r\nexport default ({ options }) => {\r\n    const {\r\n        type,\r\n        state=null,\r\n        handler=null,\r\n        targets=[]\r\n    } = options || {}\r\n\r\n    const classes = [\r\n        'ui-toggler',\r\n        type\r\n    ]\r\n\r\n    const classesToggle = (target) => [\r\n        'toggle',\r\n        (target?.classNames),\r\n        (target.type === state) ? ' active' : ''\r\n    ]\r\n\r\n    const handlerState = (target) => {\r\n        if (target === 'erase')\r\n            return null\r\n        handler(target)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            {targets.filter(t => t).map((target, key) =>\r\n                <div\r\n                    key={key}\r\n                    className={classesToggle(target).join(' ')}\r\n                    onClick={() => handlerState(target.type)}\r\n                >\r\n                    {target.value}\r\n                </div>    \r\n            )}\r\n            {(!targets || targets.length === 0) && <Message text=\"No Content\" />}\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faImage } from '@fortawesome/free-solid-svg-icons'\r\nimport Dropzone from 'react-dropzone-uploader'\r\nimport { config } from '../../utils/config'\r\nimport '../styles/Dropzone.css'\r\n\r\nconst api = config.get('api')\r\n\r\nexport default ({ options }) => {\r\n    const [preview, setPreview] = useState('')\r\n\r\n    const {\r\n        ref,\r\n        type,\r\n        name,\r\n        value,\r\n        styles={},\r\n        setImage\r\n    } = options || {}\r\n\r\n    const classes = [\r\n        'ui-dropzone', type,\r\n        (preview || value) ? ' with-preview' : ''\r\n    ]\r\n\r\n    const handleChangeStatus = ({ meta, file }, status) => {\r\n        if (status === 'done') {\r\n            setPreview(meta.previewUrl)\r\n            setImage(file)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.join(' ')} styles={styles}>\r\n            {(preview || value) && <div className=\"preview\">\r\n                {(preview) ?\r\n                    <img src={preview} alt=\"Preview\" />\r\n                : (value) ?\r\n                   <img\r\n                        className=\"image\"\r\n                        src={(value).replace('./', `${api}/`)}\r\n                        alt=\"Article\"\r\n                    />\r\n                : <FontAwesomeIcon icon={faImage} />}\r\n            </div>}\r\n\r\n            <Dropzone\r\n                ref={ref}\r\n                name={name}\r\n                maxFiles={1}\r\n                multiple={false}\r\n                onChangeStatus={handleChangeStatus}\r\n                inputContent=\"Drag & Drop Image\"\r\n                accept=\"image/*\"\r\n            />\r\n        </div>\r\n    )\r\n}","/*\r\n * COMPONENT: Hub Toggler\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React, { useState, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useWindowSize } from '../../hooks/window.size.hook'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faEllipsisH } from '@fortawesome/free-solid-svg-icons'\r\nimport Query from './Query'\r\nimport Subscription from './Subscription'\r\nimport Row from './Row'\r\nimport Container from './Container'\r\nimport Button from './Button'\r\nimport Dropdown from './Dropdown'\r\nimport Toggler from './Toggler'\r\nimport List from './List'\r\nimport {\r\n    GET_ALL_HUBS,\r\n    SUB_ALL_HUBS\r\n} from '../../utils/queries'\r\nimport { setCurrentHub } from '../../utils/actions'\r\n\r\nexport default ({ override, all }) => {\r\n    const state = useSelector(state => state)\r\n    const dispatch = useDispatch()\r\n\r\n    const size = useWindowSize()\r\n\r\n    const [hubDropdown, setHubDropdown] = useState(false)\r\n    const [slicedIndex, setSlicedIndex] = useState(2)\r\n\r\n    useEffect(() => {\r\n        if (size.width <= 580) {\r\n            setSlicedIndex(0)\r\n        } else {\r\n            setSlicedIndex(2)\r\n        }\r\n    }, [size.width])\r\n\r\n    return (\r\n        <Query query={GET_ALL_HUBS} variables={{ status: 'PUBLISHED' }} pseudo={{ height: 45, count: 6 }}>\r\n            {({ data, refetch }) => (data.allHubs.length > 1) && (\r\n                <Subscription query={SUB_ALL_HUBS} variables={{ status: 'PUBLISHED' }} refetch={refetch}>\r\n                    {({ subData }) => {\r\n                        const hubs = ((subData && subData.hubs) || (data && data.allHubs))\r\n\r\n                        /*\r\n                        const sorted = (override) ? \r\n                            (hubs.slice(0, slicedIndex)\r\n                                .find(h => h.id === override.state.id))\r\n                            ? hubs : [\r\n                                override.state,\r\n                                ...hubs.filter(h => h.id !== override.state.id)\r\n                            ] : hubs\r\n                        */\r\n\r\n                        const slicedStarts = hubs.slice(0, slicedIndex)\r\n                        const slicedEnds = hubs.slice(slicedIndex)\r\n\r\n                        return (\r\n                            <Toggler options={{\r\n                                state: (override) ? override.state : state.filters.currentHub,\r\n                                handler: (item) => {\r\n                                    if (override) {\r\n                                        override.handler(item)\r\n                                    }\r\n                                    else dispatch(setCurrentHub(item))\r\n                                    setHubDropdown(false)\r\n                                },\r\n                                targets: [\r\n                                    (all) && ({\r\n                                        type: 'all',\r\n                                        value: <Row><p>All</p></Row>\r\n                                    }),\r\n                                    ...slicedStarts.map((hub, key) => ({\r\n                                        type: hub,\r\n                                        value: (\r\n                                            <Row key={key}>\r\n                                                <p>{hub.title}</p>\r\n                                            </Row>\r\n                                        )})),\r\n                                    {\r\n                                        type: 'erase',\r\n                                        classNames: 'dropdown',\r\n                                        value: (\r\n                                            <Container clear sticky>\r\n                                                <Button options={{\r\n                                                    state: 'inactive',\r\n                                                    handler: () => setHubDropdown(!hubDropdown)\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faEllipsisH} />\r\n                                                </Button>\r\n\r\n                                                <Dropdown options={{ dropdown: hubDropdown, styles: { right: 0 } }}>\r\n                                                    <List options={{\r\n                                                        list: slicedEnds.map(h => ({ id: h.id, label: h.title})),\r\n                                                        state: (override) ? override.state : state.filters.currentHub,\r\n                                                        handlerItem: (item) => {\r\n                                                            if (override) {\r\n                                                                override.handler(item)\r\n                                                            }\r\n                                                            else dispatch(setCurrentHub(item))\r\n                                                            setHubDropdown(false)\r\n                                                        }\r\n                                                    }}>\r\n                                                        {({ item }) => (\r\n                                                            <React.Fragment>\r\n                                                                <p className=\"name\">{item.label}</p>\r\n                                                            </React.Fragment>\r\n                                                        )}\r\n                                                    </List>\r\n                                                </Dropdown>\r\n                                            </Container>\r\n                                        )\r\n                                    }\r\n                                ]}}\r\n                            />\r\n                        )\r\n                    }}\r\n                </Subscription>\r\n            )}\r\n        </Query>\r\n    )\r\n}","import { useState, useEffect } from 'react'\r\n\r\nexport const useWindowSize = () => {\r\n    const [windowSize, setWindowSize] = useState({\r\n      width: undefined,\r\n      height: undefined,\r\n    })\r\n  \r\n    useEffect(() => {\r\n      function handleResize() {\r\n        setWindowSize({\r\n          width: window.innerWidth,\r\n          height: window.innerHeight,\r\n        })\r\n      }\r\n      \r\n      window.addEventListener(\"resize\", handleResize)\r\n      \r\n      handleResize()\r\n      \r\n      return () => window.removeEventListener(\"resize\", handleResize)\r\n    }, [])\r\n  \r\n    return windowSize\r\n  }","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useSelector } from 'react-redux'\r\nimport { useForm } from 'react-hook-form'\r\nimport Query from '../ui/Query'\r\nimport Row from '../ui/Row'\r\nimport Alert from '../ui/Alert'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport TextArea from '../ui/TextArea'\r\nimport Toggler from '../ui/Toggler'\r\nimport Dropzone from '../ui/Dropzone'\r\nimport HubToggler from '../ui/HubToggler'\r\nimport { GET_ALL_STATUS, ADD_ARTICLE } from '../../utils/queries'\r\n\r\nexport default ({ status=false, close }) => {\r\n    const state = useSelector(state => state)\r\n    const [action, { loading }] = useMutation(ADD_ARTICLE)\r\n\r\n    const[hub, setHub] = useState({})\r\n    const[image, setImage] = useState(null)\r\n    const [_status, _setStatus] = useState(null)\r\n\r\n    const { handleSubmit, register, errors } = useForm()\r\n    const onSubmit = async (form) => {\r\n        if (!hub) return\r\n\r\n        const variables = {\r\n            author: state.user.name,\r\n            title: form.title,\r\n            description: form.description,\r\n            body: form.body, hub: hub.id,\r\n            status: 'PUBLISHED'\r\n        }\r\n\r\n        if (image) variables.image = image\r\n        if (form.status) variables.status = form.status\r\n        \r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            {(errors.email || errors.username) && <Alert type=\"error\" message={\r\n                (errors.email.message) || (errors.username.message)\r\n            } />}\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'title',\r\n                disabled: loading,\r\n                placeholder: 'Enter title'\r\n            }} />\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'description',\r\n                disabled: loading,\r\n                placeholder: 'Enter description'\r\n            }} />\r\n\r\n            <TextArea options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'body',\r\n                disabled: loading,\r\n                placeholder: 'Enter body'\r\n            }} />\r\n\r\n            <HubToggler override={{\r\n                state: hub,\r\n                handler: setHub\r\n            }} />\r\n\r\n            {(status) && <Query query={GET_ALL_STATUS}>\r\n                {({ data }) => (\r\n                    <Toggler options={{\r\n                        state: _status,\r\n                        handler: _setStatus,\r\n                        targets: [\r\n                            ...data.allStatus.map((item, key) => ({\r\n                                type: item,\r\n                                value: (\r\n                                    <Row key={key}>\r\n                                        <p>{item}</p>\r\n                                    </Row>\r\n                                )}))\r\n                        ]}}\r\n                    />\r\n                )}\r\n            </Query>}\r\n\r\n            <Dropzone options={{\r\n                ref: register,\r\n                name: 'image',\r\n                setImage\r\n            }} />\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Add</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Query from '../ui/Query'\r\nimport Row from '../ui/Row'\r\nimport Alert from '../ui/Alert'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport TextArea from '../ui/TextArea'\r\nimport Toggler from '../ui/Toggler'\r\nimport Dropzone from '../ui/Dropzone'\r\nimport HubToggler from '../ui/HubToggler'\r\nimport { GET_ALL_STATUS, EDIT_ARTICLE } from '../../utils/queries'\r\n\r\nexport default ({ status=false, article, close }) => {\r\n    const [action, { loading }] = useMutation(EDIT_ARTICLE)\r\n\r\n    const[hub, setHub] = useState(article.hub)\r\n    const[image, setImage] = useState(null)\r\n    const [_status, _setStatus] = useState(article.status)\r\n\r\n    const { handleSubmit, register, errors } = useForm()\r\n    const onSubmit = async (form) => {\r\n        if (!hub) return\r\n\r\n        const variables = {\r\n            id: article._id || article.id,\r\n            title: form.title,\r\n            description: form.description,\r\n            body: form.body,\r\n            hub: hub.id,\r\n            status: 'PUBLISHED'\r\n        }\r\n\r\n        if (image) variables.image = image\r\n        if (_status) variables.status = _status\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            {(errors.email || errors.username) && <Alert type=\"error\" message={\r\n                (errors.email.message) || (errors.username.message)\r\n            } />}\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'title',\r\n                defaultValue: article.title || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter title'\r\n            }} />\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'description',\r\n                defaultValue: article.description || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter description'\r\n            }} />\r\n\r\n            <TextArea options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'body',\r\n                defaultValue: article.body || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter body'\r\n            }} />\r\n\r\n            <HubToggler override={{\r\n                state: hub,\r\n                handler: setHub\r\n            }} />\r\n\r\n            {(status) && <Query query={GET_ALL_STATUS}>\r\n                {({ data }) => (\r\n                    <Toggler options={{\r\n                        state: _status,\r\n                        handler: _setStatus,\r\n                        targets: [\r\n                            ...data.allStatus.map((item, key) => ({\r\n                                type: item,\r\n                                value: (\r\n                                    <Row key={key}>\r\n                                        <p>{item}</p>\r\n                                    </Row>\r\n                                )}))\r\n                        ]}}\r\n                    />\r\n                )}\r\n            </Query>}\r\n\r\n            <Dropzone options={{\r\n                ref: register,\r\n                name: 'image',\r\n                value: article.image.path,\r\n                setImage\r\n            }} />\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Save</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\n\r\nimport Query from './ui/Query'\r\nimport Subscription from './ui/Subscription'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\n\r\nimport AddArticle from './content/AddArticle'\r\nimport EditArticle from './content/EditArticle'\r\nimport DeleteEntries from './content/DeleteEntries'\r\n\r\nimport { GET_ALL_ARTICLES, SUB_ARTICLES, DELETE_ARTICLES } from '../utils/queries'\r\n\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Articles</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_ARTICLES}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ARTICLES} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.articles) || data.allArticles),\r\n                                    dataTable: ((subData && subData.articles) || data.allArticles).map(article => ([\r\n                                        { header: 'ID', value: article.id, type: 'text', visible: false },\r\n                                        { header: 'Изображение', value: article.image.path, type: 'img' },\r\n                                        { header: 'Заголовок', value: article.title, type: 'text' },\r\n                                        { header: 'Описание', value: article.description, type: 'text', visible: false },\r\n                                        { header: 'Комментарии', value: article.comments.length, type: 'text' },\r\n                                        { header: 'Содержание', value: article.body, type: 'text', visible: false },\r\n                                        { header: 'Сообщество', value: article.hub.title, type: 'text' },\r\n                                        { header: 'Статус', value: article.status, type: 'text' },\r\n                                        { header: 'Дата изменения', value: <Moment date={new Date(new Date().setTime(article.updatedAt))} format=\"DD.MM.YYYY\" />, type: 'text', visible: false },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(article.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Delete Article?',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_ARTICLES}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, docs) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            articles: (entry)\r\n                                                                                ? [{\r\n                                                                                    id: entry._id,\r\n                                                                                    author: entry.author.name\r\n                                                                                }]\r\n                                                                                : docs.map(doc => ({\r\n                                                                                    id: doc._id,\r\n                                                                                    author: doc.author.name\r\n                                                                                }))\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const article = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!article)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!article),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (article) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Edit Article',\r\n                                                        component: ({ close }) => <EditArticle\r\n                                                            status\r\n                                                            article={article}\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }])\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'icon active',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Add Article',\r\n                                                        component: ({ close }) => <AddArticle\r\n                                                            status\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }\r\n                                                ])\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React from 'react'\r\nimport Row from './ui/Row'\r\nimport Headline from './ui/Headline'\r\nimport Message from './ui/Message'\r\nimport './styles/Table.css'\r\n\r\nexport default () => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Acts</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Message text=\"In Development\" padding />\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useSelector } from 'react-redux'\r\nimport { useForm } from 'react-hook-form'\r\nimport Query from '../ui/Query'\r\nimport Row from '../ui/Row'\r\nimport Alert from '../ui/Alert'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport TextArea from '../ui/TextArea'\r\nimport Toggler from '../ui/Toggler'\r\nimport HubToggler from '../ui/HubToggler'\r\nimport { GET_ALL_STATUS, ADD_OFFER } from '../../utils/queries'\r\n\r\nexport default ({ status=false, close }) => {\r\n    const state = useSelector(state => state)\r\n    const [action, { loading }] = useMutation(ADD_OFFER)\r\n\r\n    const[hub, setHub] = useState({})\r\n    const [_status, _setStatus] = useState(null)\r\n\r\n    const { handleSubmit, register, errors } = useForm()\r\n    const onSubmit = async (form) => {\r\n        if (!hub) return\r\n\r\n        const variables = {\r\n            title: form.title,\r\n            message: form.message,\r\n            hub: hub.id,\r\n            user: state.user.id,\r\n            status: 'PUBLISHED'\r\n        }\r\n\r\n        if (_status) variables.status = _status\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            {(errors.email) && <Alert type=\"error\" message={\r\n                (errors.email.message)\r\n            } />}\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'title',\r\n                disabled: loading,\r\n                placeholder: 'Enter title'\r\n            }} />\r\n\r\n            <TextArea options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'message',\r\n                disabled: loading,\r\n                placeholder: 'Enter message'\r\n            }} />\r\n\r\n            <HubToggler override={{\r\n                state: hub,\r\n                handler: setHub\r\n            }} />\r\n\r\n            {(status) && <Query query={GET_ALL_STATUS}>\r\n                {({ data }) => (\r\n                    <Toggler options={{\r\n                        state: _status,\r\n                        handler: _setStatus,\r\n                        targets: [\r\n                            ...data.allStatus.map((item, key) => ({\r\n                                type: item,\r\n                                value: (\r\n                                    <Row key={key}>\r\n                                        <p>{item}</p>\r\n                                    </Row>\r\n                                )}))\r\n                        ]}}\r\n                    />\r\n                )}\r\n            </Query>}\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Add</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useSelector } from 'react-redux'\r\nimport { useForm } from 'react-hook-form'\r\nimport Query from '../ui/Query'\r\nimport Row from '../ui/Row'\r\nimport Alert from '../ui/Alert'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport TextArea from '../ui/TextArea'\r\nimport Toggler from '../ui/Toggler'\r\nimport Select from '../ui/Select'\r\nimport HubToggler from '../ui/HubToggler'\r\nimport { GET_ALL_USERS, GET_ALL_STATUS, EDIT_OFFER } from '../../utils/queries'\r\n\r\nexport default ({ user=false, status=false, offer, close }) => {\r\n    const state = useSelector(state => state)\r\n    const [action, { loading }] = useMutation(EDIT_OFFER)\r\n\r\n    const[hub, setHub] = useState(offer.hub)\r\n    const [_user, _setUser] = useState({ value: offer.user.id, label: offer.user.name })\r\n    const [_status, _setStatus] = useState(offer.status)\r\n\r\n    const { handleSubmit, register, errors } = useForm()\r\n    const onSubmit = async (form) => {\r\n        if (!hub) return\r\n\r\n        const variables = {\r\n            id: offer._id || offer.id,\r\n            title: form.title,\r\n            message: form.message,\r\n            hub: hub.id,\r\n            user: state.user.id,\r\n            status: 'PUBLISHED'\r\n        }\r\n\r\n        if (_user) variables.user = _user\r\n        if (_status) variables.status = _status\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            {(errors.email || errors.username) && <Alert type=\"error\" message={\r\n                (errors.email.message) || (errors.username.message)\r\n            } />}\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'title',\r\n                defaultValue: offer.title || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter title'\r\n            }} />\r\n\r\n            <TextArea options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'message',\r\n                defaultValue: offer.message || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter message'\r\n            }} />\r\n\r\n            <HubToggler override={{\r\n                state: hub,\r\n                handler: setHub\r\n            }} />\r\n\r\n            {(status) && <Query query={GET_ALL_STATUS}>\r\n                {({ data }) => (\r\n                    <Toggler options={{\r\n                        state: _status,\r\n                        handler: _setStatus,\r\n                        targets: [\r\n                            ...data.allStatus.map((item, key) => ({\r\n                                type: item,\r\n                                value: (\r\n                                    <Row key={key}>\r\n                                        <p>{item}</p>\r\n                                    </Row>\r\n                                )}))\r\n                        ]}}\r\n                    />\r\n                )}\r\n            </Query>}\r\n\r\n            {(user) && <Query query={GET_ALL_USERS}>\r\n                {({ data }) => (\r\n                    <Select options={{\r\n                        name: 'users',\r\n                        value: _user,\r\n                        placeholder: 'Choose user',\r\n                        options: data.allUsers.map(u => ({\r\n                            value: u.id,\r\n                            label: u.name\r\n                        })),\r\n                        onChange: (e) => {\r\n                            _setUser(e)\r\n                        }\r\n                    }} />\r\n                )}\r\n            </Query>}\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Save</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\n\r\nimport Query from './ui/Query'\r\nimport Subscription from './ui/Subscription'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\n\r\nimport AddOffer from './content/AddOffer'\r\nimport EditOffer from './content/EditOffer'\r\nimport DeleteEntries from './content/DeleteEntries'\r\n\r\nimport { GET_ALL_OFFERS, SUB_ALL_OFFERS, DELETE_OFFERS } from '../utils/queries'\r\n\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Offers</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_OFFERS}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_OFFERS} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.offers) || data.allOffers),\r\n                                    dataTable: ((subData && subData.offers) || data.allOffers).map(offer => ([\r\n                                        { header: 'ID', value: offer.id, type: 'text', visible: false },\r\n                                        { header: 'Заголовок', value: offer.title, type: 'text' },\r\n                                        { header: 'Описание', value: offer.message, type: 'text' },\r\n                                        { header: 'Пользователь', value: offer.user.name, type: 'text' },\r\n                                        { header: 'Сообщество', value: offer.hub.title, type: 'text' },\r\n                                        { header: 'Статус', value: offer.status, type: 'text' },\r\n                                        { header: 'Дата изменения', value: <Moment date={new Date(new Date().setTime(offer.updatedAt))} format=\"DD.MM.YYYY\" />, type: 'text', visible: false },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(offer.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Delete Offer',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_OFFERS}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, docs) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            offers: (entry)\r\n                                                                                ? [{\r\n                                                                                    id: entry._id,\r\n                                                                                    user: entry.user.name\r\n                                                                                }]\r\n                                                                                : docs.map(doc => ({\r\n                                                                                    id: doc._id,\r\n                                                                                    user: doc.user.name\r\n                                                                                }))\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const offer = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!offer)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!offer),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (offer) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Edit Offer',\r\n                                                        component: ({ close }) => <EditOffer\r\n                                                            user\r\n                                                            status\r\n                                                            offer={offer}\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }], true)\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'icon active',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Add Offer',\r\n                                                        component: ({ close }) => <AddOffer\r\n                                                            user\r\n                                                            status\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }\r\n                                                ], true)\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Query from '../ui/Query'\r\nimport Row from '../ui/Row'\r\nimport Alert from '../ui/Alert'\r\nimport Button from '../ui/Button'\r\nimport List from '../ui/List'\r\nimport Input from '../ui/Input'\r\nimport Toggler from '../ui/Toggler'\r\nimport { GET_ALL_STATUS, GET_ALL_ICONS, ADD_HUB } from '../../utils/queries'\r\nimport { config } from '../../utils/config'\r\n\r\nconst api = config.get('api')\r\n\r\nexport default ({ status=false, close }) => {\r\n    const [action, { loading }] = useMutation(ADD_HUB)\r\n\r\n    const[image, setImage] = useState({})\r\n    const [_status, _setStatus] = useState('')\r\n\r\n    const { handleSubmit, register, errors } = useForm()\r\n    const onSubmit = async (form) => {\r\n        const variables = {\r\n            title: form.title,\r\n            description: form.description,\r\n            slogan: form.slogan,\r\n            color: form.color,\r\n            status: 'PUBLISHED'\r\n        }\r\n\r\n        if (_status) variables.status = _status\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            {(errors.title || errors.description || errors.slogan || errors.color) && <Alert type=\"error\" message={\r\n                (errors.title?.message || errors.description?.message || errors.slogan?.message || errors.color?.message)\r\n            } />}\r\n\r\n            <Input options={{\r\n                ref: register({\r\n                    required: 'Title is required',\r\n                }),\r\n                name: 'title',\r\n                type: 'text',\r\n                placeholder: 'Enter title',\r\n                disabled: loading\r\n            }} />\r\n\r\n            <Input options={{\r\n                ref: register({\r\n                    required: 'Description is required',\r\n                }),\r\n                name: 'description',\r\n                type: 'text',\r\n                placeholder: 'Enter description',\r\n                disabled: loading\r\n            }} />\r\n\r\n            <Input options={{\r\n                ref: register({\r\n                    required: 'Slogan is required',\r\n                }),\r\n                name: 'slogan',\r\n                type: 'text',\r\n                placeholder: 'Enter slogan',\r\n                disabled: loading\r\n            }} />\r\n\r\n            <Input options={{\r\n                ref: register({\r\n                    required: 'Color is required',\r\n                }),\r\n                name: 'color',\r\n                type: 'color',\r\n                placeholder: 'Choose color',\r\n                disabled: loading\r\n            }} />\r\n\r\n            {(status) && <Query query={GET_ALL_STATUS}>\r\n                {({ data }) => (\r\n                    <Toggler options={{\r\n                        state: _status,\r\n                        handler: _setStatus,\r\n                        targets: [\r\n                            ...data.allStatus.map((item, key) => ({\r\n                                type: item,\r\n                                value: (\r\n                                    <Row key={key}>\r\n                                        <p>{item}</p>\r\n                                    </Row>\r\n                                )}))\r\n                        ]}}\r\n                    />\r\n                )}\r\n            </Query>}\r\n\r\n            <Query query={GET_ALL_ICONS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    <List options={{\r\n                        type: 'grid',\r\n                        state: image,\r\n                        list: data.allIcons,\r\n                        handlerItem: setImage\r\n                    }}>\r\n                        {({ item }) => (\r\n                            <img\r\n                                className=\"image\"\r\n                                src={(item.path).replace('./', `${api}/`)}\r\n                                alt=\"Hub\"\r\n                            />\r\n                        )}\r\n                    </List>\r\n                )}\r\n            </Query>\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Add</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Query from '../ui/Query'\r\nimport Row from '../ui/Row'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport List from '../ui/List'\r\nimport TextArea from '../ui/TextArea'\r\nimport Toggler from '../ui/Toggler'\r\nimport { GET_ALL_STATUS, GET_ALL_ICONS, EDIT_HUB } from '../../utils/queries'\r\nimport { config } from '../../utils/config'\r\n\r\nconst api = config.get('api')\r\n\r\nexport default ({ status=false, hub, close }) => {\r\n    const [action, { loading }] = useMutation(EDIT_HUB)\r\n\r\n    const[image, setImage] = useState(hub.icon || {})\r\n    const [_status, _setStatus] = useState(hub.status)\r\n\r\n    const { handleSubmit, register } = useForm()\r\n\r\n    const onSubmit = async (form) => {\r\n        const variables = {\r\n            id: hub._id,\r\n            title: form.title,\r\n            description: form.description,\r\n            slogan: form.slogan,\r\n            color: form.color\r\n        }\r\n\r\n        if (image) variables.icon = image.id\r\n        if (form.status) variables.status = form.status\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'title',\r\n                defaultValue: hub.title || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter title'\r\n            }} />\r\n            \r\n            <TextArea options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'description',\r\n                defaultValue: hub.description || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter description'\r\n            }} />\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'slogan',\r\n                defaultValue: hub.slogan || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter slogan'\r\n            }} />\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'color',\r\n                name: 'slogan',\r\n                defaultValue: hub.color || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter color'\r\n            }} />\r\n\r\n            {(status) && <Query query={GET_ALL_STATUS}>\r\n                {({ data }) => (\r\n                    <Toggler options={{\r\n                        state: _status,\r\n                        handler: _setStatus,\r\n                        targets: [\r\n                            ...data.allStatus.map((item, key) => ({\r\n                                type: item,\r\n                                value: (\r\n                                    <Row key={key}>\r\n                                        <p>{item}</p>\r\n                                    </Row>\r\n                                )}))\r\n                        ]}}\r\n                    />\r\n                )}\r\n            </Query>}\r\n\r\n            <Query query={GET_ALL_ICONS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    <List options={{\r\n                        type: 'grid',\r\n                        state: image,\r\n                        list: data.allIcons,\r\n                        handlerItem: setImage\r\n                    }}>\r\n                        {({ item }) => (\r\n                            <img\r\n                                className=\"image\"\r\n                                src={(item.path).replace('./', `${api}/`)}\r\n                                alt=\"Hub\"\r\n                            />\r\n                        )}\r\n                    </List>\r\n                )}\r\n            </Query>\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Save</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\n\r\nimport Query from './ui/Query'\r\nimport Subscription from './ui/Subscription'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\n\r\nimport AddHub from './content/AddHub'\r\nimport EditHub from './content/EditHub'\r\nimport DeleteEntries from './content/DeleteEntries'\r\n\r\nimport { GET_ALL_HUBS, SUB_ALL_HUBS, DELETE_HUBS } from '../utils/queries'\r\n\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Hubs</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_HUBS}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_HUBS} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.hubs) || data.allHubs),\r\n                                    dataTable: ((subData && subData.hubs) || data.allHubs).map(hub => ([\r\n                                        { header: 'ID', value: hub.id, type: 'text', visible: false },\r\n                                        { header: 'Иконка', value: hub.icon.path, type: 'icon', visible: false },\r\n                                        { header: 'Заголовок', value: hub.title, type: 'text' },\r\n                                        { header: 'Описание', value: hub.description, type: 'text' },\r\n                                        { header: 'Слоган', value: hub.slogan, type: 'text', visible: false },\r\n                                        { header: 'Цвет', value: hub.color, type: 'color' },\r\n                                        { header: 'Пользователи', value: hub.countUsers, type: 'text', visible: false },\r\n                                        { header: 'Статус', value: hub.status, type: 'text' },\r\n                                        { header: 'Дата изменения', value: <Moment date={new Date(new Date().setTime(hub.updatedAt))} format=\"DD.MM.YYYY\" />, type: 'text', visible: false },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(hub.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Delete Article?',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_HUBS}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, docs) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            id: (entry)\r\n                                                                                ? [entry._id]\r\n                                                                                : docs.map(doc => doc._id)\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const hub = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!hub)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!hub),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (hub) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Edit Hub',\r\n                                                        component: ({ close }) => <EditHub\r\n                                                            status\r\n                                                            hub={hub}\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }], true)\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'icon active',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Add Hub',\r\n                                                        component: ({ close }) => <AddHub\r\n                                                            status\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }\r\n                                                ], true)\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React from 'react'\r\nimport Row from './ui/Row'\r\nimport Headline from './ui/Headline'\r\nimport Message from './ui/Message'\r\nimport './styles/Table.css'\r\n\r\nexport default () => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Tours</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Message text=\"In Development\" padding />\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Query from '../ui/Query'\r\nimport Row from '../ui/Row'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport Toggler from '../ui/Toggler'\r\nimport Select from '../ui/Select'\r\nimport { ADD_CHAT, GET_ALL_CHAT_TYPES, GET_ALL_USERS } from '../../utils/queries'\r\n\r\nexport default ({ close }) => {\r\n    const [action, { loading }] = useMutation(ADD_CHAT)\r\n\r\n    const[chatType, setChatType] = useState('USER_CHAT')\r\n    const[sender, setSender] = useState(null)\r\n    const[reciever, setReciever] = useState(null)\r\n    const[members, setMembers] = useState(null)\r\n\r\n    const { handleSubmit, register } = useForm()\r\n    const onSubmit = async (form) => {\r\n        const variables = {\r\n            type: chatType,\r\n            title: form.title,\r\n            members: (chatType.includes('USER'))\r\n                ? [sender.value, reciever.value]\r\n                : members.map(member => member.value)\r\n        }\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'title',\r\n                disabled: loading,\r\n                placeholder: 'Enter title'\r\n            }} />\r\n\r\n            <Query query={GET_ALL_CHAT_TYPES} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    <Toggler options={{\r\n                        type: 'auto',\r\n                        state: chatType,\r\n                        handler: setChatType,\r\n                        targets: (data && data.allChatTypes).map((type, key) => ({\r\n                            type: type,\r\n                            value: (\r\n                                <Row key={key}>\r\n                                    <p>{type.replace('_', ' ')}</p>\r\n                                </Row>\r\n                            )\r\n                        }))}}\r\n                    />\r\n                )}\r\n            </Query>\r\n\r\n            <Query query={GET_ALL_USERS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    (chatType.includes('USER')) ? (\r\n                        <React.Fragment>\r\n                            <Select options={{\r\n                                defaultValue: sender,\r\n                                placeholder: 'Choose sender',\r\n                                options: data.allUsers.map(sender => ({\r\n                                    value: sender.name, label: sender.name\r\n                                })),\r\n                                onChange: (e) => {\r\n                                    setSender(e)\r\n                                }\r\n                            }} />\r\n                            <Select options={{\r\n                                defaultValue: reciever,\r\n                                placeholder: 'Choose reciever',\r\n                                options: data.allUsers.map(reciever => ({\r\n                                    value: reciever.name, label: reciever.name\r\n                                })),\r\n                                onChange: (e) => {\r\n                                    setReciever(e)\r\n                                }\r\n                            }} />\r\n                        </React.Fragment>\r\n                    ) : (\r\n                        <Select options={{\r\n                            value: members,\r\n                            placeholder: 'Choose members',\r\n                            options: data.allUsers.map(member => ({\r\n                                value: member.name,\r\n                                label: member.name\r\n                            })),\r\n                            closeMenuOnSelect: false,\r\n                            isMulti: true,\r\n                            onChange: (e) => {\r\n                                setMembers(e)\r\n                            }\r\n                        }} />\r\n                    )\r\n                )}\r\n            </Query>\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Add</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Query from '../ui/Query'\r\nimport Row from '../ui/Row'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport Toggler from '../ui/Toggler'\r\nimport Select from '../ui/Select'\r\nimport { ADD_CHAT, GET_ALL_CHAT_TYPES, GET_ALL_USERS } from '../../utils/queries'\r\n\r\nexport default ({ chat, members, close }) => {\r\n    const [action, { loading }] = useMutation(ADD_CHAT)\r\n\r\n    const[chatType, setChatType] = useState(chat.type || 'USER_CHAT')\r\n    const[_sender, _setSender] = useState((chat.type === 'USER_CHAT') ? ({\r\n        value: chat.members[0].name, label: chat.members[0].name\r\n    }) : null)\r\n    const[_reciever, _setReciever] = useState((chat.type === 'USER_CHAT') ? ({\r\n        value: chat.members[1].name, label: chat.members[1].name\r\n    }) : null)\r\n    const[_members, _setMembers] = useState((members) ? members.map(member => ({\r\n        value: member.name, label: member.name\r\n    })) : null)\r\n\r\n    const { handleSubmit, register } = useForm()\r\n    const onSubmit = async (form) => {\r\n        const variables = {\r\n            type: chatType,\r\n            title: form.title,\r\n            members: members.map(member => member.value)\r\n        }\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'title',\r\n                defaultValue: chat.title || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter title'\r\n            }} />\r\n\r\n            <Query query={GET_ALL_CHAT_TYPES} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    <Toggler options={{\r\n                        type: 'auto',\r\n                        state: chat.type || chatType,\r\n                        handler: setChatType,\r\n                        targets: (data && data.allChatTypes).map((type, key) => ({\r\n                            type: type,\r\n                            value: (\r\n                                <Row key={key}>\r\n                                    <p>{type.replace('_', ' ')}</p>\r\n                                </Row>\r\n                            )\r\n                        }))}}\r\n                    />\r\n                )}\r\n            </Query>\r\n\r\n            <Query query={GET_ALL_USERS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    (chatType.includes('USER')) ? (\r\n                        <React.Fragment>\r\n                            <Select options={{\r\n                                defaultValue: _sender,\r\n                                placeholder: 'Choose sender',\r\n                                options: data.allUsers.map(sender => ({\r\n                                    value: sender.name, label: sender.name\r\n                                })),\r\n                                onChange: (e) => {\r\n                                    _setSender(e)\r\n                                }\r\n                            }} />\r\n                            <Select options={{\r\n                                defaultValue: _reciever,\r\n                                placeholder: 'Choose reciever',\r\n                                options: data.allUsers.map(reciever => ({\r\n                                    value: reciever.name, label: reciever.name\r\n                                })),\r\n                                onChange: (e) => {\r\n                                    _setReciever(e)\r\n                                }\r\n                            }} />\r\n                        </React.Fragment>\r\n                    ) : (\r\n                        <Select options={{\r\n                            value: _members,\r\n                            placeholder: 'Choose members',\r\n                            options: data.allUsers.map(member => ({\r\n                                value: member.name,\r\n                                label: member.name\r\n                            })),\r\n                            closeMenuOnSelect: false,\r\n                            isMulti: true,\r\n                            onChange: (e) => {\r\n                                _setMembers(e)\r\n                            }\r\n                        }} />\r\n                    )\r\n                )}\r\n            </Query>\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Save</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\n\r\nimport Query from './ui/Query'\r\nimport Subscription from './ui/Subscription'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\n\r\nimport AddChat from './content/AddChat'\r\nimport EditChat from './content/EditChat'\r\nimport DeleteEntries from './content/DeleteEntries'\r\n\r\nimport { GET_ALL_CHATS, SUB_ALL_CHATS, DELETE_CHATS } from '../utils/queries'\r\n\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Chats</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_CHATS}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_CHATS} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.chats) || data.allChats),\r\n                                    dataTable: ((subData && subData.chats) || data.allChats || []).map(chat => ([\r\n                                        { header: 'ID', value: chat.id, type: 'text', visible: false },\r\n                                        { header: 'Название', value: chat.title, type: 'text' },\r\n                                        { header: 'Участники', value: chat.members?.length, type: 'text' },\r\n                                        { header: 'Сообщений', value: chat.messages?.length, type: 'text' },\r\n                                        { header: 'Тип чата', value: chat.type, type: 'text' },\r\n                                        { header: 'Дата изменения', value: <Moment date={new Date(new Date().setTime(chat.updatedAt))} format=\"DD.MM.YYYY\" />, type: 'text', visible: false },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(chat.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Delete Chat',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_CHATS}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, docs) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            id: (entry)\r\n                                                                                ? [{\r\n                                                                                    id: entry.id,\r\n                                                                                    user: entry.user.id\r\n                                                                                }]\r\n                                                                                : docs.map(doc => ({\r\n                                                                                    id: doc.id,\r\n                                                                                    user: doc.user.id\r\n                                                                                }))\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const chat = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!chat)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!chat),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (chat) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Edit Chat',\r\n                                                        component: ({ close }) => <EditChat\r\n                                                            chat={chat}\r\n                                                            members={chat.members}\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }], true)\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'icon active',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Add Chat',\r\n                                                        component: ({ close }) => <AddChat\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }\r\n                                                ], true)\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Button from '../ui/Button'\r\nimport Dropzone from '../ui/Dropzone'\r\nimport { ADD_OFFER } from '../../utils/queries'\r\n\r\nexport default ({ close }) => {\r\n    const [action] = useMutation(ADD_OFFER)\r\n\r\n    const[image, setImage] = useState(null)\r\n\r\n    const { handleSubmit, register } = useForm()\r\n    const onSubmit = async () => {\r\n        const variables = { file: image }\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            <Dropzone options={{\r\n                ref: register,\r\n                name: 'image',\r\n                setImage\r\n            }} />\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Add</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Button from '../ui/Button'\r\nimport Dropzone from '../ui/Dropzone'\r\nimport { EDIT_OFFER } from '../../utils/queries'\r\n\r\nexport default ({ image, close }) => {\r\n    const [action] = useMutation(EDIT_OFFER)\r\n\r\n    const[_image, _setImage] = useState(null)\r\n\r\n    const { handleSubmit, register } = useForm()\r\n    const onSubmit = async () => {\r\n        const variables = { file: _image }\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            <Dropzone options={{\r\n                ref: register,\r\n                name: 'image',\r\n                value: image.path,\r\n                setImage: _setImage\r\n            }} />\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Add</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\n\r\nimport Query from './ui/Query'\r\nimport Subscription from './ui/Subscription'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\n\r\nimport AddImage from './content/AddImage'\r\nimport EditImage from './content/EditImage'\r\nimport DeleteEntries from './content/DeleteEntries'\r\n\r\nimport { GET_ALL_IMAGES, SUB_ALL_IMAGES, DELETE_IMAGES } from '../utils/queries'\r\n\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Gallery</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_IMAGES}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_IMAGES} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.images) || data.allImages),\r\n                                    dataTable: ((subData && subData.images) || data.allImages).map(image => ([\r\n                                        { header: 'ID', value: image.id, type: 'text', visible: false },\r\n                                        { header: 'Изображение', value: image.path, type: 'img' },\r\n                                        { header: 'Название', value: image.name, type: 'text' },\r\n                                        { header: 'Путь', value: image.path, type: 'text' },\r\n                                        { header: 'Дата изменения', value: <Moment date={new Date(new Date().setTime(image.updatedAt))} format=\"DD.MM.YYYY\" />, type: 'text', visible: false },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(image.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Delete Offer',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_IMAGES}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, entries) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            id: (entry)\r\n                                                                                ? [{\r\n                                                                                    id: entry.id,\r\n                                                                                    user: entry.user.id\r\n                                                                                }]\r\n                                                                                : entries.map(ent => ent._id)\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const image = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!image)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!image),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (image) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Edit Image',\r\n                                                        component: ({ close }) => <EditImage\r\n                                                            image={image}\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }], true)\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'icon active',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Add Image',\r\n                                                        component: ({ close }) => <AddImage\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }\r\n                                                ], true)\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Query from '../ui/Query'\r\nimport Row from '../ui/Row'\r\nimport Button from '../ui/Button'\r\nimport HubToggler from '../ui/HubToggler'\r\nimport Toggler from '../ui/Toggler'\r\nimport Dropzone from '../ui/Dropzone'\r\nimport { GET_ALL_RARITIES, ADD_AVATAR } from '../../utils/queries'\r\n\r\nexport default ({ close }) => {\r\n    const [action] = useMutation(ADD_AVATAR)\r\n\r\n    const[hub, setHub] = useState({})\r\n    const[image, setImage] = useState(null)\r\n    const[rarity, setRarity] = useState(null)\r\n\r\n    const { handleSubmit, register } = useForm()\r\n    const onSubmit = async () => {\r\n        if (!hub) return null\r\n\r\n        const variables = {\r\n            rarity,\r\n            file: image,\r\n            hub: hub.id\r\n        }\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            <p className=\"ui-title\">Image</p>\r\n            <Dropzone options={{\r\n                ref: register,\r\n                type: 'icon',\r\n                name: 'image',\r\n                setImage\r\n            }} />\r\n\r\n            <p className=\"ui-title\">Rarity</p>\r\n            <Query query={GET_ALL_RARITIES}>\r\n                {({ data }) => (\r\n                    <Toggler options={{\r\n                        state: rarity,\r\n                        handler: setRarity,\r\n                        targets: [\r\n                            ...data.allRarities.map((item, key) => ({\r\n                                type: item,\r\n                                value: (\r\n                                    <Row key={key}>\r\n                                        <p>{item}</p>\r\n                                    </Row>\r\n                                )}))\r\n                        ]}}\r\n                    />\r\n                )}\r\n            </Query>\r\n            \r\n            <p className=\"ui-title\">Hub</p>\r\n            <HubToggler override={{\r\n                state: hub,\r\n                handler: setHub\r\n            }} />\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Add</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Query from '../ui/Query'\r\nimport Row from '../ui/Row'\r\nimport Button from '../ui/Button'\r\nimport HubToggler from '../ui/HubToggler'\r\nimport Toggler from '../ui/Toggler'\r\nimport Dropzone from '../ui/Dropzone'\r\nimport { GET_ALL_RARITIES, EDIT_AVATAR } from '../../utils/queries'\r\n\r\nexport default ({ avatar, close }) => {\r\n    const [action] = useMutation(EDIT_AVATAR)\r\n\r\n    const[hub, setHub] = useState(avatar.hub)\r\n    const[image, setImage] = useState(null)\r\n    const[rarity, setRarity] = useState(avatar.rarity)\r\n\r\n    const { handleSubmit, register } = useForm()\r\n    const onSubmit = async () => {\r\n        const variables = {\r\n            id: avatar._id,\r\n            rarity: rarity,\r\n            hub: hub.id\r\n        }\r\n\r\n        if (image) variables.file = image\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            <p className=\"ui-title\">Image</p>\r\n            <Dropzone options={{\r\n                ref: register,\r\n                type: 'icon',\r\n                name: 'image',\r\n                value: avatar.path,\r\n                setImage\r\n            }} />\r\n\r\n            <p className=\"ui-title\">Rarity</p>\r\n            <Query query={GET_ALL_RARITIES}>\r\n                {({ data }) => (\r\n                    <Toggler options={{\r\n                        state: rarity,\r\n                        handler: setRarity,\r\n                        targets: [\r\n                            ...data.allRarities.map((item, key) => ({\r\n                                type: item,\r\n                                value: (\r\n                                    <Row key={key}>\r\n                                        <p>{item}</p>\r\n                                    </Row>\r\n                                )}))\r\n                        ]}}\r\n                    />\r\n                )}\r\n            </Query>\r\n            \r\n            <p className=\"ui-title\">Hub</p>\r\n            <HubToggler override={{\r\n                state: hub,\r\n                handler: setHub\r\n            }} />\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Save</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\n\r\nimport Query from './ui/Query'\r\nimport Subscription from './ui/Subscription'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\n\r\nimport AddAvatar from './content/AddAvatar'\r\nimport EditAvatar from './content/EditAvatar'\r\nimport DeleteEntries from './content/DeleteEntries'\r\n\r\nimport { GET_ALL_AVATARS, SUB_ALL_AVATARS, DELETE_AVATARS } from '../utils/queries'\r\n\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Avatars</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_AVATARS}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_AVATARS} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.avatars) || (data && data.allAvatars) || []),\r\n                                    dataTable: ((subData && subData.avatars) || (data && data.allAvatars) || []).map(avatar => ([\r\n                                        { header: 'ID', value: avatar.id, type: 'text', visible: false },\r\n                                        { header: 'Изображение', value: avatar.path, type: 'icon' },\r\n                                        { header: 'Название', value: avatar.name, type: 'text', visible: false },\r\n                                        { header: 'Путь', value: avatar.path, type: 'text', visible: false },\r\n                                        { header: 'Редкость', value: avatar.rarity, type: 'text' },\r\n                                        { header: 'Сообщество', value: avatar.hub.title, type: 'text' },\r\n                                        { header: 'Дата изменения', value: <Moment date={new Date(new Date().setTime(avatar.updatedAt))} format=\"DD.MM.YYYY\" />, type: 'text', visible: false },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(avatar.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Avatar',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_AVATARS}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, entries) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            id: (entry)\r\n                                                                                ? [{\r\n                                                                                    id: entry.id,\r\n                                                                                    user: entry.user.id\r\n                                                                                }]\r\n                                                                                : entries.map(ent => ent._id)\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const avatar = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!avatar)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!avatar),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (avatar) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Avatar',\r\n                                                        component: ({ close }) => <EditAvatar\r\n                                                            avatar={avatar}\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }], true)\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'icon active',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Avatar',\r\n                                                        component: ({ close }) => <AddAvatar\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }\r\n                                                ], true)\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Row from '../ui/Row'\r\nimport Query from '../ui/Query'\r\nimport Button from '../ui/Button'\r\nimport Toggler from '../ui/Toggler'\r\nimport Dropzone from '../ui/Dropzone'\r\nimport { GET_ALL_HUBS, ADD_ICON } from '../../utils/queries'\r\nimport { config } from '../../utils/config'\r\n\r\nconst api = config.get('api')\r\n\r\nexport default ({ close }) => {\r\n    const [action] = useMutation(ADD_ICON)\r\n\r\n    const[hub, setHub] = useState(null)\r\n    const[image, setImage] = useState(null)\r\n\r\n    const { handleSubmit, register } = useForm()\r\n    const onSubmit = async () => {\r\n        if (!hub) return null\r\n\r\n        const variables = {\r\n            file: image,\r\n            hub\r\n        }\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            <Dropzone options={{\r\n                ref: register,\r\n                name: 'image',\r\n                setImage\r\n            }} />\r\n\r\n            <Query query={GET_ALL_HUBS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    <Toggler options={{\r\n                        type: 'auto',\r\n                        state: hub,\r\n                        handler: setHub,\r\n                        targets: (data && data.allHubs).map((hub, key) => ({\r\n                            type: hub.id,\r\n                            value: (\r\n                                <Row key={key}>\r\n                                    {(hub.icon && hub.icon.path) &&\r\n                                    <div className=\"icon\">\r\n                                        <img src={(hub.icon.path).replace('./', `${api}/`)} alt={hub.title} />\r\n                                    </div>}\r\n                                    <p>{hub.title}</p>\r\n                                </Row>\r\n                            )}))\r\n                        }}\r\n                    />\r\n                )}\r\n            </Query>\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Add</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Row from '../ui/Row'\r\nimport Query from '../ui/Query'\r\nimport Button from '../ui/Button'\r\nimport Toggler from '../ui/Toggler'\r\nimport Dropzone from '../ui/Dropzone'\r\nimport { GET_ALL_HUBS, EDIT_ICON } from '../../utils/queries'\r\nimport { config } from '../../utils/config'\r\n\r\nconst api = config.get('api')\r\n\r\nexport default ({ icon, close }) => {\r\n    const [action] = useMutation(EDIT_ICON)\r\n\r\n    const[hub, setHub] = useState(null)\r\n    const[image, setImage] = useState(null)\r\n\r\n    const { handleSubmit, register } = useForm()\r\n    const onSubmit = async () => {\r\n        if (!hub) return null\r\n\r\n        const variables = {\r\n            file: image,\r\n            hub\r\n        }\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            <Dropzone options={{\r\n                ref: register,\r\n                name: 'image',\r\n                value: icon.path,\r\n                setImage\r\n            }} />\r\n\r\n            <Query query={GET_ALL_HUBS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    <Toggler options={{\r\n                        type: 'auto',\r\n                        state: hub,\r\n                        handler: setHub,\r\n                        targets: (data && data.allHubs).map((hub, key) => ({\r\n                            type: hub.id,\r\n                            value: (\r\n                                <Row key={key}>\r\n                                    {(hub.icon && hub.icon.path) &&\r\n                                    <div className=\"icon\">\r\n                                        <img src={(hub.icon.path).replace('./', `${api}/`)} alt={hub.title} />\r\n                                    </div>}\r\n                                    <p>{hub.title}</p>\r\n                                </Row>\r\n                            )}))\r\n                        }}\r\n                    />\r\n                )}\r\n            </Query>\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Save</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\n\r\nimport Query from './ui/Query'\r\nimport Subscription from './ui/Subscription'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\n\r\nimport AddIcon from './content/AddIcon'\r\nimport EditIcon from './content/EditIcon'\r\nimport DeleteEntries from './content/DeleteEntries'\r\n\r\nimport { GET_ALL_ICONS, SUB_ALL_ICONS, DELETE_ICONS } from '../utils/queries'\r\n\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Icons</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_ICONS}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_ICONS} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.icons) || data.allIcons),\r\n                                    dataTable: ((subData && subData.icons) || data.allIcons).map(icon => ([\r\n                                        { header: 'ID', value: icon.id, type: 'text', visible: false },\r\n                                        { header: 'Изображение', value: icon.path, type: 'icon' },\r\n                                        { header: 'Сообщество', value: icon.hub.title, type: 'text' },\r\n                                        { header: 'Название', value: icon.name, type: 'text', visible: false },\r\n                                        { header: 'Путь', value: icon.path, type: 'text', visible: false },\r\n                                        { header: 'Дата изменения', value: <Moment date={new Date(new Date().setTime(icon.updatedAt))} format=\"DD.MM.YYYY\" />, type: 'text', visible: false },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(icon.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Delete Icon',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_ICONS}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, entries) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            id: (entry)\r\n                                                                                ? [{\r\n                                                                                    id: entry.id,\r\n                                                                                    user: entry.user.id\r\n                                                                                }]\r\n                                                                                : entries.map(ent => ent._id)\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const icon = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!icon)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!icon),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (icon) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Edit Icon',\r\n                                                        component: ({ close }) => <EditIcon\r\n                                                            icon={icon}\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }], true)\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'icon active',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Add Icon',\r\n                                                        component: ({ close }) => <AddIcon\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }\r\n                                                ], true)\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Button from '../ui/Button'\r\nimport Dropzone from '../ui/Dropzone'\r\nimport { ADD_FLAG} from '../../utils/queries'\r\n\r\nexport default ({ close }) => {\r\n    const [action] = useMutation(ADD_FLAG)\r\n    const[image, setImage] = useState(null)\r\n\r\n    const { handleSubmit, register } = useForm()\r\n    const onSubmit = async () => {\r\n        const variables = {\r\n            file: image\r\n        }\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            <Dropzone options={{\r\n                ref: register,\r\n                name: 'image',\r\n                setImage\r\n            }} />\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Add</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Button from '../ui/Button'\r\nimport Dropzone from '../ui/Dropzone'\r\nimport { EDIT_FLAG } from '../../utils/queries'\r\n\r\nexport default ({ icon, close }) => {\r\n    const [action] = useMutation(EDIT_FLAG)\r\n\r\n    const[image, setImage] = useState(null)\r\n\r\n    const { handleSubmit, register } = useForm()\r\n    const onSubmit = async () => {\r\n        const variables = {\r\n            file: image\r\n        }\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            <Dropzone options={{\r\n                ref: register,\r\n                name: 'image',\r\n                value: icon.path,\r\n                setImage\r\n            }} />\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Save</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\n\r\nimport Query from './ui/Query'\r\nimport Subscription from './ui/Subscription'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\n\r\nimport AddFlag from './content/AddFlag'\r\nimport EditFlag from './content/EditFlag'\r\nimport DeleteEntries from './content/DeleteEntries'\r\n\r\nimport { GET_ALL_FLAGS, SUB_ALL_FLAGS, DELETE_FLAGS } from '../utils/queries'\r\n\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Flags</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_FLAGS}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_FLAGS} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.flags) || data.allFlags),\r\n                                    dataTable: ((subData && subData.flags) || data.allFlags).map(flag => ([\r\n                                        { header: 'ID', value: flag.id, type: 'text', visible: false },\r\n                                        { header: 'Изображение', value: flag.path, type: 'icon' },\r\n                                        { header: 'Название', value: flag.name, type: 'text', visible: false },\r\n                                        { header: 'Путь', value: flag.path, type: 'text', visible: false },\r\n                                        { header: 'Дата изменения', value: <Moment date={new Date(new Date().setTime(flag.updatedAt))} format=\"DD.MM.YYYY\" />, type: 'text', visible: false },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(flag.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Delete Flag',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_FLAGS}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, entries) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            id: (entry)\r\n                                                                                ? [{\r\n                                                                                    id: entry.id,\r\n                                                                                    user: entry.user.id\r\n                                                                                }]\r\n                                                                                : entries.map(ent => ent._id)\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const flag = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!flag)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!flag),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (flag) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Edit Flag',\r\n                                                        component: ({ close }) => <EditFlag\r\n                                                            flag={flag}\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }], true)\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'icon active',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Add Flag',\r\n                                                        component: ({ close }) => <AddFlag\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }\r\n                                                ], true)\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React from 'react'\r\nimport Row from './ui/Row'\r\nimport Headline from './ui/Headline'\r\nimport Message from './ui/Message'\r\nimport './styles/Table.css'\r\n\r\nexport default () => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Pets</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n                \r\n                <Message text=\"In Development\" padding />\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Query from '../ui/Query'\r\nimport Select from '../ui/Select'\r\nimport Alert from '../ui/Alert'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport { EDIT_ROLE, GET_ALL_PERMITIONS } from '../../utils/queries'\r\n\r\nexport default ({ role, close }) => {\r\n    const [permissions, setPermissions] = useState(role.permissions.map(p => ({\r\n        value: p, label: p\r\n    })))\r\n    const [action, { loading }] = useMutation(EDIT_ROLE)\r\n\r\n    const { handleSubmit, register, errors } = useForm()\r\n    const onSubmit = async (form) => {\r\n        const variables = {\r\n            id: role._id,\r\n            name: form.name\r\n        }\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            {(errors.name) && <Alert type=\"error\" message={errors.name.message} />}\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'name',\r\n                defaultValue: role.name,\r\n                disabled: loading,\r\n                placeholder: 'Enter name'\r\n            }} />\r\n\r\n            <Query query={GET_ALL_PERMITIONS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    <Select options={{\r\n                        value: permissions,\r\n                        options: data.allPermissions.map(p => ({\r\n                            value: p,\r\n                            label: p\r\n                        })),\r\n                        closeMenuOnSelect: false,\r\n                        isMulti: true,\r\n                        onChange: (e) => {\r\n                            setPermissions(e)\r\n                        }\r\n                    }} />\r\n                )}\r\n            </Query>\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Save</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Query from '../ui/Query'\r\nimport Select from '../ui/Select'\r\nimport Alert from '../ui/Alert'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport { ADD_ROLE, GET_ALL_PERMITIONS } from '../../utils/queries'\r\n\r\nexport default ({ close }) => {\r\n    const [permissions, setPermissions] = useState(null)\r\n    const [action, { loading }] = useMutation(ADD_ROLE)\r\n\r\n    const { handleSubmit, register, errors } = useForm()\r\n    const onSubmit = async (form) => {\r\n        const variables = {\r\n            name: form.name,\r\n            permissions: permissions.map(p => p.value)\r\n        }\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            {(errors.name) && <Alert type=\"error\" message={errors.name.message} />}\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'name',\r\n                disabled: loading,\r\n                placeholder: 'Enter name'\r\n            }} />\r\n\r\n            <Query query={GET_ALL_PERMITIONS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    <Select options={{\r\n                        value: permissions,\r\n                        placeholder: 'Choose permissions',\r\n                        options: data.allPermissions.map(p => ({\r\n                            value: p,\r\n                            label: p\r\n                        })),\r\n                        closeMenuOnSelect: false,\r\n                        isMulti: true,\r\n                        onChange: (e) => {\r\n                            setPermissions(e)\r\n                        }\r\n                    }} />\r\n                )}\r\n            </Query>\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Save</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\n\r\nimport Query from './ui/Query'\r\nimport Subscription from './ui/Subscription'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\n\r\nimport EditRole from './content/EditRole'\r\nimport AddRole from './content/AddRole'\r\nimport DeleteEntries from './content/DeleteEntries'\r\n\r\nimport {\r\n    GET_ALL_ROLES,\r\n    DELETE_ROLES,\r\n    SUB_ALL_ROLES\r\n} from '../utils/queries'\r\n\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Roles</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_ROLES}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_ROLES} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.roles) || data.allRoles),\r\n                                    dataTable: ((subData && subData.roles) || data.allRoles).map(role => ([\r\n                                        { header: 'ID', value: role.id, type: 'text', visible: false },\r\n                                        { header: 'Имя', value: role.name, type: 'text' },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(role.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Delete Role?',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_ROLES}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, docs) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            id: (entry)\r\n                                                                                ? [entry.id]\r\n                                                                                : docs.map(doc => doc._id)\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const role = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!role)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!role),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (role) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Edit Role',\r\n                                                        component: ({ close }) => <EditRole\r\n                                                            role={role}\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }], true)\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'active icon',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Add Role',\r\n                                                        component: ({ close }) => <AddRole\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }\r\n                                                ], true)\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Query from '../ui/Query'\r\nimport Alert from '../ui/Alert'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport List from '../ui/List'\r\nimport { GET_ALL_FLAGS, ADD_LANGUAGE } from '../../utils/queries'\r\nimport { config } from '../../utils/config'\r\n\r\nconst api = config.get('api')\r\n\r\nexport default ({ close }) => {\r\n    const [action, { loading }] = useMutation(ADD_LANGUAGE)\r\n\r\n    const [flag, setFlag] = useState('')\r\n\r\n    const { handleSubmit, register, errors } = useForm()\r\n    const onSubmit = async (form) => {\r\n        const variables = {\r\n            code: form.code,\r\n            title: form.title,\r\n            flag: flag.id\r\n        }\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            {(errors.code) && <Alert type=\"error\" message={\r\n                (errors.code.message)\r\n            } />}\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'code',\r\n                disabled: loading,\r\n                placeholder: 'Enter code'\r\n            }} />\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'title',\r\n                disabled: loading,\r\n                placeholder: 'Enter title'\r\n            }} />\r\n\r\n            <Query query={GET_ALL_FLAGS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    <List options={{\r\n                        type: 'grid',\r\n                        state: flag,\r\n                        list: data.allFlags,\r\n                        handlerItem: setFlag\r\n                    }}>\r\n                        {({ item }) => (\r\n                            <img\r\n                                className=\"image\"\r\n                                src={(item.path).replace('./', `${api}/`)}\r\n                                alt=\"Flag\"\r\n                            />\r\n                        )}\r\n                    </List>\r\n                )}\r\n            </Query>\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Add</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport Query from '../ui/Query'\r\nimport Alert from '../ui/Alert'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport List from '../ui/List'\r\nimport { GET_ALL_FLAGS, EDIT_LANGUAGE } from '../../utils/queries'\r\nimport { config } from '../../utils/config'\r\n\r\nconst api = config.get('api')\r\n\r\nexport default ({ language, close }) => {\r\n    const [action, { loading }] = useMutation(EDIT_LANGUAGE)\r\n\r\n    const [flag, setFlag] = useState(language.flag)\r\n\r\n    const { handleSubmit, register, errors } = useForm()\r\n    const onSubmit = async (form) => {\r\n        const variables = {\r\n            id: language._id,\r\n            code: form.code,\r\n            title: form.title,\r\n            flag: flag.id\r\n        }\r\n\r\n        await action({ variables })\r\n\r\n        close()\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            {(errors.code) && <Alert type=\"error\" message={\r\n                (errors.code.message)\r\n            } />}\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'code',\r\n                value: language.code,\r\n                disabled: loading,\r\n                placeholder: 'Enter code'\r\n            }} />\r\n\r\n            <Input options={{\r\n                ref: register({ required: true }),\r\n                type: 'text',\r\n                name: 'title',\r\n                value: language.title,\r\n                disabled: loading,\r\n                placeholder: 'Enter title'\r\n            }} />\r\n\r\n            <Query query={GET_ALL_FLAGS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => (\r\n                    <List options={{\r\n                        type: 'grid',\r\n                        state: flag,\r\n                        list: data.allFlags,\r\n                        handlerItem: setFlag\r\n                    }}>\r\n                        {({ item }) => (\r\n                            <img\r\n                                className=\"image\"\r\n                                src={(item.path).replace('./', `${api}/`)}\r\n                                alt=\"Flag\"\r\n                            />\r\n                        )}\r\n                    </List>\r\n                )}\r\n            </Query>\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow'\r\n            }}>\r\n                <p>Save</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\n\r\nimport Subscription from './ui/Subscription'\r\nimport Query from './ui/Query'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\n\r\nimport AddLanguage from './content/AddLanguage'\r\nimport EditLanguage from './content/EditLanguage'\r\nimport DeleteEntries from './content/DeleteEntries'\r\n\r\nimport { GET_ALL_LANGUAGES, SUB_ALL_LANGUAGES, DELETE_LANGUAGES } from '../utils/queries'\r\n\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Language</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_LANGUAGES}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_LANGUAGES} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.languages) || data.allLanguages),\r\n                                    dataTable: ((subData && subData.languages) || data.allLanguages).map(language => ([\r\n                                        { header: 'ID', value: language.id, type: 'text', visible: false },\r\n                                        { header: 'Иконка', value: language?.flag?.path || null, type: 'icon' },\r\n                                        { header: 'Код', value: language.code, type: 'text' },\r\n                                        { header: 'Название', value: language.title, type: 'text' },\r\n                                        { header: 'Дата изменения', value: <Moment date={new Date(new Date().setTime(language.updatedAt))} format=\"DD.MM.YYYY\" />, type: 'text', visible: false },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(language.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Delete Language',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_LANGUAGES}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, docs) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            id: (entry)\r\n                                                                                ? [entry.id]\r\n                                                                                : docs.map(doc => doc._id)\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const language = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!language)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!language),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (language) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Edit Language',\r\n                                                        component: ({ close }) => <EditLanguage\r\n                                                            language={language}\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }], true)\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'icon active',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Add Language',\r\n                                                        component: ({ close }) => <AddLanguage\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }\r\n                                                ], true)\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React from 'react'\r\nimport Home from './components/Home'\r\nimport Users from './components/Users'\r\nimport Articles from './components/Articles'\r\nimport Acts from './components/Acts'\r\nimport Offers from './components/Offers'\r\nimport Hubs from './components/Hubs'\r\nimport Tours from './components/Tours'\r\nimport Chats from './components/Chats'\r\nimport Images from './components/Images'\r\nimport Avatars from './components/Avatars'\r\nimport Icons from './components/Icons'\r\nimport Flags from './components/Flags'\r\nimport Pets from './components/Pets'\r\nimport Roles from './components/Roles'\r\nimport Languages from './components/Languages'\r\n\r\nexport default [\r\n    {\r\n        exact: true,\r\n        path: '/',\r\n        component: ({ showModal, hideModal }) => <Home showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/users',\r\n        component: ({ showModal, hideModal }) => <Users showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/articles',\r\n        component: ({ showModal, hideModal }) => <Articles showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/offers',\r\n        component: ({ showModal, hideModal }) => <Offers showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/hubs',\r\n        component: ({ showModal, hideModal }) => <Hubs showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/chats',\r\n        component: ({ showModal, hideModal }) => <Chats showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/tours',\r\n        component: ({ showModal, hideModal }) => <Tours showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/acts',\r\n        component: ({ showModal, hideModal }) => <Acts showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/pets',\r\n        component: ({ showModal, hideModal }) => <Pets showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/roles',\r\n        component: ({ showModal, hideModal }) => <Roles showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/images',\r\n        component: ({ showModal, hideModal }) => <Images showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/avatars',\r\n        component: ({ showModal, hideModal }) => <Avatars showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/icons',\r\n        component: ({ showModal, hideModal }) => <Icons showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/flags',\r\n        component: ({ showModal, hideModal }) => <Flags showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/languages',\r\n        component: ({ showModal, hideModal }) => <Languages showModal={showModal} hideModal={hideModal} />\r\n    }\r\n]","import React, { useState, useEffect, useContext } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faUsers,\r\n    faNewspaper,\r\n    faAddressBook,\r\n    faGamepad,\r\n    faPaw,\r\n    faEye,\r\n    faImage,\r\n    faGlobeAsia,\r\n    faPaperPlane,\r\n    faTrophy,\r\n    faBell,\r\n    faRocket,\r\n    faTheaterMasks,\r\n    faIcons,\r\n    faFlag,\r\n    faCog\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport { AuthContext } from './AuthContext'\r\n\r\nimport Row from './ui/Row'\r\nimport Navigation from './ui/Navigation'\r\nimport Modal from './ui/Modal'\r\n\r\nimport ViewEmpty from './content/ViewEmpty'\r\nimport ViewNotifications from './content/ViewNotifications'\r\nimport {\r\n    SettingsEditProfileContent,\r\n    SettingsHomeContent,\r\n    SettingsQuestionContent,\r\n    SettingsLanguageContent\r\n} from './content/ViewSettings'\r\n\r\nimport Auth from './Auth'\r\n\r\nimport SVGLogo from '../assets/images/logo'\r\n\r\nimport routes from '../routes'\r\nimport '../assets/styles/App.css'\r\n\r\nfunction getButton(name, handler, routes, icon) {\r\n    return ({\r\n        options: {\r\n            state: 'inactive',\r\n            handler: () => handler(routes, true)\r\n        },\r\n        component: (\r\n            <Row>\r\n                <FontAwesomeIcon icon={icon} />\r\n                <p>{name}</p>\r\n            </Row>\r\n        )\r\n    })\r\n}\r\n\r\nconst Content = () => {\r\n    const state = useSelector(state => state)\r\n\r\n    const { logout } = useContext(AuthContext)\r\n\r\n    const [closeByBackground, setClosedByBackground] = useState(true)\r\n    const [content, setModal] = useState()\r\n    const [center, setCenterModal] = useState(false)\r\n  \r\n    const showModal = (content, center=false) => {\r\n        setModal(content)\r\n        setCenterModal(center)\r\n        document.body.style.overflow = 'hidden'\r\n    }\r\n    const hideModal = () => {\r\n        setModal(null)\r\n        setCenterModal(false)\r\n        document.body.style.overflow = 'initial'\r\n    }\r\n\r\n    useEffect(() => {\r\n        if ((state.user) && !state.user.avatar) {\r\n            setClosedByBackground(false)\r\n            showModal([\r\n                {\r\n                    path: '/',\r\n                    title: 'Choose your Avatar',\r\n                    component: () => <ViewEmpty />\r\n                }\r\n            ], true)\r\n        }\r\n    }, [state.user, logout])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Navigation options={{\r\n                dashboard: true,\r\n                links: [\r\n                    {\r\n                        links: [\r\n                            {\r\n                                path: '/',\r\n                                type: 'wide',\r\n                                component: (\r\n                                    <Row>\r\n                                        <p className=\"icon\">\r\n                                            {SVGLogo}\r\n                                        </p>\r\n                                        <p>Dashboard</p>\r\n                                    </Row>\r\n                                )\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        title: 'Content',\r\n                        links: [\r\n                            {\r\n                                path: '/users',\r\n                                component: (\r\n                                    <Row>\r\n                                        <p className=\"icon\">\r\n                                            <FontAwesomeIcon icon={faUsers} />\r\n                                        </p>\r\n                                        <p>Users</p>\r\n                                    </Row>\r\n                                )\r\n                            },\r\n                            {\r\n                                path: '/articles',\r\n                                component: (\r\n                                    <Row>\r\n                                        <p className=\"icon\">\r\n                                            <FontAwesomeIcon icon={faNewspaper} />\r\n                                        </p>\r\n                                        <p>Articles</p>\r\n                                    </Row>\r\n                                )\r\n                            },\r\n                            {\r\n                                path: '/offers',\r\n                                component: (\r\n                                    <Row>\r\n                                        <p className=\"icon\">\r\n                                            <FontAwesomeIcon icon={faAddressBook} />\r\n                                        </p>\r\n                                        <p>Offers</p>\r\n                                    </Row>\r\n                                )\r\n                            },\r\n                            {\r\n                                path: '/hubs',\r\n                                component: (\r\n                                    <Row>\r\n                                        <p className=\"icon\">\r\n                                            <FontAwesomeIcon icon={faGamepad} />\r\n                                        </p>\r\n                                        <p>Hubs</p>\r\n                                    </Row>\r\n                                )\r\n                            },\r\n                            {\r\n                                path: '/chats',\r\n                                component: (\r\n                                    <Row>\r\n                                        <p className=\"icon\">\r\n                                            <FontAwesomeIcon icon={faPaperPlane} />\r\n                                        </p>\r\n                                        <p>Chats</p>\r\n                                    </Row>\r\n                                )\r\n                            },\r\n                            {\r\n                                path: '/tours',\r\n                                component: (\r\n                                    <Row>\r\n                                        <p className=\"icon\">\r\n                                            <FontAwesomeIcon icon={faTrophy} />\r\n                                        </p>\r\n                                        <p>Tours</p>\r\n                                    </Row>\r\n                                )\r\n                            },\r\n                            {\r\n                                path: '/pets',\r\n                                component: (\r\n                                    <Row>\r\n                                        <p className=\"icon\">\r\n                                            <FontAwesomeIcon icon={faPaw} />\r\n                                        </p>\r\n                                        <p>Pets</p>\r\n                                    </Row>\r\n                                )\r\n                            },\r\n                            {\r\n                                path: '/acts',\r\n                                component: (\r\n                                    <Row>\r\n                                        <p className=\"icon\">\r\n                                            <FontAwesomeIcon icon={faRocket} />\r\n                                        </p>\r\n                                        <p>Acts</p>\r\n                                    </Row>\r\n                                )\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        title: 'Settings',\r\n                        links: [\r\n                            {\r\n                                path: '/roles',\r\n                                component: (\r\n                                    <Row>\r\n                                        <p className=\"icon\">\r\n                                            <FontAwesomeIcon icon={faEye} />\r\n                                        </p>\r\n                                        <p>Roles</p>\r\n                                    </Row>\r\n                                )\r\n                            },\r\n                            {\r\n                                path: '/images',\r\n                                component: (\r\n                                    <Row>\r\n                                        <p className=\"icon\">\r\n                                            <FontAwesomeIcon icon={faImage} />\r\n                                        </p>\r\n                                        <p>Images</p>\r\n                                    </Row>\r\n                                )\r\n                            },\r\n                            {\r\n                                path: '/avatars',\r\n                                component: (\r\n                                    <Row>\r\n                                        <p className=\"icon\">\r\n                                            <FontAwesomeIcon icon={faTheaterMasks} />\r\n                                        </p>\r\n                                        <p>Avatars</p>\r\n                                    </Row>\r\n                                )\r\n                            },\r\n                            {\r\n                                path: '/icons',\r\n                                component: (\r\n                                    <Row>\r\n                                        <p className=\"icon\">\r\n                                            <FontAwesomeIcon icon={faIcons} />\r\n                                        </p>\r\n                                        <p>Icons</p>\r\n                                    </Row>\r\n                                )\r\n                            },\r\n                            {\r\n                                path: '/flags',\r\n                                component: (\r\n                                    <Row>\r\n                                        <p className=\"icon\">\r\n                                            <FontAwesomeIcon icon={faFlag} />\r\n                                        </p>\r\n                                        <p>Flags</p>\r\n                                    </Row>\r\n                                )\r\n                            },\r\n                            {\r\n                                path: '/languages',\r\n                                component: (\r\n                                    <Row>\r\n                                        <p className=\"icon\">\r\n                                            <FontAwesomeIcon icon={faGlobeAsia} />\r\n                                        </p>\r\n                                        <p>Languages</p>\r\n                                    </Row>\r\n                                )\r\n                            }\r\n                        ]\r\n                    }\r\n                ],\r\n                buttons: [\r\n                    getButton('Notifications', showModal, [\r\n                        {\r\n                            path: '/',\r\n                            title: 'Notifications',\r\n                            component: () => <ViewNotifications />\r\n                        }\r\n                    ], faBell),\r\n                    getButton('Settings', showModal, [\r\n                        {\r\n                            path: '/',\r\n                            title: 'Settings',\r\n                            component: ({ jump, close }) => <SettingsHomeContent jump={jump} close={close} />\r\n                        },\r\n                        {\r\n                            path: '/edit',\r\n                            title: 'Edit Profile',\r\n                            component: ({ jump }) => <SettingsEditProfileContent jump={jump} />\r\n                        },\r\n                        {\r\n                            path: '/privacy-and-security',\r\n                            title: 'Privacy and Security',\r\n                            component: ({ jump }) => <ViewEmpty jump={jump} /> //<SettingsPrivacySecurityContent jump={jump} />\r\n                        },\r\n                        {\r\n                            path: '/language',\r\n                            title: 'Select language',\r\n                            component: ({ back }) => <SettingsLanguageContent back={back} />\r\n                        },\r\n                        {\r\n                            path: '/ask-a-question',\r\n                            title: 'Ask a Question',\r\n                            component: ({ back }) => <SettingsQuestionContent back={back} />\r\n                        }\r\n                    ], faCog)\r\n                ]\r\n            }} />\r\n\r\n            <Switch>\r\n                {routes.map((props, key) =>\r\n                    <Route\r\n                        {...props}\r\n                        key={key}\r\n                        component={() => props.component({ showModal, hideModal })}\r\n                    />\r\n                )}\r\n                <Redirect to=\"/\" />\r\n            </Switch>\r\n            \r\n            <Modal options={{\r\n                routes: content,\r\n                closeByBackground,\r\n                center, hideModal\r\n            }} />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default () => {\r\n    const { isAuthenticated } = useContext(AuthContext)\r\n\r\n    return (\r\n        <Switch>\r\n            {(isAuthenticated && \r\n                <Route\r\n                    path=\"/\"\r\n                    component={({ showModal }) =>\r\n                        <Content showModal={showModal} />\r\n                    }\r\n                />\r\n            )}\r\n\r\n            {(!isAuthenticated) && (\r\n                <React.Fragment>\r\n                    <Route\r\n                        path=\"/auth\"\r\n                        component={({ showModal }) =>\r\n                            <Auth showModal={showModal} />\r\n                        }\r\n                    />\r\n                    <Redirect to=\"/auth\" />\r\n                </React.Fragment>\r\n            )}\r\n        </Switch>\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\nimport { AuthContext } from './AuthContext'\r\nimport { useAuth } from '../hooks/auth.hook'\r\nimport { useQuery } from '@apollo/react-hooks'\r\n\r\nimport Row from './ui/Row'\r\nimport Container from './ui/Container'\r\nimport Alert from './ui/Alert'\r\nimport Skeleton from './ui/Skeleton'\r\n\r\nimport Main from './Main'\r\n\r\nimport { setUser } from '../utils/actions'\r\nimport { GET_USER } from '../utils/queries'\r\n\r\nimport '../assets/styles/App.css'\r\n\r\nconst SkeletonContent = () => (\r\n  <main className=\"skeleton\">\r\n      <aside>\r\n          <Container>\r\n              <Skeleton options={{ height: '85px' }} />\r\n              <Skeleton options={{ height: '45px' }} />\r\n          </Container>\r\n          <Container>\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n          </Container>\r\n      </aside>\r\n      \r\n      <aside>\r\n          <Row type=\"flex\">\r\n              <Skeleton options={{ height: '45px' }} />\r\n              <Skeleton options={{ height: '45px' }} />\r\n              <Skeleton options={{ height: '45px' }} />\r\n              <Skeleton options={{ height: '45px' }} />\r\n              <Skeleton options={{ height: '45px' }} />\r\n          </Row>\r\n          <Row type=\"flex\">\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n          </Row>\r\n      </aside>\r\n      \r\n      <aside>\r\n          <Container>\r\n              <Skeleton options={{ height: '85px' }} />\r\n              <Skeleton options={{ height: '45px' }} />\r\n          </Container>\r\n          <Container>\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n          </Container>\r\n      </aside>\r\n  </main>\r\n)\r\n\r\nexport default () => {\r\n  const { sessionID, login, logout } = useAuth()\r\n  const isAuthenticated = !!sessionID\r\n\r\n  const state = useSelector(state => state)\r\n  const dispatch = useDispatch()\r\n\r\n  const { data, loading, error } = useQuery(GET_USER)\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      if (data.getUser) dispatch(setUser(data.getUser))\r\n      else logout()\r\n    }\r\n  }, [data, logout, dispatch])\r\n\r\n  if (loading && !state.user) {\r\n    return <SkeletonContent />\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <main className=\"alert\">\r\n        <Alert type=\"error\" message=\"Sorry, site is temporarily unavailable\" />\r\n      </main>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={{\r\n      sessionID, login, logout, isAuthenticated\r\n    }}>\r\n      <div className=\"app\">\r\n        <Router>\r\n          <Main />\r\n        </Router>\r\n      </div>\r\n    </AuthContext.Provider>\r\n  )\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { ApolloClient } from 'apollo-client'\r\nimport { InMemoryCache } from 'apollo-cache-inmemory'\r\nimport { ApolloProvider } from '@apollo/react-hooks'\r\nimport { split } from '@apollo/client'\r\nimport { getMainDefinition } from '@apollo/client/utilities'\r\nimport { WebSocketLink } from '@apollo/client/link/ws'\r\nimport { createUploadLink } from 'apollo-upload-client'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport storeFactory from './storeFactory'\r\nimport App from './components/App'\r\nimport { config } from './utils/config'\r\nimport './index.css'\r\n\r\nconst api = config.get('api')\r\nconst apiWs = config.get('apiWs')\r\n\r\nconst wsLink = new WebSocketLink({\r\n  uri: `${apiWs}/graphql`,\r\n  options: {\r\n    reconnect: true\r\n  }\r\n})\r\n\r\nconst uploadLink = createUploadLink({\r\n  uri: `${api}/graphql`,\r\n  credentials: 'include'\r\n})\r\n\r\nconst splitLink = split(\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query);\r\n    return (\r\n      definition.kind === 'OperationDefinition' &&\r\n      definition.operation === 'subscription'\r\n    )\r\n  },\r\n  wsLink,\r\n  uploadLink\r\n)\r\n\r\nconst client = new ApolloClient({\r\n  link: splitLink,\r\n  cache: new InMemoryCache()\r\n})\r\n\r\nconst store = storeFactory\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </ApolloProvider>,\r\n  document.getElementById('root')\r\n)\r\n\r\nserviceWorker.unregister()"],"sourceRoot":""}