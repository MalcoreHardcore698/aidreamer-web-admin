{"version":3,"sources":["serviceWorker.js","utils/types.js","utils/reducers.js","initialState.js","storeFactory.js","components/context/Auth.js","utils/functions.js","hooks/auth.hook.js","components/ui/Row.js","components/ui/Container.js","components/ui/Alert.js","components/ui/Skeleton.js","components/ui/Button.js","components/ui/Navigation.js","components/ui/Transition.js","components/ui/Modal.js","components/ui/Message.js","components/views/Empty.js","components/ui/Query.js","components/ui/Subscription.js","components/ui/List.js","utils/config.js","components/ui/Avatar.js","utils/queries.js","components/views/Notifications.js","utils/actions.js","assets/images/logo.js","components/views/Menu.js","components/ui/Checkbox.js","components/ui/Input.js","components/ui/TextArea.js","components/ui/Divider.js","components/views/Settings.js","components/Auth.js","components/ui/Column.js","components/ui/Headline.js","components/Home.js","components/ui/Dropdown.js","components/ui/Table.js","components/ui/Form.js","components/ui/Select.js","components/forms/User.js","components/ui/Mutation.js","components/forms/Delete.js","components/Users.js","components/ui/Toggler.js","hooks/window.size.hook.js","components/ui/Dropzone.js","components/forms/Post.js","components/Posts.js","components/forms/Act.js","components/Acts.js","components/forms/Hub.js","components/Hubs.js","components/Tours.js","components/forms/Chat.js","components/Chats.js","components/forms/Image.js","components/Images.js","components/forms/Avatar.js","components/Avatars.js","components/forms/Icon.js","components/Icons.js","components/Pets.js","components/forms/Role.js","components/Roles.js","components/forms/Language.js","components/Languages.js","routes.js","components/Main.js","components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","SET_USER","SET_FORM","SET_DATA_TABLE","SET_DOCUMENT","SET_DOCUMENTS","SET_CURRENT_HUB","REGISTER_FIELD","ADD_OFFER","SET_CHAT","CLOSE_CHAT","_act_ADD_TASK","_act_ADD_TASK_ICON","_act_ADD_TASK_CONDITION","_act_ADD_TASK_AWARD","_act_ADD_AWARD","_act_SET_TASK_CONDITION_ACTIONS","_act_SET_TASK_CONDITION_GOALS","_act_SET_TASK_CONDITION_TARGET","_act_SET_TASK_CONDITION_SPECIFIC_ID","_act_SET_TASK_CONDITION_SPECIFIC_AREA","_act_SET_TASK_CONDITION_UNION","_act_SET_TASK_CONDITION_LINK","_act_SET_TASK_AWARD_TYPE","_act_SET_AWARD_TYPE","_act_SET_SUCCESSOR","_act_SET_STATUS","_act_DELETE_TASK","_act_DELETE_TASK_CONDITION","_act_DELETE_TASK_AWARD","_act_TOGGLE_TASK_ICONS","_act_TOGGLE_TASK_COMPLEX_CONDITION","_act_TOGGLE_SUCCESSOR","reducers","combineReducers","user","state","action","type","C","payload","ADD_CHAT","chats","map","chat","userId","chatId","filter","control","name","document","tasks","id","v4","title","icon","condition","awards","isDropdownIcons","documents","table","filters","currentHub","env","createStore","initialState","applyMiddleware","thunk","noop","AuthContext","createContext","login","logout","sessionID","isAuthenticated","getMaxPage","data","limit","arr","maxPage","length","slice","useAuth","useState","setSessionID","ready","setReady","useCallback","value","expiresDays","date","Date","setTime","getTime","expires","toUTCString","domain","cookie","JSON","stringify","setCookie","useEffect","session","cname","ca","decodeURIComponent","split","i","c","charAt","substring","indexOf","getCookie","props","Children","children","classes","className","join","style","clear","sticky","message","component","options","Button","child","disabled","path","handler","handlerClick","e","a","preventDefault","to","onClick","Ripple","color","during","classNames","Block","left","right","dashboard","axis","render","list","item","key","Fragment","showContent","animation","duration","unmountOnExit","handlerEnter","handlerExited","CSSTransition","in","timeout","onEnter","onExited","getPath","navigator","Switch","Childrens","Child","Route","close","back","jump","Compoent","setNavigator","content","setContent","setAnimation","home","routes","center","hideModal","closeByBackground","transitions","fade","handlerExit","swing","handlerBack","setTimeout","handlerJump","handlerClose","lockdown","faArrowLeft","find","route","compare","getTitle","text","padding","useQuery","query","variables","loading","error","refetch","pseudo","height","widthRandomness","heightRandomness","gridColumn","skeletons","count","push","skeleton","renderSkeleton","useSubscription","subData","handlerItem","_condition","config","proxy","api","apiWs","get","avatar","properties","src","replace","alt","LOGIN","gql","REGISTER","GET_ALL_USERS","SUB_ALL_USERS","GET_USER","EDIT_USER","DELETE_USERS","GET_STATS","GET_ALL_RARITIES","GET_ALL_STATUS","GET_ALL_CHAT_TYPES","EDIT_CHAT","DELETE_CHATS","GET_ALL_CHATS","SUB_ALL_CHATS","SUB_NOTIFICATIONS","GET_USER_NOTIFICATIONS","GET_ALL_ACTS","SUB_ALL_ACTS","ADD_ACT","EDIT_ACT","DELETE_ACTS","GET_ALL_AWARDS","GET_ALL_CONDITION_ENUMS","GET_ALL_HUBS","SUB_ALL_HUBS","ADD_HUB","EDIT_HUB","DELETE_HUBS","GET_ALL_POSTS","SUB_ALL_POSTS","ADD_POST","EDIT_POST","DELETE_POSTS","GET_ALL_ROLES","ADD_ROLE","EDIT_ROLE","DELETE_ROLES","SUB_ALL_ROLES","GET_ALL_PERMITIONS","GET_ALL_IMAGES","SUB_ALL_IMAGES","ADD_IMAGE","EDIT_IMAGE","DELETE_IMAGES","GET_ALL_AVATARS","SUB_ALL_AVATARS","ADD_AVATAR","EDIT_AVATAR","DELETE_AVATARS","GET_ALL_ICON_TYPES","GET_ALL_ICONS","SUB_ALL_ICONS","ADD_ICON","EDIT_ICON","DELETE_ICONS","GET_ALL_LANGUAGES","SUB_ALL_LANGUAGES","ADD_LANGUAGE","EDIT_LANGUAGE","DELETE_LANGUAGES","Query","Subscription","notifications","allUserNotifications","createdAt","format","setUser","setChat","width","viewBox","aria-hidden","focusable","data-prefix","data-icon","role","xmlns","d","fill","useSelector","dispatch","useDispatch","exact","SVGLogo","faUser","faCompass","faPaperPlane","faTrophy","founded","el","handlerChecked","faCheck","hidden","inputRef","defaultValue","placeholder","autoComplete","onChange","onKeyPress","ref","resize","distance","horizontal","Math","round","margin","SettingsEditProfileContent","useMutation","setDisabled","setAvatar","preferences","setHubs","useForm","handleSubmit","register","errors","onSubmit","form","phone","availableAvatars","hubs","allHubs","items","SettingsHomeContent","auth","useContext","faPen","faLock","faFlag","faQuestion","SettingsQuestionContent","SettingsLanguageContent","checked","setChecked","allLanguages","flag","Login","setLoading","setError","onLogin","setName","password","setPassword","settings","setSettings","target","area","then","catch","err","msg","ImageLogo","MyResponsiveLine","top","bottom","xScale","yScale","min","max","stacked","reverse","axisTop","axisRight","axisBottom","axisLeft","colors","scheme","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","from","pointLabel","pointLabelYOffset","crosshairType","motionStiffness","animate","useMesh","legends","countUsers","countPosts","countComments","styles","dropdown","dropdownRef","useRef","limitList","Manage","actions","dishands","Action","Table","gridable","empty","page","setPage","setTable","limits","setLimits","headers","setHeaders","Headers","trace","cell","iter","Header","visible","header","Body","Trace","t","Cell","background","Pagination","pages","renderPages","faArrowRight","setDishands","l","dataTable","start","end","getPage","_id","j","sortabled","hasOwnProperty","tr","wide","add","edit","afterEffect","formRef","FormFields","disabledSubmit","setDisabledSubmit","methods","elevate","provided","minHeight","border","isFocused","isSelected","borderRadius","boxShadow","cursor","transition","valueContainer","singleValue","fontWeight","fontSize","fontFamily","menu","option","multiValue","multiValueLabel","Menu","components","setVariables","setPreferences","label","setRole","p","vars","Form","beforeEffect","email","variablesCompose","allRoles","file","entry","entries","docs","ents","Mutation","showModal","users","allUsers","updatedAt","names","doc","faTrash","faPlus","all","initialSlicedFactor","initialOptions","setValue","handleRef","toggleRef","size","undefined","windowSize","setWindowSize","handleResize","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","setDropdown","slicedFactor","setSlicedFactor","setState","targets","setTargets","classesToggle","handlerState","index","isToggle","element","classList","contains","offsetHandle","offset","offsetWidth","current","searchToggle","parentElement","prev","allOption","slicedStartOptions","slicedEndOptions","op","candidate","o","unshift","shift","eraseOption","hub","result","targetsRepletion","factor","gridTemplateColumns","accept","useFormContext","unregister","watch","onDrop","droppedFile","useDropzone","multiple","maxFiles","getRootProps","getInputProps","isDragActive","URL","createObjectURL","isTitle","isSubtitle","isDescription","isContent","isHub","isStatus","isPreview","status","subtitle","description","preview","allStatus","getChoicePost","allPostTypes","postType","toLowerCase","faPencilAlt","getFormPost","isActiveFields","toUpperCase","Delete","posts","author","Mutate","post","fields","getPostRoutes","allPosts","comments","AREAS_QUERIES","ActTasks","setTasks","task","_task","dropdownIcons","faImage","allIcons","concat","goals","multiply","specific","union","link","isComplexCondition","allActions","allAreas","allGoals","closeMenuOnSelect","isMulti","g","allUnions","u","k","awardsTypes","allAwardTypes","award","quantity","_award","ActAwards","actAwards","setActAwards","actAward","_actAward","ActSettings","isEnableSuccessor","successor","isSource","setSuccessor","setEnabledSuccessor","setSource","setStatus","acts","allActs","isDisabled","SpecificSelect","Object","keys","obj","editableStatus","goal","act","required","isSlogan","isColor","isIcon","slogan","chatType","setChatType","members","sender","setSender","reciever","setReciever","member","setMembers","includes","allChatTypes","_sender","_reciever","allChats","messages","image","setImage","images","allImages","ent","isRarity","rarity","allRarities","avatars","allAvatars","iconType","setIconType","allIconTypes","icons","permissions","setPermissions","allPermissions","roles","setFlag","code","allFlags","languages","language","Home","Users","Posts","Hubs","Chats","Tours","Acts","Pets","Roles","Images","Avatars","Icons","Languages","Content","setClosedByBackground","setModal","setCenterModal","body","overflow","getOptions","isCenter","faUsers","faNewspaper","faGamepad","faPaw","faRocket","faEye","faTheaterMasks","faIcons","faGlobeAsia","faBell","faCog","faBars","Auth","SkeletonContent","getUser","Provider","Main","wsLink","WebSocketLink","uri","reconnect","uploadLink","createUploadLink","credentials","splitLink","definition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","store","storeFactory","ReactDOM","getElementById","serviceWorker","registration","console"],"mappings":"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","file":"static/js/main.33e89cda.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export default {\r\n    SET_USER: 'SET_USER',\r\n    SET_FORM: 'SET_FORM',\r\n    SET_DATA_TABLE: 'SET_DATA_TABLE',\r\n    SET_DOCUMENT: 'SET_DOCUMENT',\r\n    SET_DOCUMENTS: 'SET_DOCUMENTS',\r\n    SET_CURRENT_HUB: 'SET_CURRENT_HUB',\r\n    REGISTER_FIELD: 'REGISTER_FIELD',\r\n\r\n    ADD_OFFER: 'ADD_OFFER',\r\n\r\n    SET_CHAT: 'SET_CHAT',\r\n    CLOSE_CHAT: 'CLOSE_CHAT',\r\n\r\n    _act_ADD_TASK: '_act_ADD_TASK',\r\n    _act_ADD_TASK_ICON: '_act_ADD_TASK_ICON',\r\n    _act_ADD_TASK_CONDITION: '_act_ADD_TASK_CONDITION',\r\n    _act_ADD_TASK_AWARD: '_act_ADD_TASK_AWARD',\r\n    _act_ADD_AWARD: '_act_ADD_AWARD',\r\n    _act_SET_TASK_CONDITION_ACTIONS: '_act_SET_TASK_CONDITION_ACTIONS',\r\n    _act_SET_TASK_CONDITION_GOALS: '_act_SET_TASK_CONDITION_GOALS',\r\n    _act_SET_TASK_CONDITION_TARGET: '_act_SET_TASK_CONDITION_TARGET',\r\n    _act_SET_TASK_CONDITION_SPECIFIC_ID: '_act_SET_TASK_CONDITION_SPECIFIC_ID',\r\n    _act_SET_TASK_CONDITION_SPECIFIC_AREA: '_act_SET_TASK_CONDITION_SPECIFIC_AREA',\r\n    _act_SET_TASK_CONDITION_UNION: '_act_SET_TASK_CONDITION_UNION',\r\n    _act_SET_TASK_CONDITION_LINK: '_act_SET_TASK_CONDITION_LINK',\r\n    _act_SET_TASK_AWARD_TYPE: '_act_SET_TASK_AWARD_TYPE',\r\n    _act_SET_AWARD_TYPE: '_act_SET_AWARD_TYPE',\r\n    _act_SET_SUCCESSOR: '_act_SET_SUCCESSOR',\r\n    _act_SET_STATUS: '_act_SET_STATUS',\r\n    _act_DELETE_TASK: '_act_DELETE_TASK',\r\n    _act_DELETE_TASK_CONDITION: '_act_DELETE_TASK_CONDITION',\r\n    _act_DELETE_TASK_AWARD: '_act_DELETE_TASK_AWARD',\r\n    _act_TOGGLE_TASK_ICONS: '_act_TOGGLE_TASK_ICONS',\r\n    _act_TOGGLE_TASK_COMPLEX_CONDITION: '_act_TOGGLE_TASK_COMPLEX_CONDITION',\r\n    _act_TOGGLE_SUCCESSOR: '_act_TOGGLE_SUCCESSOR'\r\n}","import { combineReducers } from 'redux'\r\nimport C from './types'\r\nimport { v4 } from 'uuid'\r\n\r\nexport function userReducer(state = {}, action) {\r\n    switch (action.type) {\r\n        case C.SET_USER:\r\n            return action.payload.user\r\n        case C.ADD_CHAT:\r\n            return {\r\n                ...state,\r\n                chats: state.chats.map(chat => (chat.userId !== action.payload.chatId) ? ({\r\n                    chatId: action.payload.chatId\r\n                }) : chat),\r\n            }\r\n        case C.CLOSE_CHAT:\r\n            return {\r\n                ...state,\r\n                chats: state.chats.filter(chat =>\r\n                    (chat.chatId !== action.payload.chatId)\r\n                )\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport function chatReducer(state={}, { type, payload }) {\r\n    switch (type) {\r\n        case C.SET_CHAT:\r\n            return payload.chat\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport function documentReducer(state={}, { type, payload }) {\r\n    switch (type) {\r\n        case C.SET_DOCUMENT:\r\n            return payload.document\r\n        \r\n        case C._act_ADD_TASK:\r\n            return {\r\n                ...state,\r\n                tasks: [\r\n                    ...(state?.tasks || []),\r\n                    {\r\n                        id: v4(),\r\n                        title: null,\r\n                        icon: {},\r\n                        condition: [],\r\n                        awards: [],\r\n                        isDropdownIcons: false\r\n                    }\r\n                ]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport function controlReducer(state={}, { type, payload }) {\r\n    switch (type) {\r\n        case C.REGISTER_FIELD:\r\n            return {\r\n                ...state,\r\n                [payload.name]: payload.state\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport function documentsReducer(state={}, { type, payload }) {\r\n    switch (type) {\r\n        case C.SET_DOCUMENTS:\r\n            return payload.documents\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport function tableReducer(state=[], { type, payload }) {\r\n    switch(type) {\r\n        case C.SET_DATA_TABLE:\r\n            return payload.table\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport function filtersReducer(state={}, { type, payload }) {\r\n    switch(type) {\r\n        case C.SET_CURRENT_HUB:\r\n            return {\r\n                ...state,\r\n                currentHub: payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const reducers = combineReducers({\r\n    user: userReducer,\r\n    chat: chatReducer,\r\n    control: controlReducer,\r\n    document: documentReducer,\r\n    documents: documentsReducer,\r\n    table: tableReducer,\r\n    filters: filtersReducer\r\n})","export default {\r\n    user: null,\r\n    chat: null,\r\n    control: null,\r\n    document: null,\r\n    documents: [],\r\n    table: [],\r\n    filters: {\r\n        currentHub: 'all'\r\n    }\r\n}","import {\r\n    createStore,\r\n    applyMiddleware,\r\n    compose\r\n} from 'redux'\r\n\r\nimport thunk from 'redux-thunk'\r\nimport { reducers } from './utils/reducers'\r\nimport initialState from './initialState'\r\n\r\nconst env = process.env.NODE_ENV\r\n\r\nexport default (env === 'production')\r\n    ? createStore(\r\n        reducers,\r\n        initialState,\r\n        applyMiddleware(thunk)\r\n    )\r\n    : createStore(\r\n        reducers,\r\n        initialState,\r\n        compose(\r\n            applyMiddleware(thunk),\r\n            window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n        )\r\n    )","import { createContext } from 'react'\r\n\r\nfunction noop() {}\r\n\r\nexport const AuthContext = createContext({\r\n    login: noop,\r\n    logout: noop,\r\n    sessionID: null,\r\n    isAuthenticated: false\r\n})","const isDev = process.env.NODE_ENV === 'development'\r\n\r\nexport function parseLink(str) {\r\n    return str.toLowerCase().replace(' ', '-')\r\n}\r\n\r\nexport function getPage(data, limit, page) {\r\n    const start = (page * limit)\r\n    const end = (start + limit)\r\n\r\n    return data.slice(start, end)\r\n}\r\n\r\nexport function getMaxPage(data, limit) {\r\n    let arr = data\r\n    let maxPage = 0\r\n    while (arr.length > 0) {\r\n        arr = arr.slice(limit)\r\n        maxPage += 1\r\n    }\r\n\r\n    return (maxPage - 1)\r\n}\r\n\r\nexport function setCookie(name, value, expiresDays=30) {\r\n    const date = new Date()\r\n    date.setTime(date.getTime() + (expiresDays * 24*60*60*1000))\r\n    const expires = \"expires=\"+ date.toUTCString()\r\n    const domain = (isDev) ? '' : 'domain=.aidreamer.com;'\r\n\r\n    document.cookie = `${name}=${JSON.stringify(value)};${expires};${domain}path=/`\r\n}\r\n\r\nexport function getCookie(cname) {\r\n    const name = cname + \"=\"\r\n    const decodedCookie = decodeURIComponent(document.cookie)\r\n    const ca = decodedCookie.split(';')\r\n\r\n    for(var i = 0; i < ca.length; i++) {\r\n        let c = ca[i]\r\n\r\n        while (c.charAt(0) === ' ') {\r\n            c = c.substring(1)\r\n        }\r\n\r\n        if (c.indexOf(name) === 0) {\r\n            return c.substring(name.length, c.length)\r\n        }\r\n    }\r\n    return ''\r\n}\r\n\r\nexport function clearCookie(name) {\r\n    const domain = (isDev) ? '' : 'domain=.aidreamer.com;'\r\n    document.cookie = name + `=;expires=Thu, 01 Jan 1970 00:00:00 GMT; ${domain}`;\r\n}","import { useState, useCallback, useEffect } from 'react'\r\nimport { setCookie, getCookie, clearCookie } from '../utils/functions'\r\n\r\nconst cookie = 'secret'\r\n\r\nexport const useAuth = () => {\r\n  const [sessionID, setSessionID] = useState('')\r\n  const [ready, setReady] = useState(false)\r\n\r\n  const login = useCallback((value) => {\r\n    if (value) {\r\n      setSessionID(value)\r\n      setCookie(cookie, value)\r\n    }\r\n  }, [])\r\n\r\n  const logout = useCallback(() => {\r\n    setSessionID('')\r\n    clearCookie(cookie)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const session = getCookie(cookie)\r\n\r\n    if (session) setSessionID(session)\r\n    else login(session)\r\n\r\n    setReady(true)\r\n  }, [login])\r\n\r\n  return { login, logout, sessionID, ready }\r\n}","/*\r\n * COMPONENT: Row\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport '../styles/Row.css'\r\n\r\nexport default (props) => {\r\n    const Children = props.children\r\n\r\n    const classes = [\r\n        'ui-row',\r\n        props.type,\r\n        props.className\r\n    ]\r\n\r\n    return (\r\n        <div className={classes.join(' ')} style={{ ...props.style }}>\r\n            {Children}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport '../styles/Container.css'\r\n\r\nexport default (props) => {\r\n    const Children = props.children\r\n    \r\n    const classes = [\r\n        'ui-container', props.type,\r\n        (props.clear) ? 'clear' : '',\r\n        (props.sticky) ? 'sticky' : ''\r\n    ]\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            {Children}\r\n        </div>\r\n    )\r\n}","/*\r\n * COMPONENT: Alert\r\n * \r\n * MISSION: Modal content with buttons. Confirmation anything\r\n * or warnings about something\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport '../styles/Alert.css'\r\n\r\nexport default ({ type, message }) => {\r\n    const classes = [\r\n        'ui-alert',\r\n        type\r\n    ]\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            {message}\r\n        </div>\r\n    )\r\n}","/*\r\n * COMPONENT: Skeleton\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport Skeleton from 'react-skeleton-loader'\r\nimport '../styles/Skeleton.css'\r\n\r\nexport default ({ component, options }) => {\r\n    const classes = [\r\n        'ui-skeleton',\r\n        component\r\n    ]\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            <Skeleton {...options} />\r\n        </div>\r\n    )\r\n}","/*\r\n * COMPONENT: Button\r\n * \r\n * MISSION: Rendering Image with given properties\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport Ripples from 'react-ripples'\r\nimport { Link } from 'react-router-dom'\r\nimport '../styles/Button.css'\r\n\r\nconst Button = ({ type, child, classes, disabled, path, handler }) => {\r\n    const handlerClick = async (e) => {\r\n        e.preventDefault()\r\n        await handler(e)\r\n    }\r\n\r\n    if (type === 'link') {\r\n        return (\r\n            <Link\r\n                to={path}\r\n                className={classes.join(' ')}\r\n                disabled={disabled}\r\n                onClick={(handler) && handlerClick}\r\n            >\r\n\r\n            </Link>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <button\r\n            type={type}\r\n            className={classes.join(' ')}\r\n            disabled={disabled}\r\n            onClick={(handler) && handlerClick}\r\n        >\r\n            {child}\r\n        </button>\r\n    )\r\n}\r\n\r\nconst Ripple = ({ type, child, classes, disabled, path, handler }) => {\r\n    if (handler)\r\n        return (\r\n            <Ripples color=\"#afbdc4\" during={1000}>\r\n                <Button\r\n                    type={type}\r\n                    path={path}\r\n                    child={child}\r\n                    classes={classes}\r\n                    disabled={disabled}\r\n                    handler={handler}\r\n                />\r\n            </Ripples>\r\n        )\r\n\r\n    return (\r\n        <Ripples color=\"#afbdc4\" during={1000}>\r\n            <Button\r\n                type={type}\r\n                path={path}\r\n                child={child}\r\n                classes={classes}\r\n                disabled={disabled}\r\n            />\r\n        </Ripples>\r\n    )\r\n}\r\n\r\nexport default (props) => {\r\n    const Children = props.children\r\n\r\n    const {\r\n        type, state,\r\n        classNames, disabled,\r\n        handler, path\r\n    } = props.options || {}\r\n\r\n    const classes = [\r\n        'ui-button',\r\n        classNames,\r\n        state\r\n    ]\r\n\r\n    const options = {\r\n        type, path,\r\n        child: Children,\r\n        disabled\r\n    }\r\n\r\n    return (\r\n        <Ripple\r\n            {...options}\r\n            classes={classes}\r\n            handler={handler}\r\n        />\r\n    )\r\n}","import React from 'react'\r\nimport '../styles/Navigation.css'\r\n\r\nconst Block = ({ children }) =>\r\n    <div className=\"block\">{children}</div>\r\n\r\nexport default ({ options }) => {\r\n    const {\r\n        left,\r\n        right,\r\n        dashboard,\r\n        axis\r\n    } = options\r\n\r\n    const classes = [\r\n        'ui-navigation',\r\n        (dashboard) ? 'dashboard' : '',\r\n        axis\r\n    ]\r\n\r\n    const render = list => {\r\n        return list.map((item, key) =>\r\n            <React.Fragment key={key}>\r\n                {item}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            <Block>{render(left)}</Block>\r\n            <Block>{render(right)}</Block>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport '../styles/Transition.css'\r\n\r\nexport default (props) => {\r\n    const Children = props.children\r\n    const showContent = props.showContent\r\n    const animation = props.animation || 'default'\r\n    const duration = props.duration || 100\r\n    const unmountOnExit = props.unmountOnExit || true\r\n    const handlerEnter = props.handlerEnter || null\r\n    const handlerExited = props.handlerExited || null\r\n\r\n    return (\r\n        <CSSTransition\r\n            in={showContent}\r\n            timeout={duration}\r\n            classNames={animation}\r\n            onEnter={handlerEnter}\r\n            onExited={handlerExited}\r\n            unmountOnExit={unmountOnExit}\r\n        >\r\n            {Children}\r\n        </CSSTransition>\r\n    )\r\n}","/*\r\n * COMPONENT: Modal\r\n * \r\n * MISSION: Dynamic Modal with feture navigation\r\n * by pages and unlimited depths. Given Modal\r\n * haven't to need in 'react-router' or 'react-router-dom.\r\n * This custom Switch, Route and Link for scalable and\r\n * dynamical app\r\n *\r\n**/\r\n\r\nimport React, { useState } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\r\nimport Transition from './Transition'\r\nimport Button from './Button'\r\nimport '../styles/Modal.css'\r\n\r\nconst DURATION = 100\r\n\r\nfunction getPath(navigator) {\r\n    if (!navigator || navigator.length === 0)\r\n        return null\r\n\r\n    return navigator[navigator.length - 1]\r\n}\r\n\r\nconst Switch = (props) => {\r\n    const Childrens = props.children\r\n    if (!Childrens) return null\r\n    \r\n    const path = props.path\r\n\r\n    let Child = null\r\n    for (const child of Childrens) {\r\n        if (path === child.props.path) {\r\n            Child = child\r\n            break\r\n        }\r\n    }\r\n    return Child\r\n}\r\n\r\nconst Route = ({ component, close, back, jump }) => {\r\n    const Compoent = component\r\n    return <Compoent\r\n        close={close}\r\n        back={back}\r\n        jump={jump}\r\n    />\r\n}\r\n\r\nexport default ({ options }) => {\r\n    const [navigator, setNavigator] = useState(['/'])\r\n    const [content, setContent] = useState(false)\r\n    const [animation, setAnimation] = useState(null)\r\n\r\n    const {\r\n        type,\r\n        title,\r\n        home,\r\n        routes,\r\n        center,\r\n        hideModal=() => {},\r\n        closeByBackground=true\r\n    } = options\r\n\r\n    const classes = [\r\n        'ui-modal',\r\n        (center) ? 'center' : '',\r\n        type\r\n    ]\r\n\r\n    const transitions = {\r\n        fade: {\r\n            showContent: (routes) ? true : false,\r\n            animation: 'fade',\r\n            handlerEnter: () => setContent(true),\r\n            handlerExit: () => setContent(false),\r\n            duration: DURATION\r\n        },\r\n        swing: {\r\n            showContent: (content),\r\n            animation: 'swing',\r\n            duration: DURATION\r\n        }\r\n    }\r\n\r\n    const getTitle = () => {\r\n        function compare(route) {\r\n            return (route.path === getPath(navigator))\r\n        }\r\n\r\n        const title = routes?.find(route => compare(route))?.title\r\n\r\n        return title || 'Default Title'\r\n    }\r\n\r\n    const handlerBack = () => {\r\n        setAnimation('slideOutRight')\r\n        setTimeout(() => {\r\n            setNavigator([\r\n                ...navigator.filter((e, i) => (i !== (navigator.length - 1)))\r\n            ])\r\n            setAnimation('slideInLeft')\r\n        }, DURATION)\r\n    }\r\n    const handlerJump = (path) => {\r\n        setAnimation('slideOutLeft')\r\n        setTimeout(() => {\r\n            setNavigator([\r\n                ...navigator,\r\n                path\r\n            ])\r\n            setAnimation('slideInRight')\r\n        }, DURATION)\r\n    }\r\n    const handlerClose = () => {\r\n        setContent(false)\r\n        setAnimation(null)\r\n        \r\n        setTimeout(() => {\r\n            setNavigator(['/'])\r\n            hideModal()\r\n        }, DURATION)\r\n    }\r\n\r\n    return (\r\n        <Transition {...transitions.fade}>\r\n            <div className={classes.join(' ')}>\r\n                <div\r\n                    className={`background${(!closeByBackground) ? ' clear' : ''}`}\r\n                    onClick={(closeByBackground) ? handlerClose : () => {}}\r\n                ></div>\r\n\r\n                <Transition {...transitions.swing}>\r\n                    <div id='scroller' className={`wrapper animate${(animation) ? ` ${animation}` : ''}`}>\r\n                        <div className=\"headline\">\r\n                            {(navigator.length > 1) && <Button options={{\r\n                                state: 'icon',\r\n                                lockdown: true,\r\n                                handler: () => handlerBack()\r\n                            }}>\r\n                                <FontAwesomeIcon icon={faArrowLeft} />\r\n                            </Button>}\r\n                            <h1>{(title && !routes) ? title : getTitle()}</h1>\r\n                        </div>\r\n\r\n                        {(home && !routes) ? home\r\n                        : <Switch path={getPath(navigator)}>\r\n                            {routes?.map((props, key) =>\r\n                                <Route key={key} {...props} close={handlerClose} back={handlerBack} jump={handlerJump} />\r\n                            )}\r\n                        </Switch>}\r\n                    </div>\r\n                </Transition>\r\n            </div>\r\n        </Transition>\r\n    )\r\n}","/*\r\n * COMPONENT: Message\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\n\r\nimport '../styles/Message.css'\r\n\r\nexport default ({ text, padding }) => {\r\n    return (\r\n        <p\r\n            className=\"ui-message\"\r\n            style={{ padding: (padding) ? 15 : 0 }}\r\n        >{text || 'Undefined'}</p>\r\n    )\r\n}","import React from 'react'\r\nimport Container from '../ui/Container'\r\nimport Message from '../ui/Message'\r\n\r\nexport default () => {\r\n    return (\r\n        <Container>\r\n            <Message text=\"No Content\" padding />\r\n        </Container>\r\n    )\r\n}","import React from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport Skeleton from './Skeleton'\r\nimport Message from './Message'\r\nimport Row from './Row'\r\n\r\nexport default (props) => {\r\n    const { data, loading, error, refetch } = useQuery(\r\n        props.query,\r\n        { variables: props.variables }\r\n    )\r\n\r\n    const Children = props.children\r\n    const pseudo = props.pseudo\r\n\r\n    const options = {\r\n        height: `${pseudo?.height || 256}px`,\r\n        widthRandomness: 0,\r\n        heightRandomness: 0\r\n    }\r\n\r\n    const renderSkeleton = () => {\r\n        const skeletons = []\r\n\r\n        for (let i = 0; i < (pseudo?.count || 1); i++) {\r\n            skeletons.push(<Skeleton key={i} options={options} />)\r\n        }\r\n\r\n        return skeletons.map(skeleton => skeleton)\r\n    }\r\n\r\n    if (loading || !data) return (\r\n        <Row type=\"flex loader\" style={{ gridColumn: '1 / 5' }}>\r\n            {renderSkeleton()}\r\n        </Row>\r\n    )\r\n    if (error) return <Message text={error} padding />\r\n\r\n    return (\r\n        <Children data={data} refetch={refetch} />\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport { useSubscription } from '@apollo/react-hooks'\r\n\r\nexport default (props) => {\r\n    const { data } = useSubscription(\r\n        props.query,\r\n        { variables: props.variables }\r\n    )\r\n\r\n    const Children = props.children\r\n\r\n    useEffect(() => {\r\n        if (props.refetch) props.refetch()\r\n    }, [data, props])\r\n\r\n    return <Children subData={data} />\r\n}","/*\r\n * COMPONENT: List\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport '../styles/List.css'\r\n\r\nexport default (props) => {\r\n    const Children = props.children\r\n\r\n    const {\r\n        list,\r\n        type,\r\n        state={},\r\n        handler,\r\n        handlerItem,\r\n    } = props.options || {}\r\n\r\n    const classes = [\r\n        'ui-list', type,\r\n        (handler) ? ' clickable' : ''\r\n    ]\r\n\r\n    return (\r\n        <div\r\n            className={classes.join(' ')}\r\n            onClick={() => (handler) && handler()}\r\n        >\r\n            {list.map((item, key) => (\r\n                <div\r\n                    key={key}\r\n                    className={`ui-item${\r\n                        ((state.id === item.id) || item._condition) ? ' checked' : ''\r\n                    }`}\r\n                    onClick={() => (handlerItem) ? handlerItem(item) : null}\r\n                >\r\n                    <Children item={item} />\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}","const isDev = process.env.NODE_ENV === 'development'\r\n\r\nexport const config = {\r\n    proxy: {\r\n        api: (isDev) ? 'http://localhost:8000' : 'http://api.aidreamer.com',\r\n        apiWs: (isDev) ? 'ws://localhost:8000' : 'ws://api.aidreamer.com'\r\n    },\r\n    get: (key) => {\r\n        return config.proxy[key]\r\n    }\r\n}","/*\r\n * COMPONENT: Avatar\r\n * \r\n * MISSION: Rendering Image with given properties\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport '../styles/Avatar.css'\r\nimport { config } from '../../utils/config'\r\n\r\nconst api = config.get('api')\r\n\r\nexport default ({ avatar, properties=[] }) => {\r\n    const classes = [\r\n        'ui-avatar',\r\n        ...properties\r\n    ]\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            <img src={(avatar?.path || '').replace('./', `${api}/`)} alt=\"Avatar\" />\r\n        </div>\r\n    )\r\n}","import gql from 'graphql-tag'\r\n\r\n// BEGIN USER\r\nexport const LOGIN = gql`\r\n    mutation login(\r\n        $name: String!\r\n        $password: String!\r\n        $area: String\r\n    ) {\r\n        login(\r\n            name: $name\r\n            password: $password\r\n            area: $area\r\n        ) {\r\n            id\r\n            name\r\n            email\r\n            phone\r\n            role {\r\n                name\r\n            }\r\n            balance\r\n            level\r\n            experience\r\n            avatar {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            availableAvatars {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            preferences {\r\n                id\r\n                title\r\n                color\r\n                slogan\r\n                icon {\r\n                    name\r\n                    path\r\n                }\r\n            }\r\n            sessionID\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const REGISTER = gql`\r\n    mutation register(\r\n        $name: String!\r\n        $email: String!\r\n        $password: String!\r\n        $confirmPassword: String!\r\n        $phone: String\r\n        $role: ID\r\n        $avatar: ID\r\n    ) {\r\n        register(\r\n            registerInput: {\r\n                name: $name\r\n                email: $email\r\n                password: $password\r\n                confirmPassword: $confirmPassword\r\n                phone: $phone\r\n                role: $role\r\n                avatar: $avatar\r\n            }\r\n        ) {\r\n            name\r\n            email\r\n            phone\r\n            role {\r\n                name\r\n            }\r\n            balance\r\n            level\r\n            experience\r\n            avatar {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            availableAvatars {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            preferences {\r\n                id\r\n                title\r\n                color\r\n                slogan\r\n                icon {\r\n                    name\r\n                    path\r\n                }\r\n            }\r\n            sessionID\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const GET_ALL_USERS = gql`\r\n    query allUsers {\r\n        allUsers {\r\n            name\r\n            email\r\n            phone\r\n            role {\r\n                name\r\n            }\r\n            balance\r\n            level\r\n            experience\r\n            avatar {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            availableAvatars {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            preferences {\r\n                id\r\n                title\r\n                color\r\n                slogan\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_USERS = gql`\r\n    subscription users {\r\n        users {\r\n            name\r\n            email\r\n            phone\r\n            role {\r\n                name\r\n            }\r\n            balance\r\n            level\r\n            experience\r\n            avatar {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            availableAvatars {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            preferences {\r\n                id\r\n                title\r\n                color\r\n                slogan\r\n                icon {\r\n                    name\r\n                    path\r\n                }\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const GET_USER = gql`\r\n    query getUser {\r\n        getUser {\r\n            name\r\n            password\r\n            email\r\n            phone\r\n            role {\r\n                name\r\n            }\r\n            balance\r\n            level\r\n            experience\r\n            avatar {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            availableAvatars {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            preferences {\r\n                id\r\n                title\r\n                color\r\n                slogan\r\n                icon {\r\n                    name\r\n                    path\r\n                }\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const EDIT_USER = gql`\r\n    mutation editUser(\r\n        $name: String\r\n        $email: String\r\n        $password: String\r\n        $phone: String\r\n        $role: ID\r\n        $balance: Int\r\n        $level: Int\r\n        $avatar: ID\r\n        $availableAvatars: [ID]\r\n        $experience: Int\r\n        $preferences: [ID]\r\n        $settings: [Setting]\r\n    ) {\r\n        editUser(\r\n            name: $name\r\n            email: $email\r\n            password: $password\r\n            phone: $phone\r\n            role: $role\r\n            balance: $balance\r\n            level: $level\r\n            avatar: $avatar\r\n            availableAvatars: $availableAvatars\r\n            experience: $experience\r\n            preferences: $preferences\r\n            settings: $settings\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_USERS = gql`\r\n    mutation deleteUsers(\r\n        $names: [String]\r\n    ) {\r\n        deleteUsers(names: $names)\r\n    }\r\n`\r\n\r\n// BEGIN STATS\r\nexport const GET_USER_COUNT_POSTS = gql`\r\n    query countUserPosts {\r\n        countUserPosts\r\n    }\r\n`\r\n\r\nexport const GET_STATS = gql`\r\n    query allStats {\r\n        countUsers\r\n        countPosts\r\n        countComments\r\n        countHubs\r\n    }\r\n`\r\n\r\nexport const GET_ALL_RARITIES = gql`\r\n    query allRarities {\r\n        allRarities\r\n    }\r\n`\r\n\r\nexport const GET_ALL_STATUS = gql`\r\n    query allStatus {\r\n        allStatus\r\n    }\r\n`\r\n// END STATS\r\n\r\n// BEGIN CHAT\r\nexport const GET_ALL_CHAT_TYPES = gql`\r\n    query allChatTypes {\r\n        allChatTypes\r\n    }\r\n`\r\n\r\nexport const ADD_CHAT = gql`\r\n    mutation addChat(\r\n        $type: ChatType!\r\n        $title: String!\r\n        $members: [String]!\r\n    ) {\r\n        addChat (\r\n            type: $type\r\n            title: $title\r\n            members: $members\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_CHAT = gql`\r\n    mutation editChat(\r\n        $id: ID!\r\n        $type: ChatType\r\n        $title: String\r\n        $members: [String]\r\n    ) {\r\n        editChat (\r\n            id: $id\r\n            type: $type\r\n            title: $title\r\n            members: $members\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_CHATS = gql`\r\n    mutation deleteChats(\r\n        $id: [ID]!\r\n    ) {\r\n        deleteChats (\r\n            id: $id\r\n        )\r\n    }\r\n`\r\n\r\nexport const GET_ALL_CHATS = gql`\r\n    query allChats {\r\n        allChats {\r\n            id\r\n            type\r\n            title\r\n            members {\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            messages {\r\n                user {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                text\r\n                type\r\n                updatedAt\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_CHATS = gql`\r\n    subscription chats {\r\n        chats {\r\n            id\r\n            type\r\n            title\r\n            members {\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            messages {\r\n                user {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                text\r\n                type\r\n                updatedAt\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_USER_CHATS = gql`\r\n    mutation deleteUserChats(\r\n        $id: [ID]!\r\n    ) {\r\n        deleteUserChats(\r\n            id: $id\r\n        )\r\n    }\r\n`\r\n\r\nexport const GET_USER_CHATS = gql`\r\n    query allUserChats {\r\n        allUserChats {\r\n            id\r\n            chat {\r\n                id\r\n                type\r\n                title\r\n                members {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                messages {\r\n                    user {\r\n                        name\r\n                        avatar {\r\n                            path\r\n                        }\r\n                    }\r\n                    text\r\n                    type\r\n                    updatedAt\r\n                    createdAt\r\n                }\r\n            }\r\n            interlocutor {\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const GET_CHAT_MESSAGES = gql`\r\n    query allChatMessages(\r\n        $id: ID!\r\n    ) {\r\n        allChatMessages(\r\n            id: $id\r\n        ) {\r\n            user {\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            text\r\n            type\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_USER_CHATS = gql`\r\n    subscription userChats(\r\n        $name: String!\r\n    ) {\r\n        userChats(\r\n            name: $name\r\n        ) {\r\n            id\r\n            chat {\r\n                id\r\n                type\r\n                title\r\n                members {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                messages {\r\n                    user {\r\n                        name\r\n                        avatar {\r\n                            path\r\n                        }\r\n                    }\r\n                    text\r\n                    type\r\n                    updatedAt\r\n                    createdAt\r\n                }\r\n            }\r\n            interlocutor {\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_MESSAGES = gql`\r\n    subscription messages(\r\n        $id: ID!\r\n    ) {\r\n        messages(\r\n            id: $id\r\n        ) {\r\n            user {\r\n                name\r\n                avatar {\r\n                    id\r\n                    path\r\n                }\r\n            }\r\n            text\r\n            type\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const OPEN_USER_CHAT = gql`\r\n    mutation openUserChat(\r\n        $name: String!\r\n        $type: ChatType\r\n    ) {\r\n        openUserChat(\r\n            name: $name\r\n            type: $type\r\n        ) {\r\n            id\r\n            chat {\r\n                id\r\n                title\r\n                members {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                messages {\r\n                    user {\r\n                        name\r\n                        avatar {\r\n                            path\r\n                        }\r\n                    }\r\n                    text\r\n                    type\r\n                    updatedAt\r\n                    createdAt\r\n                }\r\n            }\r\n            interlocutor {\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_USER_CHAT_MESSAGE = gql`\r\n    mutation addUserChatMessage(\r\n        $id: ID!\r\n        $text: String!\r\n    ) {\r\n        addUserChatMessage(\r\n            id: $id\r\n            text: $text\r\n        )\r\n    }\r\n`\r\n// END CHAT\r\n\r\nexport const SUB_NOTIFICATIONS = gql`\r\n    subscription userNotifications(\r\n        $name: String!\r\n    ) {\r\n        userNotifications(\r\n            name: $name\r\n        )  {\r\n            id\r\n            text\r\n            user {\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const GET_USER_NOTIFICATIONS = gql`\r\n    query allUserNotifications {\r\n        allUserNotifications {\r\n            id\r\n            text\r\n            user {\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n// END USER\r\n\r\n// BEGIN ACT\r\nexport const GET_USER_ACTS = gql`\r\n    query allUserActs {\r\n        allUserActs {\r\n            id\r\n            act {\r\n                id\r\n                title\r\n                description\r\n                tasks {\r\n                    id\r\n                    title\r\n                    icon {\r\n                        id\r\n                        path\r\n                    }\r\n                    translation\r\n                    condition {\r\n                        id\r\n                        action\r\n                        target\r\n                        goals\r\n                        multiply\r\n                        specific {\r\n                            id\r\n                            area\r\n                        }\r\n                        union\r\n                        link {\r\n                            id\r\n                            action\r\n                        }\r\n                    }\r\n                    awards {\r\n                        id\r\n                        award\r\n                        quantity\r\n                    }\r\n                    createdAt\r\n                }\r\n                awards {\r\n                    id\r\n                    award\r\n                    quantity\r\n                }\r\n                successor {\r\n                    id\r\n                    title\r\n                }\r\n                status\r\n                updatedAt\r\n                createdAt\r\n            }\r\n            tasks {\r\n                task {\r\n                    id\r\n                    title\r\n                }\r\n                status\r\n            }\r\n            status\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_USER_ACTS = gql`\r\n    subscription userActs {\r\n        userActs {\r\n            act {\r\n                id\r\n                title\r\n                description\r\n                tasks {\r\n                    id\r\n                    title\r\n                    icon {\r\n                        id\r\n                        path\r\n                    }\r\n                    translation\r\n                    condition {\r\n                        id\r\n                        action\r\n                        target\r\n                        goals\r\n                        multiply\r\n                        specific {\r\n                            id\r\n                            area\r\n                        }\r\n                        union\r\n                        link {\r\n                            id\r\n                            action\r\n                        }\r\n                    }\r\n                    awards {\r\n                        id\r\n                        award\r\n                        quantity\r\n                    }\r\n                    createdAt\r\n                }\r\n                awards {\r\n                    id\r\n                    award\r\n                    quantity\r\n                }\r\n                successor {\r\n                    id\r\n                    title\r\n                }\r\n                status\r\n                updatedAt\r\n                createdAt\r\n            }\r\n            tasks {\r\n                task {\r\n                    id\r\n                    title\r\n                }\r\n                status\r\n            }\r\n            status\r\n        }\r\n    }\r\n`\r\n\r\nexport const GET_ALL_ACTS = gql`\r\n    query allActs {\r\n        allActs {\r\n            id\r\n            title\r\n            description\r\n            tasks {\r\n                id\r\n                title\r\n                icon {\r\n                    id\r\n                    path\r\n                }\r\n                translation\r\n                condition {\r\n                    id\r\n                    action\r\n                    target\r\n                    goals\r\n                    multiply\r\n                    specific {\r\n                        id\r\n                        area\r\n                    }\r\n                    union\r\n                    link {\r\n                        id\r\n                        action\r\n                    }\r\n                }\r\n                awards {\r\n                    id\r\n                    award\r\n                    quantity\r\n                }\r\n                createdAt\r\n            }\r\n            awards {\r\n                id\r\n                award\r\n                quantity\r\n            }\r\n            successor {\r\n                id\r\n                title\r\n            }\r\n            isSource\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_ACTS = gql`\r\n    subscription acts {\r\n        acts {\r\n            id\r\n            title\r\n            description\r\n            tasks {\r\n                id\r\n                title\r\n                icon {\r\n                    id\r\n                    path\r\n                }\r\n                translation\r\n                condition {\r\n                    action\r\n                    target\r\n                    goals\r\n                    multiply\r\n                    specific {\r\n                        id\r\n                        area\r\n                    }\r\n                    union\r\n                    link {\r\n                        id\r\n                        action\r\n                    }\r\n                }\r\n                awards {\r\n                    id\r\n                    award\r\n                    quantity\r\n                }\r\n                createdAt\r\n            }\r\n            awards {\r\n                id\r\n                award\r\n                quantity\r\n            }\r\n            successor {\r\n                id\r\n                title\r\n            }\r\n            isSource\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_ACT = gql`\r\n    mutation addAct(\r\n        $title: String!\r\n        $description: String!\r\n        $tasks: [InputActTask]!\r\n        $awards: [InputAward]\r\n        $successor: ID\r\n        $isSource: Boolean\r\n        $status: Status!\r\n    ) {\r\n        addAct(\r\n            title: $title\r\n            description: $description\r\n            tasks: $tasks\r\n            awards: $awards\r\n            successor: $successor\r\n            isSource: $isSource\r\n            status: $status\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_ACT = gql`\r\n    mutation editAct(\r\n        $id: ID!\r\n        $title: String\r\n        $description: String\r\n        $tasks: [InputActTask]\r\n        $awards: [InputAward]\r\n        $successor: ID\r\n        $isSource: Boolean\r\n        $status: Status\r\n    ) {\r\n        editAct(\r\n            id: $id\r\n            title: $title\r\n            description: $description\r\n            tasks: $tasks\r\n            awards: $awards\r\n            successor: $successor\r\n            isSource: $isSource\r\n            status: $status\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_ACTS = gql`\r\n    mutation deleteActs(\r\n        $id: [ID]!\r\n    ) {\r\n        deleteActs(id: $id)\r\n    }\r\n`\r\n\r\nexport const GET_ALL_AWARDS = gql`\r\n    query allAwardTypes {\r\n        allAwardTypes\r\n    }\r\n`\r\n\r\nexport const GET_ALL_CONDITION_ENUMS = gql`\r\n    query allEnums {\r\n        allAwardTypes\r\n        allActions\r\n        allGoals\r\n        allUnions\r\n        allAreas\r\n    }\r\n`\r\n// END ACT\r\n\r\n// BEGIN HUB\r\nexport const GET_ALL_HUBS = gql`\r\n    query allHubs($status: Status) {\r\n        allHubs(status: $status) {\r\n            id\r\n            title\r\n            description\r\n            slogan\r\n            icon {\r\n                id\r\n                name\r\n                path\r\n            }\r\n            color\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_HUBS = gql`\r\n    subscription hubs(\r\n        $status: Status\r\n    ) {\r\n        hubs(\r\n            status: $status\r\n        ) {\r\n            id\r\n            title\r\n            description\r\n            slogan\r\n            icon {\r\n                path\r\n            }\r\n            color\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_HUB = gql`\r\n    mutation addHub(\r\n        $title: String!\r\n        $description: String!\r\n        $slogan: String!\r\n        $color: String\r\n        $icon: ID\r\n        $status: Status!\r\n    ) {\r\n        addHub(\r\n            title: $title\r\n            description: $description\r\n            slogan: $slogan\r\n            color: $color\r\n            icon: $icon\r\n            status: $status\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_HUB = gql`\r\n    mutation editHub(\r\n        $id: ID!\r\n        $title: String\r\n        $description: String\r\n        $slogan: String\r\n        $color: String\r\n        $icon: ID\r\n        $status: Status\r\n    ) {\r\n        editHub(\r\n            id: $id\r\n            title: $title\r\n            description: $description\r\n            slogan: $slogan\r\n            color: $color\r\n            icon: $icon\r\n            status: $status\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_HUBS = gql`\r\n    mutation deleteHubs(\r\n        $id: [ID]\r\n    ) {\r\n        deleteHubs(id: $id)\r\n    }\r\n`\r\n// END HUB\r\n\r\n// BEGIN POST\r\nexport const GET_ALL_POST_TYPES = gql`\r\n    query allPostTypes {\r\n        allPostTypes\r\n    }\r\n`\r\n\r\nexport const GET_USER_POSTS = gql`\r\n    query allUserPosts {\r\n        allUserPosts {\r\n            id\r\n            type\r\n            author {\r\n                id\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            title\r\n            subtitle\r\n            description\r\n            content\r\n            preview {\r\n                path\r\n            }\r\n            views\r\n            comments {\r\n                id\r\n                user {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                text\r\n                updatedAt\r\n                createdAt\r\n            }\r\n            hub {\r\n                id\r\n                title\r\n                color\r\n            }\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const GET_ALL_POSTS = gql`\r\n    query allPosts($status: Status, $type: PostType) {\r\n        allPosts(status: $status, type: $type) {\r\n            id\r\n            type\r\n            author {\r\n                id\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            title\r\n            subtitle\r\n            description\r\n            content\r\n            preview {\r\n                path\r\n            }\r\n            views\r\n            comments {\r\n                id\r\n                user {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                text\r\n                updatedAt\r\n                createdAt\r\n            }\r\n            hub {\r\n                id\r\n                title\r\n                color\r\n            }\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_USER_POSTS = gql`\r\n    subscription userPosts(\r\n        $name: String!\r\n        $type: PostType\r\n    ) {\r\n        userPosts(\r\n            name: $name\r\n            type: $type\r\n        ) {\r\n            id\r\n            type\r\n            author {\r\n                id\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            title\r\n            subtitle\r\n            description\r\n            content\r\n            preview {\r\n                path\r\n            }\r\n            views\r\n            comments {\r\n                id\r\n                user {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                text\r\n                updatedAt\r\n                createdAt\r\n            }\r\n            hub {\r\n                id\r\n                title\r\n                color\r\n            }\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_POSTS = gql`\r\n    subscription posts(\r\n        $status: Status\r\n        $type: PostType\r\n    ) {\r\n        posts(\r\n            status: $status\r\n            type: $type\r\n        ) {\r\n            \r\n            id\r\n            type\r\n            author {\r\n                id\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            title\r\n            subtitle\r\n            description\r\n            content\r\n            preview {\r\n                path\r\n            }\r\n            views\r\n            comments {\r\n                id\r\n                user {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                text\r\n                updatedAt\r\n                createdAt\r\n            }\r\n            hub {\r\n                id\r\n                title\r\n                color\r\n            }\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const GET_POST = gql`\r\n    query getPost(\r\n        $id: ID!\r\n        $type: PostType\r\n    ) {\r\n        getPost(\r\n            id: $id\r\n            type: $type\r\n        ) {\r\n            id\r\n            type\r\n            author {\r\n                id\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            title\r\n            subtitle\r\n            description\r\n            content\r\n            preview {\r\n                path\r\n            }\r\n            views\r\n            comments {\r\n                id\r\n                user {\r\n                    name\r\n                    avatar {\r\n                        path\r\n                    }\r\n                }\r\n                text\r\n                updatedAt\r\n                createdAt\r\n            }\r\n            hub {\r\n                id\r\n                title\r\n                color\r\n            }\r\n            status\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_POST = gql`\r\n    mutation addPost(\r\n        $author: ID\r\n        $type: PostType!\r\n        $title: String!\r\n        $subtitle: String\r\n        $description: String\r\n        $content: String\r\n        $preview: Upload\r\n        $hub: ID\r\n        $views: Int\r\n        $comments: [InputComment]\r\n        $status: Status!\r\n    ) {\r\n        addPost(\r\n            author: $author\r\n            type: $type\r\n            title: $title\r\n            subtitle: $subtitle\r\n            description: $description\r\n            content: $content\r\n            preview: $preview\r\n            hub: $hub\r\n            views: $views\r\n            comments: $comments\r\n            status: $status\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_POST = gql`\r\n    mutation editPost(\r\n        $id: ID!\r\n        $author: ID\r\n        $type: PostType\r\n        $title: String\r\n        $subtitle: String\r\n        $description: String\r\n        $content: String\r\n        $preview: Upload\r\n        $hub: ID\r\n        $views: Int\r\n        $comments: [InputComment]\r\n        $status: Status\r\n    ) {\r\n        editPost(\r\n            author: $author\r\n            type: $type\r\n            title: $title\r\n            subtitle: $subtitle\r\n            description: $description\r\n            content: $content\r\n            preview: $preview\r\n            hub: $hub\r\n            views: $views\r\n            comments: $comments\r\n            status: $status\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_POSTS = gql`\r\n    mutation deletePosts(\r\n        $posts: [InputPost]\r\n    ) {\r\n        deletePosts(posts: $posts)\r\n    }\r\n`\r\n\r\nexport const SUB_COMMENTS = gql`\r\n    subscription comments(\r\n        $id: ID!\r\n    ) {\r\n        comments(\r\n            id: $id\r\n        ) {\r\n            id\r\n            user {\r\n                name\r\n                avatar {\r\n                    path\r\n                }\r\n            }\r\n            text\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_COMMENT = gql`\r\n    mutation addComment(\r\n        $post: ID!\r\n        $text: String!\r\n    ) {\r\n        addComment(\r\n            post: $post\r\n            text: $text\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_COMMENT = gql`\r\n    mutation editComment(\r\n        $id: ID!\r\n        $post: ID\r\n        $user: ID\r\n        $text: String\r\n    ) {\r\n        editComment(\r\n            id: $id\r\n            post: $post\r\n            user: $user\r\n            text: $text\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELTE_COMMENTS = gql`\r\n    mutation deleteComments(\r\n        $id: [ID]!\r\n        $post: ID!\r\n    ) {\r\n        deleteComments(\r\n            id: $id\r\n            post: $post\r\n        )\r\n    }\r\n`\r\n// END POST\r\n\r\n// BEGIN ROLE\r\nexport const GET_ALL_ROLES = gql`\r\n    query allRoles {\r\n        allRoles {\r\n            id\r\n            name\r\n            permissions\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_ROLE = gql`\r\n    mutation addRole(\r\n        $name: String!\r\n        $permissions: [Permission!]!\r\n    ) {\r\n        addRole(\r\n            name: $name\r\n            permissions: $permissions\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_ROLE = gql`\r\n    mutation editRole(\r\n        $id: ID!\r\n        $name: String!\r\n        $permissions: [Permission]\r\n    ) {\r\n        editRole(\r\n            id: $id\r\n            name: $name\r\n            permissions: $permissions\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_ROLES = gql`\r\n    mutation deleteRoles($id: [ID]!) {\r\n        deleteRoles(id: $id)\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_ROLES = gql`\r\n    subscription roles {\r\n        roles {\r\n            id\r\n            name\r\n            permissions\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n// END ROLE\r\n\r\n// BEGIN PERMITIONS\r\nexport const GET_ALL_PERMITIONS = gql`\r\n    query allPermissions {\r\n        allPermissions\r\n    }\r\n`\r\n// END PERMITIONS\r\n\r\n// BEGIN IMAGES\r\nexport const GET_ALL_IMAGES = gql`\r\n    query allImages {\r\n        allImages {\r\n            id\r\n            path\r\n            name\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_IMAGES = gql`\r\n    subscription images {\r\n        images {\r\n            id\r\n            name\r\n            path\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_IMAGE = gql`\r\n    mutation addImage(\r\n        $file: Upload!\r\n    ) {\r\n        addImage(\r\n            file: $file\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_IMAGE = gql`\r\n    mutation editImage(\r\n        $id: ID!\r\n        $file: Upload\r\n    ) {\r\n        editImage(\r\n            id: $id\r\n            file: $file\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_IMAGES = gql`\r\n    mutation deleteImages(\r\n        $id: [ID]!\r\n    ) {\r\n        deleteImages(\r\n            id: $id\r\n        )\r\n    }\r\n`\r\n// END IMAGES\r\n\r\n// BEGIN AVATARS\r\nexport const GET_ALL_AVATARS = gql`\r\n    query allAvatars {\r\n        allAvatars {\r\n            id\r\n            path\r\n            name\r\n            rarity\r\n            hub {\r\n                id\r\n                title\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_AVATARS = gql`\r\n    subscription avatars {\r\n        avatars {\r\n            id\r\n            path\r\n            name\r\n            rarity\r\n            hub {\r\n                id\r\n                title\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_AVATAR = gql`\r\n    mutation addAvatar(\r\n        $file: Upload!\r\n        $rarity: Rarity!\r\n        $hub: ID!\r\n    ) {\r\n        addAvatar(\r\n            file: $file\r\n            rarity: $rarity\r\n            hub: $hub\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_AVATAR = gql`\r\n    mutation editAvatar(\r\n        $id: ID!\r\n        $file: Upload\r\n        $rarity: Rarity\r\n        $hub: ID\r\n    ) {\r\n        editAvatar(\r\n            id: $id\r\n            file: $file\r\n            rarity: $rarity\r\n            hub: $hub\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_AVATARS = gql`\r\n    mutation deleteAvatars(\r\n        $id: [ID]!\r\n    ) {\r\n        deleteAvatars(\r\n            id: $id\r\n        )\r\n    }\r\n`\r\n// END AVATARS\r\n\r\n// BEGIN ICONS\r\nexport const GET_ALL_ICON_TYPES = gql`\r\n    query allIconTypes {\r\n        allIconTypes\r\n    }\r\n`\r\n\r\nexport const GET_ALL_ICONS = gql`\r\n    query allIcons {\r\n        allIcons {\r\n            id\r\n            path\r\n            name\r\n            type\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_ICONS = gql`\r\n    subscription icons {\r\n        icons {\r\n            id\r\n            path\r\n            name\r\n            type\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_ICON = gql`\r\n    mutation addIcon(\r\n        $file: Upload!\r\n        $type: IconType!\r\n    ) {\r\n        addIcon(\r\n            file: $file\r\n            type: $type\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_ICON = gql`\r\n    mutation editIcon(\r\n        $id: ID!\r\n        $file: Upload\r\n        $type: IconType\r\n    ) {\r\n        editIcon(\r\n            id: $id\r\n            file: $file\r\n            type: $type\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_ICONS = gql`\r\n    mutation deleteIcons(\r\n        $id: [ID]!\r\n    ) {\r\n        deleteIcons(\r\n            id: $id\r\n        )\r\n    }\r\n`\r\n// END ICONS\r\n\r\n// BEGIN LANGUAGE\r\nexport const GET_ALL_LANGUAGES = gql`\r\n    query allLanguages {\r\n        allLanguages {\r\n            id\r\n            code\r\n            title\r\n            flag {\r\n                id\r\n                path\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const SUB_ALL_LANGUAGES = gql`\r\n    subscription languages {\r\n        languages {\r\n            id\r\n            code\r\n            title\r\n            flag {\r\n                id\r\n                path\r\n            }\r\n            updatedAt\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_LANGUAGE = gql`\r\n    mutation addLanguage(\r\n        $code: String!\r\n        $title: String!\r\n        $flag: ID!\r\n    ) {\r\n        addLanguage(\r\n            code: $code\r\n            title: $title\r\n            flag: $flag\r\n        )\r\n    }\r\n`\r\n\r\nexport const EDIT_LANGUAGE = gql`\r\n    mutation editLanguage(\r\n        $id: ID!\r\n        $code: String\r\n        $title: String\r\n        $flag: ID\r\n    ) {\r\n        editLanguage(\r\n            id: $id\r\n            code: $code\r\n            title: $title\r\n            flag: $flag\r\n        )\r\n    }\r\n`\r\n\r\nexport const DELETE_LANGUAGES = gql`\r\n    mutation deleteLanguages(\r\n        $id: [ID]!\r\n    ) {\r\n        deleteLanguages(\r\n            id: $id\r\n        )\r\n    }\r\n`\r\n// END LANGUAGE","import React from 'react'\r\nimport Moment from 'react-moment'\r\nimport Container from '../ui/Container'\r\nimport Query from '../ui/Query'\r\nimport Subscription from '../ui/Subscription'\r\nimport Message from '../ui/Message'\r\nimport List from '../ui/List'\r\nimport Avatar from '../ui/Avatar'\r\n\r\nimport {\r\n    GET_USER_NOTIFICATIONS,\r\n    SUB_NOTIFICATIONS\r\n} from '../../utils/queries'\r\n\r\nexport default () => {\r\n    return (\r\n        <Container>\r\n            <Query query={GET_USER_NOTIFICATIONS} pseudo={{ height: 45, count: 6 }}>\r\n                {({ data, refetch }) => (\r\n                    <Subscription query={SUB_NOTIFICATIONS} refetch={refetch}>\r\n                        {({ subData }) => {\r\n                            const notifications = ((subData && subData.notifications) || data.allUserNotifications)\r\n\r\n                            if (notifications.length === 0)\r\n                                return <Message text=\"Empty\" padding />\r\n\r\n                            return (\r\n                                (notifications.length > 0) ?\r\n                                <List options={{ list: notifications }}>\r\n                                    {({ item }) => (\r\n                                        <React.Fragment>\r\n                                            <Avatar avatar={{ path: item?.user?.avatar?.path }} properties={['circle']} />\r\n                                            <p className=\"name\">{item.text}</p>\r\n                                            <p className=\"date\">\r\n                                                <Moment date={new Date(new Date().setTime(item.createdAt))} format=\"h:m\" />\r\n                                            </p>\r\n                                        </React.Fragment>\r\n                                    )}\r\n                                </List> :\r\n                                <Message text=\"No Comments\" padding />\r\n                            )\r\n                        }}\r\n                    </Subscription>\r\n                )}\r\n            </Query>\r\n        </Container>\r\n    )\r\n}","import C from './types'\r\n\r\nexport function setUser(user) {\r\n    return {\r\n        type: C.SET_USER,\r\n        payload: {\r\n            user: (user?.name) ? user : null\r\n        }\r\n    }\r\n}\r\n\r\nexport function setForm(form) {\r\n    return {\r\n        type: C.SET_FORM,\r\n        payload: {\r\n            form\r\n        }\r\n    }\r\n}\r\n\r\nexport function setChat(chat) {\r\n    return {\r\n        type: C.SET_CHAT,\r\n        payload: {\r\n            chat\r\n        }\r\n    }\r\n}\r\n\r\nexport function setCurrentHub(hub) {\r\n    return {\r\n        type: C.SET_CURRENT_HUB,\r\n        payload: hub\r\n    }\r\n}\r\n\r\nexport function closeChat(chatId) {\r\n    return {\r\n        type: C.CLOSE_CHAT,\r\n        payload: {\r\n            chatId\r\n        }\r\n    }\r\n}\r\n\r\nexport function addMember(chatId, user) {\r\n    return {\r\n        type: C.ADD_MEMBER,\r\n        payload: {\r\n            chatId, user\r\n        }\r\n    }\r\n}\r\n\r\nexport function newMessage(userId, chatId, message) {\r\n    return {\r\n        type: C.NEW_MESSAGE,\r\n        payload: {\r\n            userId, chatId, message\r\n        }\r\n    }\r\n}\r\n\r\nexport function setDocument(document) {\r\n    return {\r\n        type: C.SET_DOCUMENT,\r\n        payload: {\r\n            document\r\n        }\r\n    }\r\n}\r\n\r\nexport function setDocuments(documents) {\r\n    return {\r\n        type: C.SET_DOCUMENTS,\r\n        payload: {\r\n            documents\r\n        }\r\n    }\r\n}\r\n\r\nexport function setDataTable(table) {\r\n    return {\r\n        type: C.SET_DATA_TABLE,\r\n        payload: {\r\n            table\r\n        }\r\n    }\r\n}\r\n\r\nexport function registerField(name, state) {\r\n    return {\r\n        type: C.REGISTER_FIELD,\r\n        payload: {\r\n            name, state\r\n        }\r\n    }\r\n}\r\n\r\nexport function _act_AddTask() {\r\n    return {\r\n        type: C._act_ADD_TASK\r\n    }\r\n}\r\n\r\nexport function _act_AddTaskIcon() {\r\n    return {\r\n        type: C._act_ADD_TASK_ICON\r\n    }\r\n}\r\n\r\nexport function _act_AddTaskCondition() {\r\n    return {\r\n        type: C._act_ADD_TASK_CONDITION\r\n    }\r\n}\r\n\r\nexport function _act_AddTaskAward() {\r\n    return {\r\n        type: C._act_ADD_TASK_AWARD\r\n    }\r\n}\r\n\r\nexport function _act_AddAward() {\r\n    return {\r\n        type: C._act_ADD_AWARD\r\n    }\r\n}\r\n\r\nexport function _act_SetTaskConditionAction() {\r\n    return {\r\n        type: C._act_SET_TASK_CONDITION_ACTIONS\r\n    }\r\n}\r\n\r\nexport function _act_SetTaskConditionGoals() {\r\n    return {\r\n        type: C._act_SET_TASK_CONDITION_GOALS\r\n    }\r\n}\r\n\r\nexport function _act_SetTaskConditionTarget() {\r\n    return {\r\n        type: C._act_SET_TASK_CONDITION_TARGET\r\n    }\r\n}\r\n\r\nexport function _act_SetTaskConditionSpecificId() {\r\n    return {\r\n        type: C._act_SET_TASK_CONDITION_SPECIFIC_ID\r\n    }\r\n}\r\n\r\nexport function _act_SetTaskConditionSpecificArea() {\r\n    return {\r\n        type: C._act_SET_TASK_CONDITION_SPECIFIC_AREA\r\n    }\r\n}\r\n\r\nexport function _act_SetTaskConditionUnion() {\r\n    return {\r\n        type: C._act_SET_TASK_CONDITION_UNION\r\n    }\r\n}\r\n\r\nexport function _act_SetTaskConditionLink() {\r\n    return {\r\n        type: C._act_SET_TASK_CONDITION_LINK\r\n    }\r\n}\r\n\r\nexport function _act_SetTaskAwardType() {\r\n    return {\r\n        type: C._act_SET_TASK_AWARD_TYPE\r\n    }\r\n}\r\n\r\nexport function _act_SetAwardType() {\r\n    return {\r\n        type: C._act_SET_AWARD_TYPE\r\n    }\r\n}\r\n\r\nexport function _act_SetSuccessor() {\r\n    return {\r\n        type: C._act_SET_SUCCESSOR\r\n    }\r\n}\r\n\r\nexport function _act_SetStatus() {\r\n    return {\r\n        type: C._act_SET_STATUS\r\n    }\r\n}\r\n\r\nexport function _act_DeleteTask() {\r\n    return {\r\n        type: C._act_DELETE_TASK\r\n    }\r\n}\r\n\r\nexport function _act_DeleteTaskCondition() {\r\n    return {\r\n        type: C._act_DELETE_TASK_CONDITION\r\n    }\r\n}\r\n\r\nexport function _act_DeleteTaskAward() {\r\n    return {\r\n        type: C._act_DELETE_TASK_AWARD\r\n    }\r\n}\r\n\r\nexport function _act_ToggleTaskIcons() {\r\n    return {\r\n        type: C._act_TOGGLE_TASK_ICONS\r\n    }\r\n}\r\n\r\nexport function _act_ToggleTaskComplexCondition() {\r\n    return {\r\n        type: C._act_TOGGLE_TASK_COMPLEX_CONDITION\r\n    }\r\n}\r\n\r\nexport function _act_ToggleSuccessor() {\r\n    return {\r\n        type: C._act_TOGGLE_SUCCESSOR\r\n    }\r\n}","import React from 'react'\r\n\r\nexport default <svg width=\"45\" height=\"46\" viewBox=\"0 0 45 46\" aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"compass\" className=\"svg-inline--fa fa-compass fa-w-16 \" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\">\r\n<path d=\"M16.6846 22.3792L21.2298 27.5366L7.34159 44.3618C7.34159 44.3618 4.90063 47.4901 2.12299 45.0382C-0.654655 42.5863 2.12299 39.7962 2.12299 39.7962L5.82653 35.4842C5.82653 35.4842 4.2174 33.8194 3.13306 32.6941C2.04873 31.5688 1.02879 30.0731 1.02879 30.0731C1.02879 30.0731 -1.49632 26.6066 1.36548 24.5774C4.22728 22.5483 5.65819 25.1693 7.34162 27.0293C9.02505 28.8894 10.2876 30.0731 10.2876 30.0731L16.6846 22.3792Z\" fill=\"black\"/>\r\n<path d=\"M18.368 34.1314C18.368 34.1314 20.2198 34.8924 23.5025 34.6387C26.7851 34.3851 28.8052 33.6241 28.8052 33.6241L16.9371 19.1663C16.9371 19.1663 12.8128 13.8398 13.1494 9.27417C13.4861 4.70856 15.8429 2.6794 15.8429 2.6794C15.8429 2.6794 17.358 0.734782 20.809 0.142943C24.26 -0.448896 26.701 0.988427 26.701 0.988427C26.701 0.988427 29.3944 1.91846 30.9095 5.04675C32.4246 8.17505 31.6671 11.3879 31.4145 12.6561C31.162 13.9243 29.647 16.799 29.647 16.799L26.9611 20.7728L22.4924 15.3617C22.4924 15.3617 24.765 12.1488 25.0175 10.2888C25.2701 8.42869 24.6809 7.27442 22.9974 6.90682C21.314 6.53921 20.304 7.58321 19.9673 8.76688C19.6306 9.95056 20.1356 11.8106 20.809 12.8252C21.4824 13.8398 22.4924 15.3617 22.4924 15.3617L34.7814 30.2422L38.9899 25.1693C38.9899 25.1693 41.0942 22.971 43.5352 24.4929C45.9761 26.0148 44.6294 29.0585 44.6294 29.0585C44.6294 29.0585 41.5992 33.2859 38.7374 35.6533C35.8756 38.0206 32.5929 39.458 32.5929 39.458C32.5929 39.458 29.8153 41.2335 23.5025 41.5717C17.1896 41.9099 13.5703 39.9653 13.5703 39.9653L18.368 34.1314Z\" fill=\"black\"/>\r\n<path d=\"M34.6973 40.8107L40.5051 37.0061L42.8508 39.8928C42.8508 39.8928 45.5554 43.2626 42.6936 45.2918C39.8317 47.321 37.5355 44.3445 37.5355 44.3445L34.6973 40.8107Z\" fill=\"black\"/>\r\n</svg>\r\n","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faUser,\r\n    faCompass,\r\n    faPaperPlane,\r\n    faTrophy\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Container from '../ui/Container'\r\nimport { setChat } from '../../utils/actions'\r\nimport { config } from '../../utils/config'\r\nimport SVGLogo from '../../assets/images/logo'\r\n\r\nconst api = config.get('api')\r\n\r\nexport default ({ close }) => {\r\n    const state = useSelector(state => state)\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <Container>\r\n            <NavLink\r\n                exact\r\n                to={'/'}\r\n                onClick={() => {\r\n                    dispatch(setChat(null))\r\n                    close()\r\n                }}\r\n            >\r\n                {SVGLogo}\r\n            </NavLink>,\r\n            <NavLink\r\n                exact\r\n                to={'/profile'}\r\n                onClick={() => {\r\n                    dispatch(setChat(null))\r\n                    close()\r\n                }}\r\n            >\r\n                {(state.user && state.user.avatar.path) ? <img\r\n                    className=\"image\"\r\n                    src={(state.user.avatar.path).replace('./', `${api}/`)}\r\n                    alt=\"Avatar\"\r\n                />\r\n                : <p className=\"undefined\"><FontAwesomeIcon icon={faUser} /></p>}\r\n            </NavLink>,\r\n            <NavLink\r\n                exact\r\n                to={'/navigator'}\r\n                onClick={() => {\r\n                    dispatch(setChat(null))\r\n                    close()\r\n                }}\r\n            >\r\n                <FontAwesomeIcon icon={faCompass} />\r\n            </NavLink>,\r\n            <NavLink\r\n                exact\r\n                to={'/chats'}\r\n                onClick={() => {\r\n                    dispatch(setChat(null))\r\n                    close()\r\n                }}\r\n            >\r\n                <FontAwesomeIcon icon={faPaperPlane} />\r\n            </NavLink>,\r\n            <NavLink\r\n                exact\r\n                to={'/tours'}\r\n                onClick={() => {\r\n                    dispatch(setChat(null))\r\n                    close()\r\n                }}\r\n            >\r\n                <FontAwesomeIcon icon={faTrophy} />\r\n            </NavLink>\r\n        </Container>\r\n    )\r\n}","/*\r\n * COMPONENT: Checkbox\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\r\nimport '../styles/Checkbox.css'\r\n\r\nexport default ({ options }) => {\r\n    const {\r\n        type,\r\n        state=[],\r\n        list=[],\r\n        handler\r\n    } = options || {}\r\n\r\n    const classes = [\r\n        'ui-checkbox',\r\n        type\r\n    ]\r\n\r\n    const handlerChecked = (item) => {\r\n        const founded = state.find(el => el.id === item.id)\r\n        handler((founded)\r\n            ? state.filter(el => el.id !== item.id)\r\n            : ([ ...state, item ])\r\n        )\r\n    }\r\n\r\n    return (\r\n        <ul className={classes.join(' ')}>\r\n            {list.map((item, key) =>\r\n                <li key={key} onClick={() => handlerChecked(item)} className={(state.find(el => el.id === item.id)) ? 'checked' : 'empty'}>\r\n                    <div className=\"checkmark\">\r\n                        <FontAwesomeIcon icon={faCheck} />\r\n                    </div>\r\n                    <p>{item.title}</p>\r\n                </li>    \r\n            )}\r\n        </ul>\r\n    )\r\n}","/*\r\n * COMPONENT: Input\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport '../styles/Input.css'\r\n\r\nexport default ({ options, hidden=false }) => {\r\n    const {\r\n        type='text',\r\n        state,\r\n        name,\r\n        value,\r\n        inputRef,\r\n        defaultValue,\r\n        placeholder='Write a message...',\r\n        autoComplete=\"off\",\r\n        onChange=() => {},\r\n        onKeyPress=() => {}\r\n    } = options\r\n\r\n    const classes = [\r\n        'ui-input', state,\r\n        (hidden) ? 'hidden' : ''\r\n    ]\r\n\r\n    return (\r\n        <input\r\n            ref={inputRef}\r\n            type={type}\r\n            name={name}\r\n            value={value}\r\n            defaultValue={defaultValue}\r\n            className={classes.join(' ')}\r\n            placeholder={placeholder}\r\n            autoComplete={autoComplete}\r\n            onChange={onChange}\r\n            onKeyPress={onKeyPress}\r\n        />\r\n    )\r\n}","/*\r\n * COMPONENT: TextArea\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport '../styles/TextArea.css'\r\n\r\nexport default ({ options }) => {\r\n    const {\r\n        type,\r\n        value,\r\n        name,\r\n        inputRef,\r\n        defaultValue,\r\n        placeholder='Write a message...',\r\n        onChange=() => {}, resize=false\r\n    } = options || {}\r\n\r\n    const classes = [\r\n        'ui-textarea',\r\n        type\r\n    ]\r\n\r\n    return (\r\n        <textarea\r\n            name={name}\r\n            value={value}\r\n            ref={inputRef}\r\n            defaultValue={defaultValue}\r\n            className={classes.join(' ')}\r\n            placeholder={placeholder}\r\n            style={{ resize: (resize) ? 'auto' : 'none' }}\r\n            onChange={onChange}\r\n        />\r\n    )\r\n}","/*\r\n * COMPONENT: Entry\r\n * \r\n * MISSION: Space between components\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport '../styles/Divider.css'\r\n\r\nexport default ({ distance, horizontal }) => {\r\n    const classes = [\r\n        'ui-divider'\r\n    ]\r\n\r\n    const d = Math.round((distance) / 2)\r\n\r\n    return (\r\n        <div\r\n            className={classes.join(' ')}\r\n            style={{ margin: (horizontal) ? `${d}px 0` : `0 ${d}px` }}\r\n        />\r\n    )\r\n}","import React, { useState, useContext } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faLock,\r\n    faFlag,\r\n    faQuestion\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport { AuthContext } from '../context/Auth'\r\nimport Container from '../ui/Container'\r\nimport Row from '../ui/Row'\r\nimport Alert from '../ui/Alert'\r\nimport Query from '../ui/Query'\r\nimport Avatar from '../ui/Avatar'\r\nimport Button from '../ui/Button'\r\nimport List from '../ui/List'\r\nimport Checkbox from '../ui/Checkbox'\r\nimport Input from '../ui/Input'\r\nimport TextArea from '../ui/TextArea'\r\nimport Divider from '../ui/Divider'\r\nimport Message from '../ui/Message'\r\nimport { setUser } from '../../utils/actions'\r\nimport { EDIT_USER, GET_ALL_HUBS, GET_ALL_LANGUAGES } from '../../utils/queries'\r\n\r\nimport { config } from '../../utils/config'\r\n\r\nconst api = config.get('api')\r\n\r\nexport const SettingsEditProfileContent = ({ jump }) => {\r\n    const [action, { loading }] = useMutation(EDIT_USER)\r\n    const state = useSelector(state => state)\r\n\r\n    const [disabled, setDisabled] = useState(true)\r\n    const [avatar, setAvatar] = useState('')\r\n    // eslint-disable-next-line\r\n    const [hubs, setHubs] = useState(state.user.preferences)\r\n\r\n    const { handleSubmit, register, errors } = useForm()\r\n    const onSubmit = async (form) => {\r\n        const variables = {\r\n            name: state.user.name,\r\n            phone: form.phone\r\n        }\r\n\r\n        if (avatar) variables.avatar = avatar.id\r\n\r\n        await action({ variables })\r\n\r\n        jump('/')\r\n    }\r\n\r\n    return (\r\n        <form className=\"fat\" onSubmit={handleSubmit(onSubmit)}>\r\n            {(errors.avatar || errors.name) && <Alert type=\"error\" message={\r\n                (errors.avatar.message) || (errors.name.message)\r\n            } />}\r\n\r\n            <p className=\"ui-title\">General</p>\r\n            <Input options={{\r\n                type: 'text',\r\n                name: 'name',\r\n                defaultValue: state.user.name || '',\r\n                disabled: true,\r\n                placeholder: 'Enter name'\r\n            }} />\r\n\r\n            <Input options={{\r\n                ref: register(),\r\n                type: 'number',\r\n                name: 'phone',\r\n                defaultValue: state.user.phone || '',\r\n                disabled: loading,\r\n                placeholder: 'Enter phone'\r\n            }} />\r\n\r\n            <p className=\"ui-title\">Avatar</p>\r\n            {(state.user.availableAvatars.length > 0) ? <List options={{\r\n                type: 'grid',\r\n                state: avatar || state.user.avatar,\r\n                list: state.user.availableAvatars,\r\n                handlerItem: (item) => {\r\n                    setAvatar(item)\r\n                    setDisabled(false)\r\n                }\r\n            }}>\r\n                {({ item }) => (\r\n                    <img\r\n                        className=\"image\"\r\n                        src={(item.path).replace('./', `${api}/`)}\r\n                        alt=\"Hub\"\r\n                    />\r\n                )}\r\n            </List>\r\n            : <Message text=\"No Available Avatars\" padding />}\r\n\r\n            <p className=\"ui-title\">Preferences</p>\r\n            <Query query={GET_ALL_HUBS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => {\r\n                    const hubs = data.allHubs\r\n\r\n                    if (hubs.length === 0)\r\n                        return <Message text=\"No hubs found\" padding />\r\n                        \r\n                    return (\r\n                        <Checkbox options={{\r\n                            type: 'grid',\r\n                            state: hubs,\r\n                            list: data.allHubs,\r\n                            handler: (items) => {\r\n                                setHubs(items)\r\n                                if (items.length > 2)\r\n                                    setDisabled(false)\r\n                            }\r\n                        }} />\r\n                    )\r\n                }}\r\n            </Query>\r\n\r\n            <Button options={{\r\n                type: 'submit',\r\n                state: 'inactive',\r\n                classNames: 'grow',\r\n                disabled: (disabled) || (loading)\r\n            }}>\r\n                <p>Save</p>\r\n            </Button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const SettingsHomeContent = ({ jump, close }) => {\r\n    const auth = useContext(AuthContext)\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <Container>\r\n            <Button options={{\r\n                state: 'inactive',\r\n                classNames: 'grow',\r\n                handler: () => jump('/edit')\r\n            }}>\r\n                <FontAwesomeIcon icon={faPen} />\r\n                <p>Edit profile</p>\r\n            </Button>\r\n            <Button options={{\r\n                state: 'inactive',\r\n                classNames: 'grow',\r\n                handler: () => jump('/privacy-and-security')\r\n            }}>\r\n                <FontAwesomeIcon icon={faLock} />\r\n                <p>Privacy and Security</p>\r\n            </Button>\r\n\r\n            <Divider />\r\n            \r\n            <Row type=\"col2\">\r\n                <Button options={{\r\n                    state: 'inactive',\r\n                    classNames: 'grow',\r\n                    handler: () => jump('/language')\r\n                }}>\r\n                    <FontAwesomeIcon icon={faFlag} />\r\n                    <p>Language</p>\r\n                </Button>\r\n                <Button options={{\r\n                    state: 'inactive',\r\n                    classNames: 'grow',\r\n                    handler: () => jump('/ask-a-question')\r\n                }}>\r\n                    <FontAwesomeIcon icon={faQuestion} />\r\n                    <p>Ask a question</p>\r\n                </Button>\r\n            </Row>\r\n\r\n            <Divider />\r\n            \r\n            <Button options={{\r\n                state: 'active clear',\r\n                classNames: 'grow',\r\n                handler: () => {\r\n                    close()\r\n                    dispatch(setUser(null))\r\n                    auth.logout()\r\n                }\r\n            }}>\r\n                <p>Log Out</p>\r\n            </Button>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport const SettingsQuestionContent = ({ back }) => {\r\n    const [disabled, setDisabled] = useState(true)\r\n\r\n    return (\r\n        <Container>\r\n            <Input options={{\r\n                type: 'text',\r\n                name: 'title',\r\n                placeholder: 'Enter topic question',\r\n                onChange: () => {\r\n                    setDisabled(false)\r\n                }\r\n            }} />\r\n            <TextArea options={{\r\n                name: 'body',\r\n                placeholder: 'Enter content question',\r\n                onChange: () => {\r\n                    setDisabled(false)\r\n                }\r\n            }} />\r\n            <Button options={{\r\n                state: 'inactive',\r\n                classNames: 'grow',\r\n                disabled, handler: () => {\r\n                    back()\r\n                }\r\n            }}>\r\n                <p>Submit</p>\r\n            </Button>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport const SettingsLanguageContent = ({ back }) => {\r\n    const [checked, setChecked] = useState({})\r\n    const [disabled, setDisabled] = useState(true)\r\n\r\n    return (\r\n        <Container>\r\n            <Divider />\r\n\r\n            <Query query={GET_ALL_LANGUAGES}>\r\n                {({ data }) => (\r\n                    (data.allLanguages.length > 0) ? <List options={{\r\n                        list: data.allLanguages,\r\n                        state: checked,\r\n                        handlerItem: (item) => {\r\n                            setChecked(item)\r\n                            setDisabled(false)\r\n                        }\r\n                    }}>\r\n                        {({ item }) => (\r\n                            <React.Fragment>\r\n                                <Avatar avatar={{ path: item.flag.path }} />\r\n                                <p className=\"name\">{item.title}</p>\r\n                            </React.Fragment>\r\n                        )}\r\n                    </List>\r\n                    : <Message text=\"No Content\" padding />\r\n                )}\r\n            </Query>\r\n\r\n            <Button options={{\r\n                state: 'inactive',\r\n                classNames: 'grow',\r\n                disabled, handler: () => {\r\n                    back()\r\n                }\r\n            }}>\r\n                <p>Apply</p>\r\n            </Button>\r\n        </Container>\r\n    )\r\n}","import React, { useState, useEffect, useContext } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { AuthContext } from './context/Auth'\r\nimport Input from './ui/Input'\r\nimport Button from './ui/Button'\r\nimport Checkbox from './ui/Checkbox'\r\nimport Alert from './ui/Alert'\r\nimport ImageLogo from '../assets/images/logo.js'\r\nimport { LOGIN } from '../utils/queries'\r\nimport { setUser } from '../utils/actions'\r\n\r\nconst Login = ({ setLoading, setError }) => {\r\n    const auth = useContext(AuthContext)\r\n    const dispatch = useDispatch()\r\n\r\n    const [ onLogin, { loading } ] = useMutation(LOGIN)\r\n\r\n    const [name, setName] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n    const [settings, setSettings] = useState([])\r\n\r\n    useEffect(() => {\r\n        setLoading(loading)\r\n    }, [loading, setLoading])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Input options={{\r\n                type: 'text',\r\n                value: name,\r\n                placeholder: 'Enter name',\r\n                onChange: (e) => {\r\n                    setName(e.target.value)\r\n                }\r\n            }} />\r\n\r\n            <Input options={{\r\n                type: 'password',\r\n                value: password,\r\n                placeholder: 'Enter password',\r\n                onChange: (e) => {\r\n                    setPassword(e.target.value)\r\n                }\r\n            }} />\r\n\r\n            <Checkbox options={{\r\n                state: settings,\r\n                list: [\r\n                    { id: 0, title: 'Remember Me' }\r\n                ],\r\n                handler: setSettings\r\n            }} />\r\n            \r\n            <Button options={{\r\n                state: 'inactive',\r\n                handler: () => {\r\n                    onLogin({\r\n                        variables: {\r\n                            name, password,\r\n                            area: 'DASHBOARD'\r\n                        }\r\n                    })\r\n                    .then(data => {\r\n                        const user = data.data.login\r\n                        auth.login(user.sessionID)\r\n                        dispatch(setUser(user))\r\n                    })\r\n                    .catch(err => {\r\n                        const msg = err.message.split(': ')[1]\r\n                        setError(msg)\r\n                    })\r\n\r\n                    setName('')\r\n                    setPassword('')\r\n                }\r\n            }}>\r\n                <p>Log In</p>\r\n            </Button>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default () => {\r\n    const [loading, setLoading] = useState('')\r\n    const [error, setError] = useState('')\r\n\r\n    const classes = [\r\n        (loading) ? 'loading' : 'form'\r\n    ]\r\n\r\n    return (\r\n        <main className=\"auth\">\r\n            {(error) && <Alert type=\"error\" message={error} />}\r\n            <form className={classes.join(' ')}>\r\n                <div className=\"logo\">\r\n                    {ImageLogo}\r\n                </div>\r\n\r\n                <Login setLoading={setLoading} setError={setError} />\r\n            </form>\r\n        </main>\r\n    )\r\n}","import React from 'react'\r\nimport '../styles/Column.css'\r\n\r\nexport default (props) => {\r\n    const Children = props.children\r\n\r\n    const classes = [\r\n        'ui-column',\r\n        (props.center) ? 'center' : ''\r\n    ]\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            {Children}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport '../styles/Headline.css'\r\n\r\nexport default (props) => {\r\n    const Children = props.children\r\n\r\n    return (\r\n        <div className=\"ui-headline\">\r\n            {Children}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { ResponsiveLine } from '@nivo/line'\r\nimport Query from './ui/Query'\r\nimport Row from './ui/Row'\r\nimport Container from './ui/Container'\r\nimport Column from './ui/Column'\r\nimport Headline from './ui/Headline'\r\nimport {\r\n    GET_STATS\r\n} from '../utils/queries'\r\n\r\nconst MyResponsiveLine = ({ data }) => (\r\n    <div className=\"graphic-line\">\r\n        <ResponsiveLine\r\n            data={data}\r\n            margin={{ top: 25, right: 25, bottom: 25, left: 25 }}\r\n            xScale={{ type: 'point' }}\r\n            yScale={{\r\n                type: 'linear',\r\n                min: 'auto',\r\n                max: 'auto',\r\n                stacked: true,\r\n                reverse: false\r\n            }}\r\n            axisTop={null}\r\n            axisRight={null}\r\n            axisBottom={null}\r\n            axisLeft={null}\r\n            colors={{ scheme: 'nivo' }}\r\n            pointSize={10}\r\n            pointColor={{ theme: 'background' }}\r\n            pointBorderWidth={2}\r\n            pointBorderColor={{ from: 'serieColor' }}\r\n            pointLabel=\"y\"\r\n            pointLabelYOffset={-12}\r\n            crosshairType=\"cross\"\r\n            motionStiffness={75}\r\n            animate={false}\r\n            useMesh={true}\r\n            legends={[]}\r\n        />\r\n    </div>\r\n)\r\n\r\nexport default () => {\r\n    const state = useSelector(state => state)\r\n\r\n    if (!state.user) return null\r\n    \r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Dash</span>\r\n                        <span>Board</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_STATS}>\r\n                    {({ data }) => (\r\n                        <React.Fragment>\r\n                            <Container type=\"clear statblocks\">\r\n                                <Row type=\"flex statblock red\">\r\n                                    <Column>\r\n                                        <p className=\"value\">{data.countUsers}</p>\r\n                                        <p className=\"legend\">users</p>\r\n                                    </Column>\r\n                                </Row>\r\n\r\n                                <Row type=\"flex statblock blue\">\r\n                                    <Column>\r\n                                        <p className=\"value\">{data.countPosts}</p>\r\n                                        <p className=\"legend\">posts</p>\r\n                                    </Column>\r\n                                </Row>\r\n\r\n                                <Row type=\"flex statblock orange\">\r\n                                    <Column>\r\n                                        <p className=\"value\">{data.countComments}</p>\r\n                                        <p className=\"legend\">comments</p>\r\n                                    </Column>\r\n                                </Row>\r\n                            </Container>\r\n\r\n                            <MyResponsiveLine data={[\r\n                                {\r\n                                    \"id\": \"japan\",\r\n                                    \"color\": \"hsl(16, 70%, 50%)\",\r\n                                    \"data\": [\r\n                                    {\r\n                                        \"x\": \"plane\",\r\n                                        \"y\": 259\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"helicopter\",\r\n                                        \"y\": 247\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"boat\",\r\n                                        \"y\": 276\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"train\",\r\n                                        \"y\": 149\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"subway\",\r\n                                        \"y\": 48\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"bus\",\r\n                                        \"y\": 272\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"car\",\r\n                                        \"y\": 40\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"moto\",\r\n                                        \"y\": 170\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"bicycle\",\r\n                                        \"y\": 107\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"horse\",\r\n                                        \"y\": 85\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"skateboard\",\r\n                                        \"y\": 197\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"others\",\r\n                                        \"y\": 108\r\n                                    }\r\n                                    ]\r\n                                },\r\n                                {\r\n                                    \"id\": \"norway\",\r\n                                    \"color\": \"hsl(163, 70%, 50%)\",\r\n                                    \"data\": [\r\n                                    {\r\n                                        \"x\": \"plane\",\r\n                                        \"y\": 179\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"helicopter\",\r\n                                        \"y\": 287\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"boat\",\r\n                                        \"y\": 9\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"train\",\r\n                                        \"y\": 47\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"subway\",\r\n                                        \"y\": 124\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"bus\",\r\n                                        \"y\": 258\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"car\",\r\n                                        \"y\": 124\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"moto\",\r\n                                        \"y\": 188\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"bicycle\",\r\n                                        \"y\": 247\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"horse\",\r\n                                        \"y\": 104\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"skateboard\",\r\n                                        \"y\": 69\r\n                                    },\r\n                                    {\r\n                                        \"x\": \"others\",\r\n                                        \"y\": 235\r\n                                    }\r\n                                    ]\r\n                                }\r\n                            ]} />\r\n                        </React.Fragment>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","/*\r\n * COMPONENT: Dropdown\r\n * \r\n * MISSION: ...\r\n * IMPORTANT: Parent component must be 'relative' position\r\n *\r\n**/\r\n\r\nimport React, { useRef } from 'react'\r\nimport '../styles/Dropdown.css'\r\n\r\nexport default (props) => {\r\n    const Children = props.children\r\n\r\n    const {\r\n        type, styles, dropdown\r\n    } = props.options || {}\r\n\r\n    const classes = [\r\n        'ui-dropdown',\r\n        type\r\n    ]\r\n\r\n    const dropdownRef = useRef()\r\n\r\n    if (!dropdown) return null\r\n\r\n    return (\r\n        <div\r\n            ref={dropdownRef}\r\n            className={classes.join(' ')}\r\n            style={styles}\r\n        >\r\n            {Children}\r\n        </div>\r\n    )\r\n}","/*\r\n * COMPONENT: Table\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React, { useState, useEffect } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faEye,\r\n    faCheck,\r\n    faFilter,\r\n    faArrowLeft,\r\n    faArrowRight\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Row from './Row'\r\nimport Container from './Container'\r\nimport Button from './Button'\r\nimport Search from './Search'\r\nimport Message from './Message'\r\nimport Dropdown from './Dropdown'\r\nimport Checkbox from './Checkbox'\r\nimport Radiobox from './Radiobox'\r\nimport { getPage, getMaxPage } from '../../utils/functions'\r\nimport { config } from '../../utils/config'\r\nimport '../styles/Table.css'\r\n\r\nconst api = config.get('api')\r\n\r\nconst limitDefault = 10\r\nconst limitList = [5, 10, 15, 20, 30, 40, 50]\r\n\r\nconst Manage = ({ table, actions, dishands }) => {\r\n    return (\r\n        <div className=\"manage\">\r\n            {actions.map((Action, key) =>\r\n                <Action\r\n                    key={key}\r\n                    table={table}\r\n                    dishands={dishands}\r\n                />    \r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Table = ({\r\n    max,\r\n    name,\r\n    gridable,\r\n    empty=\"Данные отсутсвуют\",\r\n\r\n    page,\r\n    setPage,\r\n\r\n    table,\r\n    setTable,\r\n\r\n    limits,\r\n    setLimits,\r\n\r\n    headers,\r\n    setHeaders\r\n}) => {\r\n    return (\r\n        <div className={`data ${name}`}>\r\n            {/*<Descriptors\r\n                table={table}\r\n                setTable={setTable}\r\n\r\n                limits={limits}\r\n                setLimits={setLimits}\r\n\r\n                headers={headers}\r\n                setHeaders={setHeaders}\r\n            />*/}\r\n\r\n            <Pagination\r\n                max={max}\r\n                page={page}\r\n                setPage={setPage}\r\n            />\r\n\r\n            <div className={`table${gridable ? ' gridable' : ''}`}>\r\n                {!gridable && <Headers table={table} setTable={setTable} />}\r\n\r\n                {(table.length === 0)\r\n                    ? <Message text={empty} padding />\r\n                    : <Body table={table} setTable={setTable} />}\r\n            </div>\r\n\r\n            <Pagination\r\n                max={max}\r\n                page={page}\r\n                setPage={setPage}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n// eslint-disable-next-line\r\nconst Descriptor = (props) => {\r\n    const {\r\n        size,\r\n        type,\r\n        icon,\r\n        styles,\r\n        children\r\n    } = props\r\n\r\n    const Children = children\r\n\r\n    const [dropdown, setDropdown] = useState(false)\r\n    \r\n    return (\r\n        <Container clear sticky>\r\n            <Button options={{\r\n                state: 'icon inactive',\r\n                disabled: (size === 0),\r\n                handler: () => setDropdown(!dropdown)\r\n            }}>\r\n                <FontAwesomeIcon icon={icon} />\r\n            </Button>\r\n\r\n            <Dropdown options={{ type, styles, dropdown }}>\r\n                {Children}\r\n            </Dropdown>\r\n        </Container>\r\n    )\r\n}\r\n\r\n// eslint-disable-next-line\r\nconst Descriptors = ({\r\n    table,\r\n    setTable,\r\n\r\n    headers,\r\n    setHeaders,\r\n\r\n    limits,\r\n    setLimits\r\n}) => {\r\n    const size = table.length\r\n\r\n    const handlerVisible = (headers) => {\r\n        let checkedCount = headers.reduce((prev, curr) => (curr.checked) ? prev + 1 : prev, 0)\r\n        \r\n        if (checkedCount < 1) return headers\r\n\r\n        setHeaders(headers)\r\n\r\n        setTable(table.map(t =>\r\n            ({\r\n                ...t,\r\n                data: t.data.map((c, i) => ({\r\n                    ...c,\r\n                    visible: headers[i].checked\r\n                }))\r\n            })\r\n        ))\r\n    }\r\n\r\n    return (\r\n        <div className=\"descriptors\">\r\n            <Search />\r\n\r\n            {(limits) && <Descriptor\r\n                size={size}\r\n                type=\"filter\"\r\n                icon={faFilter}\r\n                styles={{ width: 96 }}\r\n            >\r\n                <Radiobox options={{\r\n                    list: limits,\r\n                    handler: setLimits\r\n                }} />\r\n            </Descriptor>}\r\n\r\n            {(headers) && <Descriptor\r\n                size={size}\r\n                type=\"visible\"\r\n                icon={faEye}\r\n            >\r\n                <Checkbox options={{\r\n                    state: headers,\r\n                    list: headers,\r\n                    handler: handlerVisible\r\n                }} />\r\n            </Descriptor>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Headers = ({ table, setTable }) => {\r\n    const [checked, setChecked] = useState(false)\r\n\r\n    const handlerChecked = () => {\r\n        setTable([\r\n            ...table.map(trace => ({\r\n                ...trace,\r\n                checked: !checked\r\n            }))\r\n        ])\r\n        setChecked(!checked)\r\n    }\r\n\r\n    return (\r\n        <div className=\"headers\">\r\n            {(table.length > 0) ?\r\n                <React.Fragment>\r\n                    <div className={`checkmark${checked ? ' checked' : ''}`} onClick={handlerChecked}>\r\n                        <div className={`checkmarks-item`}>\r\n                            <FontAwesomeIcon icon={faCheck} />\r\n                        </div>\r\n                    </div>\r\n                    {table[0].data.map((cell, iter) =>\r\n                        <Header\r\n                            key={iter + 1}\r\n                            iter={iter + 2}\r\n                            cell={cell}\r\n                        />\r\n                    )}\r\n                </React.Fragment>\r\n            : ''}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Header = ({ cell, iter }) => {\r\n    if (!cell.visible) return null\r\n    \r\n    return (\r\n        <div\r\n            className={`header ${cell.type}`}\r\n            style={{ gridColumn: `${iter} / ${iter + 1}` }}\r\n        >\r\n            {cell.header}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Body = ({ table, setTable }) => {\r\n    return (\r\n        <div className=\"body\">\r\n            {table.map((trace, iter) =>\r\n                <Trace key={iter} trace={trace} setTable={setTable} />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Trace = ({ trace, setTable }) => {\r\n    const handlerChecked = () => {\r\n        setTable(table => table.map(t => (t.id === trace.id) ? ({\r\n            ...t,\r\n            checked: !t.checked\r\n        }) : ({ ...t })))\r\n    }\r\n\r\n    return (\r\n        <div className={`trace${trace.checked ? ' checked' : ''}`} onClick={handlerChecked}>\r\n            <div className=\"checkmark\">\r\n                <div className=\"checkmarks-item\">\r\n                    <FontAwesomeIcon icon={faCheck} />\r\n                </div>\r\n            </div>\r\n\r\n            {trace.data.map((cell, iter) =>\r\n                <Cell key={iter} cell={cell} iter={iter + 2} />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Cell = ({ cell, iter }) => {\r\n    if (!cell.visible) return null\r\n    \r\n    return (\r\n        <div\r\n            className={`cell ${cell.type}`}\r\n            style={{ gridColumn: `${iter} / ${iter + 1}` }}\r\n        >\r\n            {(cell.type === 'text') &&\r\n                <p>{(cell.value.length > 99) ? `${cell.value.slice(0, 100)}...` : cell.value}</p>}\r\n            {(cell.type === 'color') &&\r\n                <span style={{ background: cell.value || 'black' }}></span>}\r\n            {(cell.type === 'img') &&\r\n                <img src={(cell.value).replace('./', `${api}/`)} alt={cell.value} />}\r\n            {(cell.type === 'icon') &&\r\n                <img className=\"icon\" src={(cell.value).replace('./', `${api}/`)} alt={cell.value} />}\r\n            {(cell.type === 'hub') &&\r\n                <img className=\"hub\" src={`${api}${cell.value.replace('./', '/')}`} alt={cell.value} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Pagination = ({ page, min=0, max=0, setPage }) => {\r\n    const renderPages = () => {\r\n        const pages = []\r\n        for (let i = min; i < (max + 1); i++) {\r\n            if (i < 5) {\r\n                pages.push(\r\n                    <Button key={i} options={{\r\n                        state: (page === i) ? 'disabled icon inactive' : 'active icon',\r\n                        disabled: (page === i),\r\n                        classNames: 'grow',\r\n                        handler: () => setPage(i)\r\n                    }}>\r\n                        <p>{i + 1}</p>\r\n                    </Button>\r\n                )\r\n            }\r\n        }\r\n        return pages.map(page => page)\r\n    }\r\n    \r\n    return (\r\n        <div className=\"pagination\">\r\n            <Button options={{\r\n                state: (page === min) ? 'disabled icon inactive' : 'active icon',\r\n                disabled: (page === min),\r\n                classNames: 'grow',\r\n                handler: () => setPage(page - 1)\r\n            }}>\r\n                <FontAwesomeIcon icon={faArrowLeft} />\r\n            </Button>\r\n\r\n            <Row>{renderPages()}</Row>\r\n\r\n            <Button options={{\r\n                state: (page === max) ? 'disabled icon inactive' : 'active icon',\r\n                disabled: (page === max),\r\n                classNames: 'grow',\r\n                handler: () => setPage(page + 1)\r\n            }}>\r\n                <FontAwesomeIcon icon={faArrowRight} />\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ({ options }) => {\r\n    const [table, setTable] = useState([])\r\n\r\n    const [dishands, setDishands] = useState(true)\r\n    const [page, setPage] = useState(0)\r\n\r\n    const [headers, setHeaders] = useState([])\r\n\r\n    const [limits, setLimits] = useState(limitList.map((l, i) => ({\r\n        id: i,\r\n        value: l,\r\n        checked: (limitDefault === l)\r\n    })))\r\n\r\n    const {\r\n        name='default',\r\n        data=[],\r\n        dataTable=[],\r\n        actions=[]\r\n    } = options || {}\r\n\r\n    const classes = [\r\n        'ui-table'\r\n    ]\r\n\r\n    useEffect(() => {\r\n        if (dataTable) {\r\n            const limit = limits?.find(l => l.checked)?.value || limitDefault\r\n            const content = getPage(dataTable, limit, page)\r\n\r\n            setTable(content.map((trace, i) => ({\r\n                ...data[i],\r\n                _id: data[i].id,\r\n                id: i,\r\n                data: trace.map((cell, j) => ({\r\n                    id: `cell-${i}-${j}`,\r\n                    header: cell.header,\r\n                    value: cell.value,\r\n                    type: cell.type,\r\n                    sortabled: cell.hasOwnProperty('sortabled')\r\n                        ? cell.sortabled\r\n                        : false,\r\n                    visible: cell.hasOwnProperty('visible')\r\n                        ? cell.visible \r\n                        : true\r\n                })),\r\n                checked: false\r\n            })))\r\n        }\r\n    }, [dataTable, data, limits, page])\r\n\r\n    useEffect(() => {\r\n        const checked = table.filter(t => t.checked)\r\n        if (checked.length > 0) setDishands(false)\r\n        else setDishands(true)\r\n    }, [table])\r\n\r\n    useEffect(() => {\r\n        if (table) {\r\n            setHeaders(table[0]?.data.map((tr, i) => ({\r\n                id: i,\r\n                title: tr.header,\r\n                checked: tr.visible\r\n            })))\r\n        }\r\n    }, [table])\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            <Manage\r\n                table={table}\r\n                actions={actions}\r\n                dishands={dishands}\r\n            />\r\n            <Table\r\n                name={name}\r\n\r\n                table={table}\r\n                setTable={setTable}\r\n\r\n                page={page}\r\n                setPage={setPage}\r\n                max={getMaxPage(dataTable, limits?.find(l => l.checked)?.value || limitDefault)}\r\n\r\n                limits={limits}\r\n                setLimits={setLimits}\r\n\r\n                headers={headers}\r\n                setHeaders={setHeaders}\r\n            />\r\n        </div>\r\n    )\r\n}","import React, { useState, useRef } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { FormProvider, useForm } from 'react-hook-form'\r\nimport Button from '../ui/Button'\r\n\r\nexport default ({\r\n    query,\r\n    wide=false,\r\n    add=false,\r\n    edit=false,\r\n    children,\r\n    variables,\r\n    afterEffect\r\n}) => {\r\n    const formRef = useRef(null)\r\n    const FormFields = children\r\n\r\n    const [action, { loading }] = useMutation(query)\r\n    const [disabledSubmit, setDisabledSubmit] = useState(true)\r\n\r\n    const methods = useForm()\r\n\r\n    const onSubmit = async (form) => {\r\n        await action({ variables: variables(form) })\r\n        if (afterEffect) afterEffect()\r\n    }\r\n\r\n    return (\r\n        <FormProvider {...methods}>\r\n            <form ref={formRef} className={`ui-form${(wide) ? ' wide' : ''}`} onSubmit={methods.handleSubmit(onSubmit)}>\r\n                <FormFields {...methods} elevate={() => setDisabledSubmit(false)} loading={loading} />\r\n\r\n                <Button options={{\r\n                    type: 'submit',\r\n                    state: 'inactive',\r\n                    disabled: !disabledSubmit,\r\n                    classNames: 'grow'\r\n                }}>\r\n                    <p>{(add) ? 'Add' : 'Save Changes'}</p>\r\n                </Button>\r\n            </form>\r\n        </FormProvider>\r\n    )\r\n}","/*\r\n * COMPONENT: Select\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\n\r\nimport React from 'react'\r\nimport Select, { components } from 'react-select'\r\nimport '../styles/Select.css'\r\n\r\nconst styles = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        minHeight: '40px',\r\n        border: (state.isFocused || state.isSelected) ? '1px solid var(--color-accent)' : '1px solid #afbdc4',\r\n        borderRadius: '8px',\r\n        boxShadow: 'none',\r\n        background: 'transparent',\r\n        color: '#afbdc4',\r\n        cursor: 'pointer',\r\n        transition: 'var(--transition)'\r\n    }),\r\n    valueContainer: (provided) => ({\r\n        ...provided,\r\n        padding: '5px'\r\n    }),\r\n    singleValue: (provided) => ({\r\n        ...provided,\r\n        color: 'var(--color-accent)',\r\n        fontWeight: '600',\r\n        fontSize: '14px',\r\n        fontFamily: '\"Roboto\", sans-serif',\r\n        boxShadow: 'none',\r\n        transition: 'var(--transition)'\r\n    }),\r\n    placeholder: (provided, state) => ({\r\n        ...provided,\r\n        color: (state.isFocused) ? 'var(--color-accent)' : '#afbdc4',\r\n        fontWeight: '600',\r\n        fontSize: '14px',\r\n        fontFamily: '\"Roboto\", sans-serif',\r\n        transition: 'var(--transition)'\r\n    }),\r\n    menu: (provided) => ({\r\n        ...provided,\r\n        background: 'white',\r\n        boxShadow: 'var(--bx-main)',\r\n        borderRadius: 'var(--br-main)',\r\n        border: 'var(--border-main)'\r\n    }),\r\n    option: (provided, state) => ({\r\n        ...provided,\r\n        color: (state.isFocused) ? 'var(--color-accent)' : '#afbdc4',\r\n        fontWeight: '600',\r\n        fontSize: '14px',\r\n        fontFamily: '\"Roboto\", sans-serif',\r\n        background: 'none !important',\r\n        cursor: 'pointer',\r\n        transition: 'var(--transition)'\r\n    }),\r\n    multiValue: (provided) => ({\r\n        ...provided,\r\n        borderRadius: '5px',\r\n        background: 'var(--color-accent)',\r\n        color: 'white'\r\n    }),\r\n    multiValueLabel: (provided) => ({\r\n        ...provided,\r\n        color: 'white',\r\n        fontFamily: '\"Roboto\", sans-serif',\r\n        fontSize: '12px'\r\n    }),\r\n}\r\n\r\nconst Menu = (props) => {\r\n    return (\r\n        <div className=\"ui-select-menu\">\r\n            <components.Menu {...props}>{props.children}</components.Menu>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ({ options }) => {\r\n    const classes = [\r\n        'ui-select'\r\n    ]\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            <Select {...options} styles={styles} components={{ Menu }} />\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport Query from '../ui/Query'\r\nimport Form from '../ui/Form'\r\nimport List from '../ui/List'\r\nimport Input from '../ui/Input'\r\nimport Select from '../ui/Select'\r\nimport Checkbox from '../ui/Checkbox'\r\nimport Message from '../ui/Message'\r\nimport { GET_ALL_HUBS, GET_ALL_ROLES, REGISTER, EDIT_USER } from '../../utils/queries'\r\nimport { config } from '../../utils/config'\r\n\r\nconst api = config.get('api')\r\n\r\nexport default ({\r\n    document,\r\n    close,\r\n    add=false,\r\n    edit=false\r\n}) => {\r\n    const [variables, setVariables] = useState({})\r\n\r\n    const [preferences, setPreferences] = useState(document?.preferences)\r\n    const [avatar, setAvatar] = useState(document?.avatar)\r\n    const [role, setRole] = useState((document) ? {\r\n        value: document.role.id,\r\n        label: document.role.name\r\n    } : null)\r\n\r\n    const variablesCompose = (form, options) => {\r\n        return {\r\n            ...options,\r\n            name: form.name,\r\n            phone: form.phone,\r\n            email: form.email\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const options = {\r\n            role: role?.value,\r\n            avatar: avatar?.id,\r\n            preferences: preferences?.map(p => p.id)\r\n        }\r\n        if (edit) options.id = document._id\r\n        setVariables((vars) => ({\r\n            ...vars,\r\n            ...options\r\n        }))\r\n    }, [role, avatar, preferences, edit, document])\r\n\r\n    return (\r\n        <Form\r\n            add={add}\r\n            edit={edit}\r\n            query={(add) ? REGISTER : EDIT_USER}\r\n            variables={variables}\r\n            beforeEffect={(form, options) => variablesCompose(form, options)}\r\n            afterEffect={close}\r\n        >\r\n            {({ elevate, register, loading }) => (\r\n                <React.Fragment>\r\n                    <p className=\"ui-title\">General</p>\r\n                    <Input options={{\r\n                        ref: register(),\r\n                        type: 'text',\r\n                        name: 'name',\r\n                        defaultValue: document?.name || '',\r\n                        placeholder: 'Enter name',\r\n                        disabled: loading\r\n                    }} />\r\n\r\n                    <Input options={{\r\n                        ref: register(),\r\n                        type: 'text',\r\n                        name: 'phone',\r\n                        defaultValue: document?.phone || '',\r\n                        placeholder: 'Enter phone',\r\n                        disabled: loading\r\n                    }} />\r\n\r\n                    <Input options={{\r\n                        ref: register(),\r\n                        type: 'text',\r\n                        name: 'email',\r\n                        defaultValue: document?.email || '',\r\n                        placeholder: 'Enter email',\r\n                        disabled: loading\r\n                    }} />\r\n\r\n                    <Query query={GET_ALL_ROLES} pseudo={{ count: 1, height: 45 }}>\r\n                        {({ data }) => (\r\n                        <Select options={{\r\n                                defaultValue: role,\r\n                                placeholder: 'Choose role',\r\n                                options: data.allRoles.map(role => ({\r\n                                    value: role.id, label: role.name\r\n                                })),\r\n                                onChange: (e) => {\r\n                                    setRole(e)\r\n                                    elevate()\r\n                                }\r\n                            }} />\r\n                        )}\r\n                    </Query>\r\n\r\n                    <p className=\"ui-title\">Avatar</p>\r\n                    {(document?.availableAvatars && (document.availableAvatars.length > 0)) ? <List options={{\r\n                        type: 'grid',\r\n                        state: avatar,\r\n                        list: document?.availableAvatars,\r\n                        handlerItem: (file) => {\r\n                            setAvatar(file)\r\n                            elevate()\r\n                        }\r\n                    }}>\r\n                        {({ item }) => (\r\n                            <img\r\n                                className=\"image\"\r\n                                src={(item.path).replace('./', `${api}/`)}\r\n                                alt=\"Hub\"\r\n                            />\r\n                        )}\r\n                    </List> : <Message text=\"No Available Avatars\" padding />}\r\n\r\n                    <p className=\"ui-title\">Preferences</p>\r\n                    <Query query={GET_ALL_HUBS} pseudo={{ count: 1, height: 45 }}>\r\n                        {({ data }) => {\r\n                            const hubs = data.allHubs\r\n\r\n                            if (hubs.length === 0)\r\n                                return <Message text=\"No hubs found\" padding />\r\n                                \r\n                            return (\r\n                                <Checkbox options={{\r\n                                    type: 'grid',\r\n                                    state: preferences,\r\n                                    list: data.allHubs,\r\n                                    handler: (items) => {\r\n                                        setPreferences(items)\r\n                                        elevate()\r\n                                    }\r\n                                }} />\r\n                            )\r\n                        }}\r\n                    </Query>\r\n                </React.Fragment>\r\n            )}\r\n        </Form>\r\n    )\r\n}","import React from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nexport default (props) => {\r\n    const [action, { data, loading, error }] = useMutation(props.query)\r\n\r\n    const Children = props.children\r\n\r\n    return <Children error={error} data={data} loading={loading} action={action} />\r\n}","import React from 'react'\r\nimport Mutation from '../ui/Mutation'\r\nimport Row from '../ui/Row'\r\nimport Container from '../ui/Container'\r\nimport Message from '../ui/Message'\r\nimport Button from '../ui/Button'\r\n\r\nexport default ({ entry, entries, query, handler, close }) => {\r\n    const docs = (entry) ? 'this' : entries.length\r\n    const ents = (docs > 1 && !entry) ? 'entries' : 'entry'\r\n\r\n    return (\r\n        <Container>\r\n            <Message text={`Are you sure you want to delete ${docs} ${ents}?`} padding />\r\n            <Row type=\"flex\">\r\n                <Button options={{\r\n                    state: 'inactive',\r\n                    classNames: 'grow',\r\n                    handler: () => {\r\n                        close()\r\n                    }\r\n                }}>\r\n                    <p>No</p>\r\n                </Button>\r\n                <Mutation query={query}>\r\n                    {({ action, loading }) => (\r\n                        <Button options={{\r\n                            state: 'inactive',\r\n                            classNames: 'grow',\r\n                            disabled: loading,\r\n                            handler: async () => {\r\n                                await handler(action, entry, entries)\r\n                                close()\r\n                            }\r\n                        }}>\r\n                            <p>Yes</p>\r\n                        </Button>\r\n                    )}\r\n                </Mutation>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\nimport Query from './ui/Query'\r\nimport Subscription from './ui/Subscription'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\nimport FormUser from './forms/User'\r\nimport DeleteEntries from './forms/Delete'\r\nimport { GET_ALL_USERS, SUB_ALL_USERS, DELETE_USERS } from '../utils/queries'\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Users</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_USERS}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_USERS} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.users) || (data && data.allUsers) || []),\r\n                                    dataTable: ((subData && subData.users) || (data && data.allUsers) || []).map(user => ([\r\n                                        { header: 'Аватар', value: user.avatar.path, type: 'icon' },\r\n                                        { header: 'Имя', value: user.name, type: 'text' },\r\n                                        { header: 'Email', value: user.email, type: 'text' },\r\n                                        { header: 'Роль', value: user.role.name, type: 'text' },\r\n                                        { header: 'Дата изменения', value: <Moment date={new Date(new Date().setTime(user.updatedAt))} format=\"DD.MM.YYYY\" />, type: 'text', visible: false },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(user.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Delete Article?',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_USERS}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, docs) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            names: (entry)\r\n                                                                                ? [entry.name]\r\n                                                                                : docs.map(doc => doc.name)\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const user = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!user)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!user),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (user) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Edit User',\r\n                                                        component: ({ close }) => <FormUser\r\n                                                            edit\r\n                                                            document={user}\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }])\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'active icon',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Add User',\r\n                                                        component: ({ close }) => <FormUser\r\n                                                            add\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }\r\n                                                ])\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","/*\r\n * COMPONENT: Toggler\r\n * \r\n * MISSION: ...\r\n *\r\n**/\r\nimport React, { useState, useEffect, useRef } from 'react'\r\nimport { useWindowSize } from '../../hooks/window.size.hook'\r\nimport Row from './Row'\r\nimport Container from './Container'\r\nimport Input from './Input'\r\nimport Button from './Button'\r\nimport Message from './Message'\r\nimport Dropdown from './Dropdown'\r\nimport List from './List'\r\nimport '../styles/Toggler.css'\r\n\r\nconst styles = {\r\n    dropdown: { right: 0 }\r\n}\r\n\r\nfunction targetsRepletion({\r\n    all,\r\n    name,\r\n    targets,\r\n    handleRef,\r\n    toggleRef,\r\n    slicedFactor,\r\n    initialOptions,\r\n\r\n    dropdown,\r\n    setDropdown,\r\n\r\n    state,\r\n    setState,\r\n    setValue\r\n}) {\r\n    const allOption = (all) && ({\r\n        value: 'all',\r\n        label: <Row><p>All</p></Row>\r\n    })\r\n\r\n    const slicedStartOptions = targets\r\n        .filter(t => t.value !== 'all')\r\n        .filter(t => t.value !== 'erase')\r\n        .slice(0, slicedFactor)\r\n    let slicedEndOptions = initialOptions\r\n        .filter(option => !slicedStartOptions\r\n            .find(op => op.value === option.value)\r\n        )\r\n\r\n    if (state) {\r\n        const candidate = slicedEndOptions.find(o => o.value === state)\r\n\r\n        if (candidate) {\r\n            slicedEndOptions = slicedEndOptions.filter(o => o.value !== candidate.value)\r\n            slicedEndOptions.unshift(slicedStartOptions.shift())\r\n\r\n            slicedStartOptions.unshift(candidate)\r\n        }\r\n    }\r\n\r\n    const eraseOption = (slicedFactor < initialOptions.length) ? {\r\n        value: 'erase',\r\n        disabled: (slicedEndOptions.length === targets.length),\r\n        classNames: 'dropdown',\r\n        label: (\r\n            <Container clear sticky>\r\n                <Button options={{\r\n                    state: 'inactive',\r\n                    handler: () => setDropdown(!dropdown)\r\n                }}>\r\n                    <div className={`ui-icon dots${dropdown ? ' active' : ''}`}>\r\n                        <span></span><span></span><span></span>\r\n                    </div>\r\n                </Button>\r\n\r\n                <Dropdown options={{ dropdown, styles: styles.dropdown }}>\r\n                    <List options={{\r\n                        list: slicedEndOptions.map(hub => ({ id: hub.value, label: hub.label})),\r\n                        handlerItem: (item) => {\r\n                            setDropdown(false)\r\n                            setState(item.id)\r\n                            if (setValue) setValue(name, item.id)\r\n                            handleRef.current.style.left = '-1px'\r\n                            handleRef.current.style.width = `${toggleRef.current.offsetWidth}px`\r\n                        }\r\n                    }}>\r\n                        {({ item }) => (\r\n                            <div className=\"name\">{item.label}</div>\r\n                        )}\r\n                    </List>\r\n                </Dropdown>\r\n            </Container>\r\n        )\r\n    } : null\r\n\r\n    const result = []\r\n\r\n    if (allOption)\r\n        result.push(allOption)\r\n\r\n    result.push(...slicedStartOptions)\r\n\r\n    if (eraseOption)\r\n        result.push(eraseOption)\r\n\r\n    return result\r\n}\r\n\r\nexport default ({ all, options }) => {\r\n    const {\r\n        type,\r\n        name,\r\n        initialSlicedFactor=2,\r\n        initialState={},\r\n        initialOptions=[],\r\n        register, setValue\r\n    } = options || {}\r\n    const handleRef = useRef(null)\r\n    const toggleRef = useRef(null)\r\n\r\n    const size = useWindowSize()\r\n    const [dropdown, setDropdown] = useState(false)\r\n\r\n    const [slicedFactor, setSlicedFactor] = useState((all) ? initialSlicedFactor - 1 : initialSlicedFactor)\r\n\r\n    const [state, setState] = useState(initialState)\r\n    const [targets, setTargets] = useState(initialOptions)\r\n\r\n    const classes = [\r\n        'ui-toggler',\r\n        type\r\n    ]\r\n\r\n    const classesToggle = (target) => [\r\n        'toggle',\r\n        (target?.classNames),\r\n        (target.value === state) ? ' active' : ''\r\n    ]\r\n\r\n    const handlerState = (e, target, index) => {\r\n        if (target === 'erase')\r\n            return null\r\n\r\n        const isToggle = (element) => element.classList.contains('toggle')\r\n\r\n        const offsetHandle = (element) => {\r\n            if (!element) return\r\n            const offset = element.offsetWidth * index\r\n            handleRef.current.style.left = `${(offset === 0) ? offset - 1 : offset + 1}px`\r\n            handleRef.current.style.width = `${element.offsetWidth}px`\r\n        }\r\n\r\n        const searchToggle = (element) => {\r\n            if (isToggle(element)) return element\r\n            else return searchToggle(element.parentElement)\r\n        }\r\n\r\n        if (isToggle(e.target))\r\n            offsetHandle(e.target)\r\n        else\r\n            offsetHandle(searchToggle(e.target))\r\n\r\n        setState(target)\r\n        if (setValue) setValue(name, target)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setTargets(prev => targetsRepletion({\r\n                all,\r\n                name,\r\n                handleRef,\r\n                toggleRef,\r\n                targets: prev,\r\n                initialOptions,\r\n                slicedFactor,\r\n\r\n                dropdown,\r\n                setDropdown,\r\n\r\n                state,\r\n                setState,\r\n                setValue\r\n            })\r\n        )\r\n    }, [all, name, state, dropdown, initialOptions, slicedFactor, setValue])\r\n\r\n    useEffect(() => {\r\n        const factor = (all) ? initialSlicedFactor - 1 : initialSlicedFactor\r\n        if (size.width <= 580) {\r\n            setSlicedFactor((factor === 2) ? 1 : 0)\r\n        } else if (size.width <= 768) {\r\n            setSlicedFactor((factor < 3) ? factor : factor - 2)\r\n        } else if (size.width <= 998) {\r\n            setSlicedFactor((factor === 0) ? factor : factor - 1)\r\n        } else {\r\n            setSlicedFactor(factor)\r\n        }\r\n    }, [all, size.width, initialSlicedFactor])\r\n\r\n    return (\r\n        <div className={classes.join(' ')} style={{\r\n            gridTemplateColumns: `repeat(${((slicedFactor === initialOptions.length)\r\n                ? initialOptions.length : targets.length - 1)}, 1fr)${\r\n                (slicedFactor === initialOptions.length) ? '' : ' 40px'\r\n            }`\r\n        }}>\r\n            {targets.filter(t => t).map((target, key) =>\r\n                (!target.disabled && (key === 0)) ?\r\n                    <div\r\n                        key={key}\r\n                        ref={toggleRef}\r\n                        className={classesToggle(target).join(' ')}\r\n                        onClick={(e) => handlerState(e, target.value, key)}\r\n                    >\r\n                        <div className=\"toggle-wrapper\"></div>\r\n                        {target.label}\r\n                    </div>\r\n                : (!target.disabled) ?\r\n                    <div\r\n                        key={key}\r\n                        className={classesToggle(target).join(' ')}\r\n                        onClick={(e) => handlerState(e, target.value, key)}\r\n                    >\r\n                        <div className=\"toggle-wrapper\"></div>\r\n                        {target.label}\r\n                    </div>\r\n                : null\r\n            )}\r\n            <div ref={handleRef} className=\"handle\"></div>\r\n            <Input options={{\r\n                name, inputRef: register\r\n            }} hidden />\r\n            {(!targets || targets.length === 0) && <Message text=\"No Content\" />}\r\n        </div>\r\n    )\r\n}","import { useState, useEffect } from 'react'\r\n\r\nexport const useWindowSize = () => {\r\n    const [windowSize, setWindowSize] = useState({\r\n      width: undefined,\r\n      height: undefined,\r\n    })\r\n  \r\n    useEffect(() => {\r\n      function handleResize() {\r\n        setWindowSize({\r\n          width: window.innerWidth,\r\n          height: window.innerHeight,\r\n        })\r\n      }\r\n      \r\n      window.addEventListener(\"resize\", handleResize)\r\n      \r\n      handleResize()\r\n      \r\n      return () => window.removeEventListener(\"resize\", handleResize)\r\n    }, [])\r\n  \r\n    return windowSize\r\n  }","import React, { useEffect, useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport '../styles/Dropzone.css'\r\nimport { useFormContext } from 'react-hook-form'\r\n\r\nexport default ({ options }) => {\r\n    const {\r\n        type,\r\n        name,\r\n        accept\r\n    } = options\r\n\r\n    const {\r\n        register,\r\n        unregister,\r\n        setValue,\r\n        watch\r\n    } = useFormContext()\r\n\r\n    const file = watch(name)\r\n\r\n    const onDrop = useCallback(\r\n        (droppedFile) => {\r\n            const file = droppedFile[0]\r\n            setValue(name, file)\r\n        },\r\n        [setValue, name],\r\n    )\r\n\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n        onDrop,\r\n        multiple: false,\r\n        maxFiles: 1,\r\n        accept\r\n    })\r\n\r\n    const classes = [\r\n    'ui-dropzone', type\r\n    ]\r\n\r\n    useEffect(() => {\r\n        register(name)\r\n        return () => {\r\n            unregister(name)\r\n        }\r\n    }, [register, unregister, name])\r\n\r\n  return (\r\n    <div className={classes.join(' ')}>\r\n        <div className=\"dropzone-container\" {...getRootProps()}>\r\n            <input\r\n                id={name}\r\n                name={name}\r\n                accept={accept}\r\n                {...getInputProps()}\r\n            />\r\n            <div className={`dropzone-area${(isDragActive ? ' active' : '')}`}>\r\n                <p>Drop Image</p>\r\n\r\n                {!!file && (\r\n                    <div className=\"preview\">\r\n                        <img\r\n                            src={URL.createObjectURL(file)}\r\n                            alt={file.name}\r\n                        />\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\nimport Query from '../ui/Query'\r\nimport Row from '../ui/Row'\r\nimport Form from '../ui/Form'\r\nimport Input from '../ui/Input'\r\nimport Avatar from '../ui/Avatar'\r\nimport TextArea from '../ui/TextArea'\r\nimport Toggler from '../ui/Toggler'\r\nimport Dropzone from '../ui/Dropzone'\r\nimport {\r\n    GET_ALL_STATUS,\r\n    GET_ALL_HUBS,\r\n    ADD_POST,\r\n    EDIT_POST\r\n} from '../../utils/queries'\r\n\r\nexport default ({\r\n    document,\r\n    close,\r\n    type,\r\n    add=false,\r\n    edit=false,\r\n    isTitle,\r\n    isSubtitle,\r\n    isDescription,\r\n    isContent,\r\n    isHub,\r\n    isStatus,\r\n    isPreview\r\n}) => {\r\n    const variablesCompose = (form, options) => {\r\n        const variables = {\r\n            ...options, type,\r\n            title: form.title,\r\n            status: form.status || 'PUBLISHED'\r\n        }\r\n        \r\n        if (edit) variables.id = document._id\r\n        if (form.subtitle) variables.subtitle = form.subtitle\r\n        if (form.description) variables.description = form.description\r\n        if (form.content) variables.content = form.content\r\n        if (form.preview) variables.preview = form.preview\r\n        if (form.hub) variables.hub = form.hub\r\n\r\n        return variables\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            wide\r\n            add={add}\r\n            edit={edit}\r\n            query={(add) ? ADD_POST : EDIT_POST}\r\n            variables={(form, options) => variablesCompose(form, options)}\r\n            afterEffect={close}\r\n        >\r\n            {({ register, loading, setValue }) => (\r\n                <React.Fragment>\r\n                    {(isTitle) && <Input options={{\r\n                        type: 'text',\r\n                        name: 'title',\r\n                        inputRef: register(),\r\n                        defaultValue: document?.title || '',\r\n                        placeholder: 'Enter title',\r\n                        disabled: loading\r\n                    }} />}\r\n\r\n                    {(isSubtitle && (type === 'ARTICLE')) && <Input options={{\r\n                        type: 'text',\r\n                        name: 'subtitle',\r\n                        inputRef: register(),\r\n                        defaultValue: document?.subtitle || '',\r\n                        placeholder: 'Enter subtitle',\r\n                        disabled: loading\r\n                    }} />}\r\n\r\n                    {(isDescription && (type === 'ARTICLE')) && <Input options={{\r\n                        type: 'text',\r\n                        name: 'description',\r\n                        inputRef: register(),\r\n                        defaultValue: document?.description || '',\r\n                        placeholder: 'Enter description',\r\n                        disabled: loading\r\n                    }} />}\r\n\r\n                    {(isContent) && <TextArea options={{\r\n                        type: 'text',\r\n                        name: 'content',\r\n                        inputRef: register(),\r\n                        defaultValue: document?.content || '',\r\n                        placeholder: 'Enter content',\r\n                        disabled: loading\r\n                    }} />}\r\n\r\n                    {(isHub) && <Query query={GET_ALL_HUBS} pseudo={{ height: 45, count: 6 }}>\r\n                        {({ data }) => (\r\n                            <Toggler options={{\r\n                                name: 'hub', setValue,\r\n                                register: register(),\r\n                                initialSlicedFactor: 2,\r\n                                initialOptions: data.allHubs.map(hub => ({\r\n                                    value: hub.id,\r\n                                    label: (\r\n                                        <Row key={hub.id}>\r\n                                            <Avatar avatar={{ path: hub.icon.path }} properties={['circle']} />\r\n                                            <p>{hub.title}</p>\r\n                                        </Row>\r\n                                    )\r\n                                }))\r\n                            }} />\r\n                        )}\r\n                    </Query>}\r\n\r\n                    {(isStatus) && <Query query={GET_ALL_STATUS}>\r\n                        {({ data }) => (\r\n                            <Toggler options={{\r\n                                name: 'status', setValue,\r\n                                register: register(),\r\n                                initialOptions: data.allStatus.map((item, key) => ({\r\n                                    value: item,\r\n                                    label: (\r\n                                        <Row key={key}>\r\n                                            <p>{item}</p>\r\n                                        </Row>\r\n                                    )}))\r\n                            }}/>\r\n                        )}\r\n                    </Query>}\r\n\r\n                    {(isPreview && (type === 'ARTICLE')) && <Dropzone\r\n                        options={{\r\n                            name: 'preview',\r\n                            accept: 'image/*'\r\n                        }}\r\n                    />}\r\n                </React.Fragment>\r\n            )}\r\n        </Form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash,\r\n    faCompass,\r\n    faPencilAlt\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\nimport Query from './ui/Query'\r\nimport Row from './ui/Row'\r\nimport Column from './ui/Column'\r\nimport Container from './ui/Container'\r\nimport Subscription from './ui/Subscription'\r\nimport Headline from './ui/Headline'\r\nimport List from './ui/List'\r\nimport Button from './ui/Button'\r\nimport Table from './ui/Table'\r\nimport FormPost from './forms/Post'\r\nimport DeleteEntries from './forms/Delete'\r\nimport { GET_ALL_POSTS, SUB_ALL_POSTS, DELETE_POSTS } from '../utils/queries'\r\nimport 'moment/locale/ru'\r\nimport './styles/Table.css'\r\n\r\nfunction getPostIcon(type) {\r\n    if (type === 'ARTICLE')\r\n        return faPencilAlt\r\n    else\r\n        return faCompass\r\n}\r\n\r\nfunction getChoicePost(action, data) {\r\n    return ({\r\n        path: '/',\r\n        title: 'Choose your type post',\r\n        component: ({ jump }) => (\r\n            <Container>\r\n                <List options={{\r\n                    type: 'grid stretch center',\r\n                    list: (data?.allPostTypes || []).map(postType => ({\r\n                        id: `/${action}/${postType.toLowerCase()}`,\r\n                        label: postType,\r\n                        icon: getPostIcon(postType)\r\n                    })),\r\n                    handlerItem: (item) => {\r\n                        jump(item.id)\r\n                    }\r\n                }}>\r\n                    {({ item }) => (\r\n                        <Container>\r\n                            <Column>\r\n                                <div className=\"icon large\">\r\n                                    <FontAwesomeIcon icon={item.icon} />\r\n                                </div>\r\n                                <p className=\"name\">{item.label}</p>\r\n                            </Column>\r\n                        </Container>\r\n                    )}\r\n                </List>\r\n            </Container>\r\n        ),\r\n    })\r\n}\r\n\r\n// ACTION define current type of form\r\nfunction getFormPost(action, postType, document=null, isActiveFields) {\r\n    return ({\r\n        path: `/${action}/${postType}`,\r\n        title: `${action} ${postType}`,\r\n        component: ({ close, back }) => <FormPost\r\n            add={(action === 'add')}\r\n            edit={(action === 'edit')}\r\n            type={postType.toUpperCase()}\r\n            document={document}\r\n            close={close}\r\n            back={back}\r\n            {...isActiveFields}\r\n        />\r\n    })\r\n}\r\n\r\nfunction getPostRoutes(action, postType, data, document, fields) {\r\n    const isActiveFields = {\r\n        isTitle: true,\r\n        isSubtitle: true,\r\n        isDescription: true,\r\n        isContent: true,\r\n        isHub: true,\r\n        isPreview: true,\r\n        isStatus: true,\r\n        ...fields\r\n    }\r\n    return [\r\n        getChoicePost(action, data),\r\n        getFormPost('edit', postType, document, isActiveFields),\r\n        getFormPost('add', postType, document, isActiveFields)\r\n    ]\r\n}\r\n\r\nconst Delete = ({ table, dishands, showModal }) => (\r\n    <Button options={{\r\n        state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n        disabled: dishands,\r\n        classNames: 'stretch',\r\n        handler: () => {\r\n            showModal([\r\n                {\r\n                    path: '/',\r\n                    title: 'Delete Post',\r\n                    component: ({ close }) => <DeleteEntries\r\n                        query={DELETE_POSTS}\r\n                        entries={table.filter(t => t.checked)}\r\n                        handler={async (action, entry, docs) => {\r\n                            await action({\r\n                                variables: {\r\n                                    posts: (entry)\r\n                                        ? [{\r\n                                            id: entry._id,\r\n                                            author: entry.author.name\r\n                                        }]\r\n                                        : docs.map(doc => ({\r\n                                            id: doc._id,\r\n                                            author: doc.author.name\r\n                                        }))\r\n                                }\r\n                            })\r\n                        }}\r\n                        close={close}\r\n                    />\r\n                }\r\n            ], true)\r\n        }\r\n    }}>\r\n        <FontAwesomeIcon icon={faTrash} />\r\n    </Button>\r\n)\r\n\r\nconst Mutate = ({ add, edit, table, dishands, data, showModal }) => {\r\n    const docs = table.filter(t => t.checked)\r\n    const post = (docs.length === 1) ? docs[0] : false\r\n\r\n    return (\r\n        <Button options={{\r\n            state: (dishands || (!post)) ? 'disable icon inactive' : 'active icon',\r\n            disabled: dishands || (!post),\r\n            classNames: 'stretch',\r\n            handler: () => (post) && showModal(getPostRoutes(\r\n                ((add && 'add') || (edit && 'edit')), post.type, data, document, {}\r\n            ))\r\n        }}>\r\n            <FontAwesomeIcon icon={(add) ? faPlus : faPen} />\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Posts</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_POSTS}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_POSTS} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.posts) || data.allPosts),\r\n                                    dataTable: ((subData && subData.posts) || data.allPosts).map(post => ([\r\n                                        { header: 'ID', value: post.id, type: 'text', visible: false },\r\n                                        { header: 'Изображение', value: post.preview.path, type: 'img', visible: false },\r\n                                        { header: 'Заголовок', value: post.title, type: 'text' },\r\n                                        { header: 'Подзаголовок', value: post.subtitle, type: 'text', visible: false },\r\n                                        { header: 'Описание', value: post.description, type: 'text', visible: false },\r\n                                        { header: 'Содержимое', value: post.content, type: 'text' },\r\n                                        { header: 'Комментарии', value: post.comments.length, type: 'text' },\r\n                                        { header: 'Сообщество', value: post.hub.title, type: 'text' },\r\n                                        { header: 'Статус', value: post.status, type: 'text' },\r\n                                        { header: 'Дата изменения', value: <Moment date={new Date(new Date().setTime(post.updatedAt))} format=\"DD.MM.YYYY\" />, type: 'text', visible: false },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(post.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => <Delete\r\n                                            table={table}\r\n                                            dishands={dishands}\r\n                                            showModal={showModal}\r\n                                        />,\r\n                                        ({ table, dishands }) => <Mutate\r\n                                            edit\r\n                                            table={table}\r\n                                            dishands={dishands}\r\n                                            showModal={showModal}\r\n                                            data={data}\r\n                                        />,\r\n                                        ({ table, dishands }) => <Mutate\r\n                                            add\r\n                                            table={table}\r\n                                            dishands={dishands}\r\n                                            showModal={showModal}\r\n                                            data={data}\r\n                                        />\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\n// import { useForm } from 'react-hook-form'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faImage,\r\n    faTrash,\r\n    faPlus\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Query from '../ui/Query'\r\nimport Row from '../ui/Row'\r\nimport Container from '../ui/Container'\r\nimport Form from '../ui/Form'\r\nimport List from '../ui/List'\r\nimport Message from '../ui/Message'\r\nimport Select from '../ui/Select'\r\nimport Button from '../ui/Button'\r\nimport Input from '../ui/Input'\r\nimport Dropdown from '../ui/Dropdown'\r\nimport Checkbox from '../ui/Checkbox'\r\nimport Toggler from '../ui/Toggler'\r\nimport Divider from '../ui/Divider'\r\nimport {\r\n    GET_ALL_ICONS,\r\n    GET_ALL_AWARDS,\r\n    GET_ALL_CONDITION_ENUMS,\r\n    GET_ALL_USERS,\r\n    GET_ALL_POSTS,\r\n    GET_ALL_HUBS,\r\n    GET_ALL_ACTS,\r\n    GET_ALL_STATUS,\r\n    ADD_ACT,\r\n    EDIT_ACT\r\n} from '../../utils/queries'\r\nimport { config } from '../../utils/config'\r\nimport { v4 } from 'uuid'\r\n\r\nconst api = config.get('api')\r\n\r\nconst AREAS_QUERIES = {\r\n    'USER': GET_ALL_USERS,\r\n    'POST': GET_ALL_POSTS,\r\n    'HUB': GET_ALL_HUBS\r\n}\r\n\r\nconst ActTasks = ({ register, tasks, setTasks }) => {\r\n    return (\r\n        <div className=\"ui-tasks\">\r\n            <div className=\"manage\">\r\n                <Row type=\"flex\">\r\n                    <Button options={{\r\n                        state: 'inactive icon',\r\n                        handler: () => {\r\n                            setTasks(prev => ([\r\n                                ...prev,\r\n                                {\r\n                                    id: v4(),\r\n                                    title: null,\r\n                                    icon: {},\r\n                                    condition: [],\r\n                                    awards: [],\r\n                                    isDropdownIcons: false\r\n                                }\r\n                            ]))\r\n                        }\r\n                    }}>\r\n                        <Row type=\"flex center\">\r\n                            <FontAwesomeIcon icon={faPlus} />\r\n                            <p>Add Task</p>\r\n                        </Row>\r\n                    </Button>\r\n                </Row>\r\n            </div>\r\n            \r\n            <ul className=\"content\">\r\n                {(tasks.length > 0) ? tasks.map((task) => (\r\n                    <li key={task.id} className=\"ui-task\">\r\n                        <Row type=\"flex\" className=\"header\">\r\n                            <Container clear sticky>\r\n                                <Query query={GET_ALL_ICONS} pseudo={{ count: 1, height: 45 }}>\r\n                                    {({ data }) => (\r\n                                        <React.Fragment>\r\n                                            <Button options={{\r\n                                                state: 'inactive',\r\n                                                handler: () => {\r\n                                                    setTasks(prev => prev.map((_task) =>\r\n                                                        (_task.id === task.id) ? ({\r\n                                                            ..._task,\r\n                                                            dropdownIcons: !_task.dropdownIcons\r\n                                                        }) : ({\r\n                                                            ..._task\r\n                                                        })\r\n                                                    ))\r\n                                                }\r\n                                            }}>\r\n                                                {(task.icon.path) ? (\r\n                                                    <img\r\n                                                        className=\"image\"\r\n                                                        src={(task.icon.path).replace('./', `${api}/`)}\r\n                                                        alt=\"Hub\"\r\n                                                    />\r\n                                                )\r\n                                                : <FontAwesomeIcon icon={faImage} />}\r\n                                            </Button>\r\n\r\n                                            <Dropdown options={{ dropdown: task.dropdownIcons, styles: { left: 0 } }}>\r\n                                                {(data && data.allIcons) ? <List options={{\r\n                                                    type: 'grid',\r\n                                                    state: task.icon,\r\n                                                    list: data.allIcons,\r\n                                                    handlerItem: (item) => {\r\n                                                        setTasks(prev => prev.map((_task) =>\r\n                                                            (_task.id === task.id) ? ({\r\n                                                                ..._task,\r\n                                                                dropdownIcons: false,\r\n                                                                icon: item\r\n                                                            }) : ({\r\n                                                                ..._task\r\n                                                            })\r\n                                                        ))\r\n                                                    }\r\n                                                }}>\r\n                                                    {({ item }) => (\r\n                                                        <img\r\n                                                            className=\"image\"\r\n                                                            src={(item.path).replace('./', `${api}/`)}\r\n                                                            alt=\"Hub\"\r\n                                                        />\r\n                                                    )}\r\n                                                </List> : <Message text=\"No Icons\" padding />}\r\n                                            </Dropdown>\r\n                                        </React.Fragment>\r\n                                    )}\r\n                                </Query>\r\n                            </Container>\r\n                            <Input options={{\r\n                                ref: register(),\r\n                                type: 'text',\r\n                                state: 'minimize',\r\n                                name: `[task_${task.id}][title]`,\r\n                                defaultValue: task.title || '',\r\n                                placeholder: 'Enter title'\r\n                            }} />\r\n                            <Button options={{\r\n                                state: 'inactive icon',\r\n                                handler: () => {\r\n                                    setTasks(prev => prev.filter((_task) =>\r\n                                        (task.id !== _task.id)\r\n                                    ))\r\n                                }\r\n                            }}>\r\n                                <FontAwesomeIcon icon={faTrash} />\r\n                            </Button>\r\n                        </Row>\r\n\r\n                        <div className=\"condition\">\r\n                            <Button options={{\r\n                                state: 'inactive',\r\n                                handler: () => {\r\n                                    setTasks(prev => prev.map((_task) =>\r\n                                        (_task.id === task.id) ? ({\r\n                                            ..._task,\r\n                                            condition: _task.condition.concat({\r\n                                                id: v4(),\r\n                                                action: null,\r\n                                                target: null,\r\n                                                goals: [],\r\n                                                multiply: null,\r\n                                                specific: {\r\n                                                    id: null,\r\n                                                    area: null\r\n                                                },\r\n                                                union: null,\r\n                                                link: null,\r\n                                                isComplexCondition: []\r\n                                            })\r\n                                        }) : ({\r\n                                            ..._task\r\n                                        })\r\n                                    ))\r\n                                }\r\n                            }}>\r\n                                <Row type=\"flex center\">\r\n                                    <FontAwesomeIcon icon={faPlus} />\r\n                                    <p>Add Condition</p>\r\n                                </Row>\r\n                            </Button>\r\n\r\n                            <ul className=\"list\">\r\n                                <Query query={GET_ALL_CONDITION_ENUMS} pseudo={{ count: 1, height: 90 }}>\r\n                                    {({ data }) => (\r\n                                        (task.condition?.length > 0) ? task.condition.map((condition, j) => (\r\n                                            <li key={condition.id} className=\"item\">\r\n                                                \r\n                                                <div className=\"manage\">\r\n                                                    <Button options={{\r\n                                                        state: 'inactive icon',\r\n                                                        handler: () => {\r\n                                                            setTasks(prev => prev.map((_task) =>\r\n                                                                (_task.id === task.id) ? ({\r\n                                                                    ..._task,\r\n                                                                    condition: _task.condition.filter((_condition) =>\r\n                                                                        (_condition.id !== condition.id)    \r\n                                                                    )\r\n                                                                }) : ({\r\n                                                                    ..._task\r\n                                                                })\r\n                                                            ))\r\n                                                        }\r\n                                                    }}>\r\n                                                        <FontAwesomeIcon icon={faTrash} />\r\n                                                    </Button>\r\n                                                </div>\r\n\r\n                                                <div className=\"content\">\r\n                                                    <p className=\"ui-title\">Condition {j + 1}</p>\r\n                                                    <Select options={{\r\n                                                        name: `[task_${task.id}][condition_${condition.id}][action]`,\r\n                                                        value: condition.action,\r\n                                                        placeholder: 'Choose action',\r\n                                                        options: data.allActions.map(a => ({\r\n                                                            value: a,\r\n                                                            label: a\r\n                                                        })),\r\n                                                        onChange: (e) => {\r\n                                                            setTasks(prev => prev.map((_task) =>\r\n                                                                (_task.id === task.id) ? ({\r\n                                                                    ..._task,\r\n                                                                    condition: _task.condition.map((_condition) =>\r\n                                                                        (_condition.id === condition.id) ? ({\r\n                                                                            ..._condition,\r\n                                                                            action: e\r\n                                                                        }) : ({\r\n                                                                            ..._condition\r\n                                                                        })\r\n                                                                    )\r\n                                                                }) : ({\r\n                                                                    ..._task\r\n                                                                })    \r\n                                                            ))\r\n                                                        }\r\n                                                    }} />\r\n                                                    <Select options={{\r\n                                                        name: `[task_${task.id}][condition_${condition.id}][target]`,\r\n                                                        value: condition.target,\r\n                                                        placeholder: 'Choose target',\r\n                                                        options: data.allAreas.map(a => ({\r\n                                                            value: a,\r\n                                                            label: a\r\n                                                        })),\r\n                                                        onChange: (e) => {\r\n                                                            setTasks(prev => prev.map((_task) =>\r\n                                                                (_task.id === task.id) ? ({\r\n                                                                    ..._task,\r\n                                                                    condition: _task.condition.map((_condition) =>\r\n                                                                        (_condition.id === condition.id) ? ({\r\n                                                                            ..._condition,\r\n                                                                            target: e\r\n                                                                        }) : ({\r\n                                                                            ..._condition\r\n                                                                        })\r\n                                                                    )\r\n                                                                }) : ({\r\n                                                                    ..._task\r\n                                                                })    \r\n                                                            ))\r\n                                                        }\r\n                                                    }} />\r\n                                                    <Select options={{\r\n                                                        name: `[task_${task.id}][condition_${condition.id}][goals]`,\r\n                                                        value: condition.goals,\r\n                                                        placeholder: 'Choose goals',\r\n                                                        options: data.allGoals.map(a => ({\r\n                                                            value: a,\r\n                                                            label: a\r\n                                                        })),\r\n                                                        closeMenuOnSelect: false,\r\n                                                        isMulti: true,\r\n                                                        onChange: (e) => {\r\n                                                            setTasks(prev => prev.map((_task) =>\r\n                                                                (_task.id === task.id) ? ({\r\n                                                                    ..._task,\r\n                                                                    condition: _task.condition.map((_condition) =>\r\n                                                                        (_condition.id === condition.id) ? ({\r\n                                                                            ..._condition,\r\n                                                                            goals: e\r\n                                                                        }) : ({\r\n                                                                            ..._condition\r\n                                                                        })\r\n                                                                    )\r\n                                                                }) : ({\r\n                                                                    ..._task\r\n                                                                })    \r\n                                                            ))\r\n                                                        }\r\n                                                    }} />\r\n                                                    {((condition.goals?.length > 0) && condition.goals.find(g => g.value === 'QUANTITY') && (\r\n                                                        <Input options={{\r\n                                                            ref: register(),\r\n                                                            type: 'number',\r\n                                                            defaultValue: condition?.multiply || '',\r\n                                                            name: `[task_${task.id}][condition_${condition.id}][multiply]`,\r\n                                                            placeholder: 'Enter multiply'\r\n                                                        }} />\r\n                                                    ))}\r\n                                                    {((condition.goals?.length > 0) && condition.goals.find(g => g.value === 'SPECIFIC') && (\r\n                                                        <React.Fragment>\r\n                                                            <Select options={{\r\n                                                                name: `[task_${task.id}][condition_${condition.id}][area]`,\r\n                                                                value: condition.specific.area,\r\n                                                                placeholder: 'Choose area',\r\n                                                                options: data.allAreas.map(a => ({\r\n                                                                    value: a,\r\n                                                                    label: a\r\n                                                                })),\r\n                                                                onChange: (e) => {\r\n                                                                    setTasks(prev => prev.map((_task) =>\r\n                                                                        (_task.id === task.id) ? ({\r\n                                                                            ..._task,\r\n                                                                            condition: _task.condition.map((_condition) =>\r\n                                                                                (_condition.id === condition.id) ? ({\r\n                                                                                    ..._condition,\r\n                                                                                    specific: {\r\n                                                                                        area: e\r\n                                                                                    }\r\n                                                                                }) : ({\r\n                                                                                    ..._condition\r\n                                                                                })\r\n                                                                            )\r\n                                                                        }) : ({\r\n                                                                            ..._task\r\n                                                                        })\r\n                                                                    ))\r\n                                                                }\r\n                                                            }} />\r\n                                                            {(condition.specific.area) && (\r\n                                                                <SpecificSelect\r\n                                                                    task={task}\r\n                                                                    condition={condition}\r\n                                                                    setTasks={setTasks}\r\n                                                                />\r\n                                                            )}\r\n                                                        </React.Fragment>\r\n                                                    ))}\r\n                                                    <Checkbox options={{\r\n                                                        state: condition.isComplexCondition,\r\n                                                        list: [\r\n                                                            { id: 0, title: 'Complex condition' }\r\n                                                        ],\r\n                                                        handler: (item) => {\r\n                                                            setTasks(prev => prev.map((_task) =>\r\n                                                                (_task.id === task.id) ? ({\r\n                                                                    ..._task,\r\n                                                                    condition: _task.condition.map((_condition) =>\r\n                                                                        (_condition.id === condition.id) ? ({\r\n                                                                            ..._condition,\r\n                                                                            isComplexCondition: item\r\n                                                                        }) : ({\r\n                                                                            ..._condition\r\n                                                                        })\r\n                                                                    )\r\n                                                                }) : ({\r\n                                                                    ..._task\r\n                                                                })\r\n                                                            ))\r\n                                                        }\r\n                                                    }} />\r\n                                                    {(condition.isComplexCondition.length > 0) && (\r\n                                                        <Select options={{\r\n                                                            name: `[task_${task.id}][condition_${condition.id}][union]`,\r\n                                                            value: condition.union,\r\n                                                            placeholder: 'Choose union',\r\n                                                            options: data.allUnions.map(u => ({\r\n                                                                value: u,\r\n                                                                label: u\r\n                                                            })),\r\n                                                            onChange: (e) => {\r\n                                                                setTasks(prev => prev.map((_task) =>\r\n                                                                    (_task.id === task.id) ? ({\r\n                                                                        ..._task,\r\n                                                                        condition: _task.condition.map((_condition) =>\r\n                                                                            (_condition.id === condition.id) ? ({\r\n                                                                                ..._condition,\r\n                                                                                union: e\r\n                                                                            }) : ({\r\n                                                                                ..._condition\r\n                                                                            })\r\n                                                                        )\r\n                                                                    }) : ({\r\n                                                                        ..._task\r\n                                                                    })    \r\n                                                                ))\r\n                                                            }\r\n                                                        }} />\r\n                                                    )}\r\n                                                    {((condition.isComplexCondition.length > 0) && condition.union) && (\r\n                                                        (task.condition.length > 1) ? <Select options={{\r\n                                                            name: `[task_${task.id}][condition_${condition.id}][link]`,\r\n                                                            value: condition.link,\r\n                                                            placeholder: 'Choose link',\r\n                                                            options: task.condition\r\n                                                                .map((c, k) => (c.id !== condition.id) ? ({\r\n                                                                    value: c,\r\n                                                                    label: `Condition ${k + 1}`\r\n                                                                }) : null)\r\n                                                                .filter(c => c),\r\n                                                            onChange: (e) => {\r\n                                                                setTasks(prev => prev.map((_task) =>\r\n                                                                    (_task.id === task.id) ? ({\r\n                                                                        ..._task,\r\n                                                                        condition: _task.condition.map((_condition) =>\r\n                                                                            (_condition.id === condition.id) ? ({\r\n                                                                                ..._condition,\r\n                                                                                link: e\r\n                                                                            }) : ({\r\n                                                                                ..._condition\r\n                                                                            })\r\n                                                                        )\r\n                                                                    }) : ({\r\n                                                                        ..._task\r\n                                                                    })    \r\n                                                                ))\r\n                                                            }\r\n                                                        }} /> : <Message text=\"Please, add new condition for attached link\" padding />\r\n                                                    )}\r\n                                                </div>\r\n                                            </li>\r\n                                        )) : <Message text=\"No Condition\" padding />\r\n                                    )}\r\n                                </Query>\r\n                            </ul>\r\n                        </div>\r\n\r\n                        <Query query={GET_ALL_AWARDS} pseudo={{ count: 1, height: 45 }}>\r\n                            {({ data }) => {\r\n                                const awardsTypes = data.allAwardTypes\r\n\r\n                                return (\r\n                                    <div className=\"awards\">\r\n                                        <Button options={{\r\n                                            state: 'inactive',\r\n                                            disabled: (awardsTypes.length === task.awards.length),\r\n                                            handler: () => {\r\n                                                setTasks(prev => prev.map((_task) =>\r\n                                                    (_task.id === task.id) ? ({\r\n                                                        ..._task,\r\n                                                        awards: [\r\n                                                            ..._task.awards,\r\n                                                            {\r\n                                                                id: v4(),\r\n                                                                award: null,\r\n                                                                quantity: null\r\n                                                            }\r\n                                                        ]\r\n                                                    }) : ({\r\n                                                        ..._task\r\n                                                    })\r\n                                                ))\r\n                                            }\r\n                                        }}>\r\n                                            <Row type=\"flex center\">\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                                <p>Add Award</p>\r\n                                            </Row>\r\n                                        </Button>\r\n\r\n                                        <ul className=\"list\">\r\n                                            {(task.awards.length > 0) ? (\r\n                                                task.awards.map((award, j) => (\r\n                                                    <li key={award.id} className=\"item\">\r\n                                                        <div className=\"manage\">\r\n                                                            <Button options={{\r\n                                                                state: 'inactive icon',\r\n                                                                handler: () => {\r\n                                                                    setTasks(prev => prev.map((_task) =>\r\n                                                                        (_task.id === task.id) ? ({\r\n                                                                            ..._task,\r\n                                                                            awards: _task.awards.filter((_award) =>\r\n                                                                                (_award.id !== award.id)    \r\n                                                                            )\r\n                                                                        }) : ({\r\n                                                                            ..._task\r\n                                                                        })\r\n                                                                    ))\r\n                                                                }\r\n                                                            }}>\r\n                                                                <FontAwesomeIcon icon={faTrash} />\r\n                                                            </Button>\r\n                                                        </div>\r\n\r\n                                                        <div className=\"content\">\r\n                                                            <p className=\"ui-title\">Award {j + 1}</p>\r\n\r\n                                                            <Select options={{\r\n                                                                name: `[task_${task.id}][condition_${award.id}][award]`,\r\n                                                                value: award.award,\r\n                                                                placeholder: 'Choose award',\r\n                                                                options: awardsTypes\r\n                                                                    .filter(p => !task.awards\r\n                                                                        .find(a => a.award ? (a.award.value === p) : false)\r\n                                                                    )\r\n                                                                    .map(p => ({\r\n                                                                        value: p,\r\n                                                                        label: p\r\n                                                                    })\r\n                                                                ),\r\n                                                                onChange: (e) => {\r\n                                                                    setTasks(prev => prev.map((_task) =>\r\n                                                                        (_task.id === task.id) ? ({\r\n                                                                            ..._task,\r\n                                                                            awards: _task.awards.map((_award) =>\r\n                                                                                (_award.id === award.id)\r\n                                                                                    ? ({\r\n                                                                                        ..._award,\r\n                                                                                        award: e\r\n                                                                                    }) : ({\r\n                                                                                        ..._award\r\n                                                                                    })\r\n                                                                            )\r\n                                                                        }) : ({\r\n                                                                            ..._task\r\n                                                                        })    \r\n                                                                    ))\r\n                                                                }\r\n                                                            }} />\r\n                                                            <Input options={{\r\n                                                                ref: register(),\r\n                                                                type: 'number',\r\n                                                                defaultValue: award.quantity || '',\r\n                                                                name: `[task_${task.id}][award_${award.id}][value]`,\r\n                                                                placeholder: 'Value'\r\n                                                            }} />\r\n                                                        </div>\r\n                                                    </li>\r\n                                                ))\r\n                                            )\r\n                                            : <Message text=\"No Awards\" padding />}\r\n                                        </ul>\r\n                                    </div>\r\n                                )\r\n                            }}\r\n                        </Query>\r\n                    </li>\r\n                )) : <Message text=\"No Tasks\" padding />}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ActAwards = ({ register, actAwards, setActAwards }) => {\r\n    return (\r\n        <Query query={GET_ALL_AWARDS} pseudo={{ count: 1, height: 45 }}>\r\n            {({ data }) => {\r\n                const awardsTypes = data.allAwardTypes\r\n\r\n                return (\r\n                    <div className=\"ui-awards\">\r\n                        <div className=\"manage\">\r\n                            <Button options={{\r\n                                state: 'inactive',\r\n                                disabled: (awardsTypes.length === actAwards.length),\r\n                                handler: () => {\r\n                                    setActAwards(prev => ([\r\n                                        ...prev,\r\n                                        {\r\n                                            id: v4(),\r\n                                            award: null,\r\n                                            quantity: null\r\n                                        }\r\n                                    ]))\r\n                                }\r\n                            }}>\r\n                                <Row type=\"flex center\">\r\n                                    <FontAwesomeIcon icon={faPlus} />\r\n                                    <p>Add Act Award</p>\r\n                                </Row>\r\n                            </Button>\r\n                        </div>\r\n\r\n                        <ul className=\"list\">\r\n                            {(actAwards.length > 0) ? (\r\n                                actAwards.map((actAward, j) => (\r\n                                    <li key={actAward.id} className=\"item\">\r\n                                        <div className=\"manage\">\r\n                                            <Button options={{\r\n                                                state: 'inactive icon',\r\n                                                handler: () => {\r\n                                                    setActAwards(prev => prev.filter((_actAward) =>\r\n                                                        (_actAward.id !== actAward.id)\r\n                                                    ))\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        </div>\r\n\r\n                                        <div className=\"content\">\r\n                                            <p className=\"ui-title\">Award {j + 1}</p>\r\n\r\n                                            <Select options={{\r\n                                                name: `[act][award_${actAward.id}][award]`,\r\n                                                value: actAward.award,\r\n                                                placeholder: 'Choose award',\r\n                                                options: awardsTypes\r\n                                                    .filter(p => !actAwards\r\n                                                        .find(a => a.award ? (a.award.value === p) : false)\r\n                                                    )\r\n                                                    .map(p => ({\r\n                                                        value: p,\r\n                                                        label: p\r\n                                                    })\r\n                                                ),\r\n                                                onChange: (e) => {\r\n                                                    setActAwards(prev => prev.map((_actAward) =>\r\n                                                        (_actAward.id === actAward.id) ? ({\r\n                                                                ..._actAward,\r\n                                                                award: e\r\n                                                            }) : ({\r\n                                                                ..._actAward\r\n                                                            })\r\n                                                        )\r\n                                                    )\r\n                                                }\r\n                                            }} />\r\n                                            <Input options={{\r\n                                                ref: register(),\r\n                                                type: 'number',\r\n                                                name: `[act][award_${actAward.id}][value]`,\r\n                                                defaultValue: actAward.quantity || '',\r\n                                                placeholder: 'Value'\r\n                                            }} />\r\n                                        </div>\r\n                                    </li>\r\n                                ))\r\n                            )\r\n                            : <Message text=\"No Act Awards\" padding />}\r\n                        </ul>\r\n                    </div>\r\n                )\r\n            }}\r\n        </Query>\r\n    )\r\n}\r\n\r\nconst ActSettings = ({ options }) => {\r\n    const {\r\n        isEnableSuccessor,\r\n        successor,\r\n        status,\r\n        isStatus,\r\n        isSource,\r\n        setSuccessor,\r\n        setEnabledSuccessor,\r\n        setSource,\r\n        setStatus\r\n    } = options\r\n    return (\r\n        <React.Fragment>\r\n            <Row type=\"flex\">\r\n                <Checkbox options={{\r\n                    state: isEnableSuccessor,\r\n                    list: [\r\n                        { id: 0, title: 'Enable successor' }\r\n                    ],\r\n                    handler: (item) => {\r\n                        setEnabledSuccessor(item)\r\n                    }\r\n                }} />\r\n                <Checkbox options={{\r\n                    state: isSource,\r\n                    list: [\r\n                        { id: 0, title: 'Is Source' }\r\n                    ],\r\n                    handler: (item) => {\r\n                        setSource(item)\r\n                    }\r\n                }} />\r\n            </Row>\r\n\r\n            <Query query={GET_ALL_ACTS} pseudo={{ count: 1, height: 45 }}>\r\n                {({ data }) => {\r\n                    const acts = (data && data.allActs) || []\r\n\r\n                    if (acts.length === 0)\r\n                        return <Message text=\"Please, add new act for attached successor\" padding />\r\n\r\n                    return (\r\n                        <Select options={{\r\n                            name: `[act][successor]`,\r\n                            value: successor,\r\n                            isDisabled: !isEnableSuccessor[0],\r\n                            placeholder: 'Choose successor',\r\n                            options: acts.map(p => ({\r\n                                value: p,\r\n                                label: p.title\r\n                            })),\r\n                            onChange: (e) => {\r\n                                setSuccessor(e)\r\n                            }\r\n                        }} />\r\n                    )\r\n                }}\r\n            </Query>\r\n\r\n            {(isStatus) && <Query query={GET_ALL_STATUS}>\r\n                {({ data }) => (\r\n                    <Toggler options={{\r\n                        state: status,\r\n                        handler: setStatus,\r\n                        targets: [\r\n                            ...data.allStatus.map((item, key) => ({\r\n                                type: item,\r\n                                value: (\r\n                                    <Row key={key}>\r\n                                        <p>{item}</p>\r\n                                    </Row>\r\n                                )}))\r\n                        ]}}\r\n                    />\r\n                )}\r\n            </Query>}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst SpecificSelect = ({ task, condition, setTasks }) => {\r\n    return (\r\n        <Query query={AREAS_QUERIES[condition.specific.area.value]} pseudo={{ count: 1, height: 45 }}>\r\n            {({ data }) => {\r\n                return (\r\n                    <Select options={{\r\n                        name: `[task_${task.id}][condition_${condition.id}][area]`,\r\n                        value: condition.specific.id,\r\n                        placeholder: 'Choose object',\r\n                        options: data[Object.keys(data)[0]].map(obj => ({\r\n                            value: obj,\r\n                            label: obj.title\r\n                        })),\r\n                        onChange: (e) => {\r\n                            setTasks(prev => prev.map((_task) =>\r\n                                (_task.id === task.id) ? ({\r\n                                    ..._task,\r\n                                    condition: _task.condition.map((_condition) =>\r\n                                        (_condition.id === condition.id) ? ({\r\n                                            ..._condition,\r\n                                            specific: {\r\n                                                ..._condition.specific,\r\n                                                id: e\r\n                                            }\r\n                                        }) : ({\r\n                                            ..._condition\r\n                                        })\r\n                                    )\r\n                                }) : ({\r\n                                    ..._task\r\n                                })\r\n                            ))\r\n                        }\r\n                    }} />\r\n                )\r\n            }}\r\n        </Query>\r\n    )\r\n}\r\n\r\nexport default ({\r\n    document,\r\n    close,\r\n    add=false,\r\n    edit=false,\r\n    editableStatus\r\n}) => {\r\n    const [variables, setVariables] = useState({})\r\n\r\n    const [tasks, setTasks] = useState((document?.tasks)\r\n        ? document.tasks.map(task => ({\r\n            ...task,\r\n            awards: task.awards.map(award => ({\r\n                ...award,\r\n                award: { value: award.award, label: award.award },\r\n                quantity: award.quantity\r\n            })),\r\n            condition: task.condition.map(condition => ({\r\n                ...condition,\r\n                action: { value: condition.action, label: condition.action },\r\n                goals: condition?.goals?.map(goal => ({ value: goal, label: goal })),\r\n                target: { value: condition?.target, label: condition?.target },\r\n                union: { value: condition?.union, label: condition?.union },\r\n                link: { value: condition?.link, label: condition?.link },\r\n                isComplexCondition: (condition.union)\r\n                    ? [{ id: 0, title: 'Complex condition' }]\r\n                    : []\r\n            })),\r\n            isDropdownIcons: false\r\n        }))\r\n        : []\r\n    )\r\n    const [actAwards, setActAwards] = useState((document?.awards)\r\n        ? document.awards.map(award => ({\r\n            ...award,\r\n            award: { value: award.award, label: award.award },\r\n            quantity: award.quantity\r\n        }))\r\n        : []\r\n    )\r\n\r\n    const [successor, setSuccessor] = useState(document?.successor)\r\n    const [isEnableSuccessor, setEnabledSuccessor] = useState((document?.successor) ? [{ id: 0, title: 'Enable successor' }] : [])\r\n    const [isSource, setSource] = useState((document?.isSource) ? [{ id: 0, title: 'Is Source' }] : [])\r\n    const [status, setStatus] = useState(document?.status)\r\n\r\n    const variablesCompose = (form, options) => {\r\n        let awards = []\r\n        if (actAwards) awards = actAwards\r\n            .map(actAward => ({\r\n                    award: actAward.award.value,\r\n                    quantity: +form.act[`award_${actAward.id}`]?.value\r\n                })\r\n            )\r\n        \r\n        return {\r\n            ...options,\r\n            title: form.title,\r\n            description: form.description,\r\n            tasks: tasks.map(task => ({\r\n                id: task.id,\r\n                title: form[`task_${task.id}`]?.title,\r\n                icon: task.icon.id,\r\n                condition: task.condition.map(condition => ({\r\n                    id: condition.id,\r\n                    action: condition.action?.value,\r\n                    goals: condition.goals.map(goal => goal.value),\r\n                    target: condition.target?.value,\r\n                    multiply: +form[`task_${task.id}`][`condition_${condition.id}`]?.multiply,\r\n                    union: condition.union?.value,\r\n                    link: condition.link?.value\r\n                })),\r\n                awards: task.awards.map(award => ({\r\n                    award: award.award.value,\r\n                    quantity: +form[`task_${task.id}`][`award_${award.id}`]?.value\r\n                })),\r\n            })),\r\n            awards\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const options = {\r\n            isSource: (isSource?.length > 0),\r\n            status\r\n        }\r\n        if (successor) options.successor = successor.value\r\n        if (edit) options.id = document._id\r\n        setVariables((vars) => ({\r\n            ...vars,\r\n            ...options\r\n        }))\r\n    }, [status, successor, isSource, edit, document])\r\n\r\n    return (\r\n        <Form\r\n            add={add}\r\n            edit={edit}\r\n            query={(add) ? ADD_ACT : EDIT_ACT}\r\n            variables={variables}\r\n            beforeEffect={(form, options) => variablesCompose(form, options)}\r\n            afterEffect={close}\r\n        >\r\n            {({ register, loading }) => (\r\n                <React.Fragment>\r\n                    <p className=\"ui-title\">General</p>\r\n                    <Input options={{\r\n                        ref: register({ required: 'Title is required' }),\r\n                        type: 'text',\r\n                        name: 'title',\r\n                        defaultValue: document?.title || '',\r\n                        placeholder: 'Enter title',\r\n                        disabled: loading\r\n                    }} />\r\n\r\n                    <Input options={{\r\n                        ref: register({ required: 'Description is required' }),\r\n                        type: 'text',\r\n                        name: 'description',\r\n                        defaultValue: document?.description || '',\r\n                        placeholder: 'Enter description',\r\n                        disabled: loading\r\n                    }} />\r\n\r\n                    <Divider />\r\n                    <p className=\"ui-title\">Tasks</p>\r\n                    <ActTasks register={register} tasks={tasks} setTasks={setTasks} />\r\n\r\n                    <Divider />\r\n                    <p className=\"ui-title\">Awards</p>\r\n                    <ActAwards register={register} actAwards={actAwards} setActAwards={setActAwards}/>\r\n\r\n                    <Divider />\r\n                    <p className=\"ui-title\">Settings</p>\r\n                    <ActSettings options={{\r\n                        isEnableSuccessor,\r\n                        successor,\r\n                        status: status,\r\n                        isSource,\r\n                        isStatus: editableStatus,\r\n                        setSuccessor,\r\n                        setEnabledSuccessor,\r\n                        setSource,\r\n                        setStatus: setStatus\r\n                    }} />\r\n                </React.Fragment>\r\n            )}\r\n        </Form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\nimport Query from './ui/Query'\r\nimport Subscription from './ui/Subscription'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\nimport FormAct from './forms/Act'\r\nimport DeleteEntries from './forms/Delete'\r\nimport {\r\n    GET_ALL_ACTS,\r\n    DELETE_ACTS,\r\n    SUB_ALL_ACTS\r\n} from '../utils/queries'\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Acts</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_ACTS}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_ACTS} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.acts) || data.allActs),\r\n                                    dataTable: ((subData && subData.acts) || data.allActs).map(act => ([\r\n                                        { header: 'ID', value: act.id, type: 'text', visible: false },\r\n                                        { header: 'Название', value: act.title, type: 'text' },\r\n                                        { header: 'Описание', value: act.description, type: 'text' },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(act.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Delete Act?',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_ACTS}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, docs) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            id: (entry)\r\n                                                                                ? [entry.id]\r\n                                                                                : docs.map(doc => doc._id)\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const act = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!act)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!act),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (act) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Edit',\r\n                                                        component: ({ close }) => <FormAct\r\n                                                            add\r\n                                                            document={act}\r\n                                                            close={close}\r\n                                                            isStatus\r\n                                                        />\r\n                                                    }], true)\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'active icon',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Add',\r\n                                                        component: ({ close }) => <FormAct\r\n                                                            add\r\n                                                            close={close}\r\n                                                            isStatus\r\n                                                        />\r\n                                                    }\r\n                                                ], true)\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React from 'react'\r\nimport Query from '../ui/Query'\r\nimport Row from '../ui/Row'\r\nimport Form from '../ui/Form'\r\nimport Input from '../ui/Input'\r\nimport List from '../ui/List'\r\nimport TextArea from '../ui/TextArea'\r\nimport Message from '../ui/Message'\r\nimport Toggler from '../ui/Toggler'\r\nimport { GET_ALL_STATUS, GET_ALL_ICONS, ADD_HUB, EDIT_HUB } from '../../utils/queries'\r\nimport { config } from '../../utils/config'\r\n\r\nconst api = config.get('api')\r\n\r\nexport default ({\r\n    document,\r\n    close,\r\n    add=false,\r\n    edit=false,\r\n    isTitle,\r\n    isDescription,\r\n    isSlogan,\r\n    isColor,\r\n    isIcon,\r\n    isStatus\r\n}) => {\r\n    const variablesCompose = (form) => {\r\n        const variables = {\r\n            title: form.title,\r\n            status: form.status || 'PUBLISHED'\r\n        }\r\n\r\n        if (edit) variables.id = document._id\r\n        if (form.description) variables.description = form.description\r\n        if (form.slogan) variables.slogan = form.slogan\r\n        if (form.color) variables.color = form.color\r\n\r\n        return variables\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            add={add}\r\n            edit={edit}\r\n            query={(add) ? ADD_HUB : EDIT_HUB}\r\n            variables={(form, options) => variablesCompose(form, options)}\r\n            afterEffect={close}\r\n        >\r\n            {({ register, loading, setValue }) => (\r\n                <React.Fragment>\r\n                    {(isTitle) && <Input options={{\r\n                        type: 'text',\r\n                        name: 'title',\r\n                        inputRef: register({ required: true }),\r\n                        defaultValue: document?.title || '',\r\n                        placeholder: 'Enter title',\r\n                        disabled: loading\r\n                    }} />}\r\n                    \r\n                    {(isDescription) && <TextArea options={{\r\n                        type: 'text',\r\n                        name: 'description',\r\n                        inputRef: register({ required: true }),\r\n                        defaultValue: document?.description || '',\r\n                        placeholder: 'Enter description',\r\n                        disabled: loading\r\n                    }} />}\r\n\r\n                    {(isSlogan) && <Input options={{\r\n                        type: 'text',\r\n                        name: 'slogan',\r\n                        inputRef: register({ required: true }),\r\n                        defaultValue: document?.slogan || '',\r\n                        placeholder: 'Enter slogan',\r\n                        disabled: loading\r\n                    }} />}\r\n\r\n                    {(isColor) && <Input options={{\r\n                        type: 'color',\r\n                        name: 'color',\r\n                        inputRef: register({ required: true }),\r\n                        defaultValue: document?.color || '',\r\n                        placeholder: 'Enter color',\r\n                        disabled: loading\r\n                    }} />}\r\n\r\n                    {(isIcon) && <Query query={GET_ALL_ICONS} pseudo={{ count: 1, height: 45 }}>\r\n                        {({ data }) => {\r\n                            const icons = data.allIcons\r\n\r\n                            if (icons.length === 0)\r\n                                return <Message text=\"No icons found\" padding />\r\n\r\n                            return (\r\n                                <List options={{\r\n                                    type: 'grid',\r\n                                    name: 'status', setValue,\r\n                                    register: register(),\r\n                                    list: data.allIcons\r\n                                }}>\r\n                                    {({ item }) => (\r\n                                        <img\r\n                                            className=\"image\"\r\n                                            src={(item.path).replace('./', `${api}/`)}\r\n                                            alt=\"Hub\"\r\n                                        />\r\n                                    )}\r\n                                </List>\r\n                            )\r\n                        }}\r\n                    </Query>}\r\n\r\n                    {(isStatus) && <Query query={GET_ALL_STATUS}>\r\n                        {({ data }) => (\r\n                            <Toggler options={{\r\n                                name: 'status', setValue,\r\n                                register: register(),\r\n                                initialSlicedFactor: 2,\r\n                                initialOptions: data.allStatus.map((status, index) => ({\r\n                                    value: status,\r\n                                    label: (\r\n                                        <Row key={index}>\r\n                                            <p>{status}</p>\r\n                                        </Row>\r\n                                    )\r\n                                }))\r\n                            }}/>\r\n                        )}\r\n                    </Query>}\r\n                </React.Fragment>\r\n            )}\r\n        </Form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\nimport Query from './ui/Query'\r\nimport Subscription from './ui/Subscription'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\nimport FormHub from './forms/Hub'\r\nimport DeleteEntries from './forms/Delete'\r\nimport { GET_ALL_HUBS, SUB_ALL_HUBS, DELETE_HUBS } from '../utils/queries'\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Hubs</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_HUBS}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_HUBS} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.hubs) || data.allHubs),\r\n                                    dataTable: ((subData && subData.hubs) || data.allHubs).map(hub => ([\r\n                                        { header: 'ID', value: hub.id, type: 'text', visible: false },\r\n                                        { header: 'Иконка', value: hub.icon.path, type: 'icon', visible: false },\r\n                                        { header: 'Заголовок', value: hub.title, type: 'text' },\r\n                                        { header: 'Описание', value: hub.description, type: 'text' },\r\n                                        { header: 'Слоган', value: hub.slogan, type: 'text', visible: false },\r\n                                        { header: 'Цвет', value: hub.color, type: 'color' },\r\n                                        { header: 'Пользователи', value: hub.countUsers, type: 'text', visible: false },\r\n                                        { header: 'Статус', value: hub.status, type: 'text' },\r\n                                        { header: 'Дата изменения', value: <Moment date={new Date(new Date().setTime(hub.updatedAt))} format=\"DD.MM.YYYY\" />, type: 'text', visible: false },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(hub.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Delete Article?',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_HUBS}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, docs) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            id: (entry)\r\n                                                                                ? [entry._id]\r\n                                                                                : docs.map(doc => doc._id)\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const hub = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!hub)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!hub),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (hub) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Edit Hub',\r\n                                                        component: ({ close }) => <FormHub\r\n                                                            edit\r\n                                                            document={hub}\r\n                                                            close={close}\r\n                                                            isTitle\r\n                                                            isDescription\r\n                                                            isSlogan\r\n                                                            isColor\r\n                                                            isIcon\r\n                                                            isStatus\r\n                                                        />\r\n                                                    }], true)\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'icon active',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Add Hub',\r\n                                                        component: ({ close }) => <FormHub\r\n                                                            add\r\n                                                            close={close}\r\n                                                            isTitle\r\n                                                            isDescription\r\n                                                            isSlogan\r\n                                                            isColor\r\n                                                            isIcon\r\n                                                            isStatus\r\n                                                        />\r\n                                                    }\r\n                                                ], true)\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React from 'react'\r\nimport Row from './ui/Row'\r\nimport Headline from './ui/Headline'\r\nimport Message from './ui/Message'\r\nimport './styles/Table.css'\r\n\r\nexport default () => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Tours</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Message text=\"In Development\" padding />\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport Query from '../ui/Query'\r\nimport Row from '../ui/Row'\r\nimport Form from '../ui/Form'\r\nimport Input from '../ui/Input'\r\nimport Toggler from '../ui/Toggler'\r\nimport Select from '../ui/Select'\r\nimport { GET_ALL_CHAT_TYPES, GET_ALL_USERS, ADD_CHAT, EDIT_CHAT  } from '../../utils/queries'\r\n\r\nexport default ({\r\n    document,\r\n    close,\r\n    add=false,\r\n    edit=false\r\n}) => {\r\n    const [variables, setVariables] = useState({})\r\n\r\n    const[chatType, setChatType] = useState(document?.type || 'USER_CHAT')\r\n    const[sender, setSender] = useState((document?.type === 'USER_CHAT') ? ({\r\n        value: document.members[0].name, label: document.members[0].name\r\n    }) : null)\r\n    const[reciever, setReciever] = useState((document?.type === 'USER_CHAT') ? ({\r\n        value: document.members[1].name, label: document.members[1].name\r\n    }) : null)\r\n    const[members, setMembers] = useState((document?.members) ? document.members.map(member => ({\r\n        value: member.name, label: member.name\r\n    })) : null)\r\n\r\n    const variablesCompose = (form, options) => {\r\n        return {\r\n            ...options,\r\n            ...variables,\r\n            title: form.title\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const options = {\r\n            members: (chatType.includes('USER'))\r\n                ? [sender.value, reciever.value]\r\n                : members.map(member => member.value),\r\n            type: chatType\r\n        }\r\n        if (edit) options.id = document._id\r\n        setVariables((vars) => ({\r\n            ...vars,\r\n            ...options\r\n        }))\r\n    }, [members, chatType, sender, reciever, edit, document])\r\n\r\n    return (\r\n        <Form\r\n            add={add}\r\n            edit={edit}\r\n            query={(add) ? ADD_CHAT : EDIT_CHAT}\r\n            variables={variables}\r\n            beforeEffect={(form, options) => variablesCompose(form, options)}\r\n            afterEffect={close}\r\n        >\r\n            {({ elevate, register, loading }) => (\r\n                <React.Fragment>\r\n                    <Input options={{\r\n                        ref: register({ required: true }),\r\n                        type: 'text',\r\n                        name: 'title',\r\n                        defaultValue: document.title || '',\r\n                        placeholder: 'Enter title',\r\n                        disabled: loading\r\n                    }} />\r\n\r\n                    <Query query={GET_ALL_CHAT_TYPES} pseudo={{ count: 1, height: 45 }}>\r\n                        {({ data }) => (\r\n                            <Toggler options={{\r\n                                type: 'auto',\r\n                                state: document.type || chatType,\r\n                                handler: (item) => {\r\n                                    setChatType(item)\r\n                                    elevate()\r\n                                },\r\n                                targets: (data && data.allChatTypes).map((type, key) => ({\r\n                                    type: type,\r\n                                    value: (\r\n                                        <Row key={key}>\r\n                                            <p>{type.replace('_', ' ')}</p>\r\n                                        </Row>\r\n                                    )\r\n                                }))}}\r\n                            />\r\n                        )}\r\n                    </Query>\r\n\r\n                    <Query query={GET_ALL_USERS} pseudo={{ count: 1, height: 45 }}>\r\n                        {({ data }) => (\r\n                            (chatType.includes('USER')) ? (\r\n                                <React.Fragment>\r\n                                    <Select options={{\r\n                                        defaultValue: sender,\r\n                                        placeholder: 'Choose sender',\r\n                                        options: data.allUsers.map(_sender => ({\r\n                                            value: _sender.name, label: _sender.name\r\n                                        })),\r\n                                        onChange: (e) => {\r\n                                            setSender(e)\r\n                                            elevate()\r\n                                        }\r\n                                    }} />\r\n                                    <Select options={{\r\n                                        defaultValue: reciever,\r\n                                        placeholder: 'Choose reciever',\r\n                                        options: data.allUsers.map(_reciever => ({\r\n                                            value: _reciever.name, label: _reciever.name\r\n                                        })),\r\n                                        onChange: (e) => {\r\n                                            setReciever(e)\r\n                                            elevate()\r\n                                        }\r\n                                    }} />\r\n                                </React.Fragment>\r\n                            ) : (\r\n                                <Select options={{\r\n                                    value: members,\r\n                                    placeholder: 'Choose members',\r\n                                    options: data.allUsers.map(member => ({\r\n                                        value: member.name,\r\n                                        label: member.name\r\n                                    })),\r\n                                    closeMenuOnSelect: false,\r\n                                    isMulti: true,\r\n                                    onChange: (e) => {\r\n                                        setMembers(e)\r\n                                        elevate()\r\n                                    }\r\n                                }} />\r\n                            )\r\n                        )}\r\n                    </Query>\r\n                </React.Fragment>\r\n            )}\r\n        </Form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\nimport Query from './ui/Query'\r\nimport Subscription from './ui/Subscription'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\nimport FormChat from './forms/Chat'\r\nimport DeleteEntries from './forms/Delete'\r\nimport {\r\n    GET_ALL_CHATS,\r\n    SUB_ALL_CHATS,\r\n    DELETE_CHATS\r\n} from '../utils/queries'\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Chats</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_CHATS}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_CHATS} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.chats) || data.allChats),\r\n                                    dataTable: ((subData && subData.chats) || data.allChats || []).map(chat => ([\r\n                                        { header: 'ID', value: chat.id, type: 'text', visible: false },\r\n                                        { header: 'Название', value: chat.title, type: 'text' },\r\n                                        { header: 'Участники', value: chat.members?.length, type: 'text' },\r\n                                        { header: 'Сообщений', value: chat.messages?.length, type: 'text' },\r\n                                        { header: 'Тип чата', value: chat.type, type: 'text' },\r\n                                        { header: 'Дата изменения', value: <Moment date={new Date(new Date().setTime(chat.updatedAt))} format=\"DD.MM.YYYY\" />, type: 'text', visible: false },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(chat.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Delete Chat',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_CHATS}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, docs) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            id: (entry)\r\n                                                                                ? [{\r\n                                                                                    id: entry.id,\r\n                                                                                    user: entry.user.id\r\n                                                                                }]\r\n                                                                                : docs.map(doc => ({\r\n                                                                                    id: doc.id,\r\n                                                                                    user: doc.user.id\r\n                                                                                }))\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const chat = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!chat)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!chat),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (chat) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Edit Chat',\r\n                                                        component: ({ close }) => <FormChat\r\n                                                            edit\r\n                                                            document={chat}\r\n                                                            close={close}\r\n                                                            isStatus\r\n                                                        />\r\n                                                    }], true)\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'icon active',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Add Chat',\r\n                                                        component: ({ close }) => <FormChat\r\n                                                            add\r\n                                                            close={close}\r\n                                                            isStatus\r\n                                                        />\r\n                                                    }\r\n                                                ], true)\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport Form from '../ui/Form'\r\nimport Dropzone from '../ui/Dropzone'\r\nimport { ADD_IMAGE, EDIT_IMAGE } from '../../utils/queries'\r\n\r\nexport default ({\r\n    document,\r\n    close,\r\n    add=false,\r\n    edit=false\r\n}) => {\r\n    const [variables, setVariables] = useState({})\r\n\r\n    const[image, setImage] = useState(document?.image)\r\n\r\n    useEffect(() => {\r\n        const options = {\r\n            image\r\n        }\r\n        if (edit) options.id = document._id\r\n        setVariables((vars) => ({\r\n            ...vars,\r\n            ...options\r\n        }))\r\n    }, [image, edit, document])\r\n\r\n    return (\r\n        <Form\r\n            add={add}\r\n            edit={edit}\r\n            query={(add) ? ADD_IMAGE : EDIT_IMAGE}\r\n            variables={variables}\r\n            afterEffect={close}\r\n        >\r\n            {({ elevate, register }) => (\r\n                <React.Fragment>\r\n                    <Dropzone options={{\r\n                        ref: register,\r\n                        name: 'image',\r\n                        value: image.path,\r\n                        setImage: (file) => {\r\n                            setImage(file)\r\n                            elevate()\r\n                        }\r\n                    }} />\r\n                </React.Fragment>\r\n            )}\r\n        </Form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\nimport Query from './ui/Query'\r\nimport Subscription from './ui/Subscription'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\nimport FormImage from './forms/Image'\r\nimport DeleteEntries from './forms/Delete'\r\nimport { GET_ALL_IMAGES, SUB_ALL_IMAGES, DELETE_IMAGES } from '../utils/queries'\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Gallery</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_IMAGES}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_IMAGES} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.images) || data.allImages),\r\n                                    dataTable: ((subData && subData.images) || data.allImages).map(image => ([\r\n                                        { header: 'ID', value: image.id, type: 'text', visible: false },\r\n                                        { header: 'Изображение', value: image.path, type: 'img' },\r\n                                        { header: 'Название', value: image.name, type: 'text' },\r\n                                        { header: 'Путь', value: image.path, type: 'text' },\r\n                                        { header: 'Дата изменения', value: <Moment date={new Date(new Date().setTime(image.updatedAt))} format=\"DD.MM.YYYY\" />, type: 'text', visible: false },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(image.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Delete Offer',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_IMAGES}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, entries) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            id: (entry)\r\n                                                                                ? [{\r\n                                                                                    id: entry.id,\r\n                                                                                    user: entry.user.id\r\n                                                                                }]\r\n                                                                                : entries.map(ent => ent._id)\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const image = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!image)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!image),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (image) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Edit Image',\r\n                                                        component: ({ close }) => <FormImage\r\n                                                            edit\r\n                                                            document={image}\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }], true)\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'icon active',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Add Image',\r\n                                                        component: ({ close }) => <FormImage\r\n                                                            add\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }\r\n                                                ], true)\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React from 'react'\r\nimport Query from '../ui/Query'\r\nimport Row from '../ui/Row'\r\nimport Form from '../ui/Form'\r\nimport Avatar from '../ui/Avatar'\r\nimport Toggler from '../ui/Toggler'\r\nimport Dropzone from '../ui/Dropzone'\r\nimport {\r\n    GET_ALL_RARITIES,\r\n    GET_ALL_HUBS,\r\n    ADD_AVATAR,\r\n    EDIT_AVATAR\r\n} from '../../utils/queries'\r\n\r\nexport default ({\r\n    document,\r\n    close,\r\n    type,\r\n    add=false,\r\n    edit=false,\r\n    isIcon,\r\n    isRarity,\r\n    isHub\r\n}) => {\r\n    const variablesCompose = (form) => {\r\n        const variables = {\r\n            title: form.title,\r\n            status: form.status || 'PUBLISHED'\r\n        }\r\n        \r\n        if (edit) variables.id = document._id\r\n        if (form.icon) variables.file = form.icon\r\n        if (form.rarity) variables.rarity = form.rarity\r\n        if (form.hub) variables.hub = form.hub\r\n\r\n        return variables\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            add={add}\r\n            edit={edit}\r\n            query={(add) ? ADD_AVATAR : EDIT_AVATAR}\r\n            variables={(form, options) => variablesCompose(form, options)}\r\n            afterEffect={close}\r\n        >\r\n            {({ register, setValue }) => (\r\n                <React.Fragment>\r\n                    {(isIcon) && <p className=\"ui-title\">Image</p>}\r\n                    {(isIcon) && <Dropzone\r\n                        options={{\r\n                            name: 'icon',\r\n                            accept: 'image/*'\r\n                        }}\r\n                    />}\r\n\r\n                    {(isRarity) && <p className=\"ui-title\">Rarity</p>}\r\n                    {(isRarity) && <Query query={GET_ALL_RARITIES}>\r\n                        {({ data }) => (\r\n                            <Toggler options={{\r\n                                name: 'rarity', setValue,\r\n                                register: register(),\r\n                                initialSlicedFactor: 2,\r\n                                initialOptions: data.allRarities.map((item, key) => ({\r\n                                    value: item,\r\n                                    label: (\r\n                                        <Row key={key}>\r\n                                            <p>{item}</p>\r\n                                        </Row>\r\n                                    )}))\r\n                                }}\r\n                            />\r\n                        )}\r\n                    </Query>}\r\n                    \r\n                    {(isHub) && <p className=\"ui-title\">Hub</p>}\r\n                    {(isHub) && <Query query={GET_ALL_HUBS} pseudo={{ height: 45, count: 6 }}>\r\n                        {({ data }) => (\r\n                            <Toggler options={{\r\n                                name: 'hub', setValue,\r\n                                register: register(),\r\n                                initialSlicedFactor: 2,\r\n                                initialOptions: data.allHubs.map(hub => ({\r\n                                    value: hub.id,\r\n                                    label: (\r\n                                        <Row key={hub.id}>\r\n                                            <Avatar avatar={{ path: hub.icon.path }} properties={['circle']} />\r\n                                            <p>{hub.title}</p>\r\n                                        </Row>\r\n                                    )\r\n                                }))\r\n                            }} />\r\n                        )}\r\n                    </Query>}\r\n                </React.Fragment>\r\n            )}\r\n        </Form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\nimport Query from './ui/Query'\r\nimport Subscription from './ui/Subscription'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\nimport FormAvatar from './forms/Avatar'\r\nimport DeleteEntries from './forms/Delete'\r\nimport { GET_ALL_AVATARS, SUB_ALL_AVATARS, DELETE_AVATARS } from '../utils/queries'\r\n\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Avatars</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_AVATARS}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_AVATARS} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.avatars) || (data && data.allAvatars) || []),\r\n                                    dataTable: ((subData && subData.avatars) || (data && data.allAvatars) || []).map(avatar => ([\r\n                                        { header: 'ID', value: avatar.id, type: 'text', visible: false },\r\n                                        { header: 'Изображение', value: avatar.path, type: 'icon' },\r\n                                        { header: 'Название', value: avatar.name, type: 'text', visible: false },\r\n                                        { header: 'Путь', value: avatar.path, type: 'text', visible: false },\r\n                                        { header: 'Редкость', value: avatar.rarity, type: 'text' },\r\n                                        { header: 'Сообщество', value: avatar.hub.title, type: 'text' },\r\n                                        { header: 'Дата изменения', value: <Moment date={new Date(new Date().setTime(avatar.updatedAt))} format=\"DD.MM.YYYY\" />, type: 'text', visible: false },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(avatar.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Avatar',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_AVATARS}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, entries) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            id: (entry)\r\n                                                                                ? [{\r\n                                                                                    id: entry.id,\r\n                                                                                    user: entry.user.id\r\n                                                                                }]\r\n                                                                                : entries.map(ent => ent._id)\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const avatar = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!avatar)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!avatar),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (avatar) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Avatar',\r\n                                                        component: ({ close }) => <FormAvatar\r\n                                                            edit\r\n                                                            document={avatar}\r\n                                                            close={close}\r\n                                                            isIcon\r\n                                                            isRarity\r\n                                                            isHub\r\n                                                            isStatus\r\n                                                        />\r\n                                                    }], true)\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'icon active',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Avatar',\r\n                                                        component: ({ close }) => <FormAvatar\r\n                                                            add\r\n                                                            close={close}\r\n                                                            isIcon\r\n                                                            isRarity\r\n                                                            isHub\r\n                                                            isStatus\r\n                                                        />\r\n                                                    }\r\n                                                ], true)\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport Row from '../ui/Row'\r\nimport Query from '../ui/Query'\r\nimport Form from '../ui/Form'\r\nimport Toggler from '../ui/Toggler'\r\nimport Dropzone from '../ui/Dropzone'\r\nimport { GET_ALL_ICON_TYPES, ADD_ICON, EDIT_ICON } from '../../utils/queries'\r\n\r\nexport default ({\r\n    icon,\r\n    close,\r\n    add=false,\r\n    edit=false\r\n}) => {\r\n    const [variables, setVariables] = useState({})\r\n\r\n    const [iconType, setIconType] = useState(icon?.type)\r\n    const [image, setImage] = useState(icon?.image)\r\n\r\n    useEffect(() => {\r\n        const options = {\r\n            file: image,\r\n            type: iconType\r\n        }\r\n        if (edit) options.id = icon._id\r\n        setVariables((vars) => ({\r\n            ...vars,\r\n            ...options\r\n        }))\r\n    }, [image, iconType, edit, icon])\r\n\r\n    return (\r\n        <Form\r\n            add={add}\r\n            edit={edit}\r\n            query={(add) ? ADD_ICON : EDIT_ICON}\r\n            variables={variables}\r\n            afterEffect={close}\r\n        >\r\n            {({ elevate, register }) => (\r\n                <React.Fragment>\r\n                    <p className=\"ui-title\">Image</p>\r\n                    <Dropzone options={{\r\n                        ref: register,\r\n                        name: 'image',\r\n                        value: icon.path,\r\n                        setImage: (file) => {\r\n                            setImage(file)\r\n                            elevate()\r\n                        }\r\n                    }} />\r\n\r\n                    <p className=\"ui-title\">Type</p>\r\n                    <Query query={GET_ALL_ICON_TYPES}>\r\n                        {({ data }) => (\r\n                            <Toggler options={{\r\n                                state: iconType,\r\n                                handler: (item) => {\r\n                                    setIconType(item)\r\n                                    elevate()\r\n                                },\r\n                                targets: [\r\n                                    ...data.allIconTypes.map((item, key) => ({\r\n                                        type: item,\r\n                                        value: (\r\n                                            <Row key={key}>\r\n                                                <p>{item}</p>\r\n                                            </Row>\r\n                                        )}))\r\n                                ]}}\r\n                            />\r\n                        )}\r\n                    </Query>\r\n                </React.Fragment>\r\n            )}\r\n        </Form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\nimport Query from './ui/Query'\r\nimport Subscription from './ui/Subscription'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\nimport FormIcon from './forms/Icon'\r\nimport DeleteEntries from './forms/Delete'\r\nimport { GET_ALL_ICONS, SUB_ALL_ICONS, DELETE_ICONS } from '../utils/queries'\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Icons</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_ICONS}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_ICONS} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.icons) || data.allIcons),\r\n                                    dataTable: ((subData && subData.icons) || data.allIcons).map(icon => ([\r\n                                        { header: 'ID', value: icon.id, type: 'text', visible: false },\r\n                                        { header: 'Изображение', value: icon.path, type: 'icon' },\r\n                                        { header: 'Тип', value: icon.type, type: 'text' },\r\n                                        { header: 'Название', value: icon.name, type: 'text', visible: false },\r\n                                        { header: 'Дата изменения', value: <Moment date={new Date(new Date().setTime(icon.updatedAt))} format=\"DD.MM.YYYY\" />, type: 'text', visible: false },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(icon.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Delete Icon',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_ICONS}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, entries) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            id: (entry)\r\n                                                                                ? [{\r\n                                                                                    id: entry.id,\r\n                                                                                    user: entry.user.id\r\n                                                                                }]\r\n                                                                                : entries.map(ent => ent._id)\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const icon = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!icon)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!icon),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (icon) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Edit Icon',\r\n                                                        component: ({ close }) => <FormIcon\r\n                                                            edit\r\n                                                            document={icon}\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }], true)\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'icon active',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Add Icon',\r\n                                                        component: ({ close }) => <FormIcon\r\n                                                            add\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }\r\n                                                ], true)\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React from 'react'\r\nimport Row from './ui/Row'\r\nimport Headline from './ui/Headline'\r\nimport Message from './ui/Message'\r\nimport './styles/Table.css'\r\n\r\nexport default () => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Pets</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n                \r\n                <Message text=\"In Development\" padding />\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport Query from '../ui/Query'\r\nimport Form from '../ui/Form'\r\nimport Select from '../ui/Select'\r\nimport Input from '../ui/Input'\r\nimport { GET_ALL_PERMITIONS, ADD_ROLE, EDIT_ROLE } from '../../utils/queries'\r\n\r\nexport default ({\r\n    document,\r\n    close,\r\n    add=false,\r\n    edit=false\r\n}) => {\r\n    const [variables, setVariables] = useState({})\r\n\r\n    const [permissions, setPermissions] = useState(document?.permissions?.map(p => ({\r\n        value: p, label: p\r\n    })))\r\n\r\n    const variablesCompose = (form, options) => {\r\n        return {\r\n            ...options,\r\n            name: form.name\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const options = {\r\n            permissions: permissions.map(p => p.value)\r\n        }\r\n        if (edit) options.id = document._id\r\n        setVariables((vars) => ({\r\n            ...vars,\r\n            ...options\r\n        }))\r\n    }, [permissions, edit, document])\r\n\r\n    return (\r\n        <Form\r\n            add={add}\r\n            edit={edit}\r\n            query={(add) ? ADD_ROLE : EDIT_ROLE}\r\n            variables={variables}\r\n            beforeEffect={(form, options) => variablesCompose(form, options)}\r\n            afterEffect={close}\r\n        >\r\n            {({ elevate, register, loading }) => (\r\n                <React.Fragment>\r\n                    <Input options={{\r\n                        ref: register({ required: true }),\r\n                        type: 'text',\r\n                        name: 'name',\r\n                        defaultValue: document.name,\r\n                        placeholder: 'Enter name',\r\n                        disabled: loading\r\n                    }} />\r\n\r\n                    <Query query={GET_ALL_PERMITIONS} pseudo={{ count: 1, height: 45 }}>\r\n                        {({ data }) => (\r\n                            <Select options={{\r\n                                value: permissions,\r\n                                options: data.allPermissions.map(p => ({\r\n                                    value: p,\r\n                                    label: p\r\n                                })),\r\n                                closeMenuOnSelect: false,\r\n                                isMulti: true,\r\n                                onChange: (e) => {\r\n                                    setPermissions(e)\r\n                                    elevate()\r\n                                }\r\n                            }} />\r\n                        )}\r\n                    </Query>\r\n                </React.Fragment>\r\n            )}\r\n        </Form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\nimport Query from './ui/Query'\r\nimport Subscription from './ui/Subscription'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\nimport FormRole from './forms/Role'\r\nimport DeleteEntries from './forms/Delete'\r\nimport {\r\n    GET_ALL_ROLES,\r\n    DELETE_ROLES,\r\n    SUB_ALL_ROLES\r\n} from '../utils/queries'\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Roles</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_ROLES}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_ROLES} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.roles) || data.allRoles),\r\n                                    dataTable: ((subData && subData.roles) || data.allRoles).map(role => ([\r\n                                        { header: 'ID', value: role.id, type: 'text', visible: false },\r\n                                        { header: 'Имя', value: role.name, type: 'text' },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(role.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Delete Role?',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_ROLES}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, docs) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            id: (entry)\r\n                                                                                ? [entry.id]\r\n                                                                                : docs.map(doc => doc._id)\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const role = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!role)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!role),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (role) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Edit Role',\r\n                                                        component: ({ close }) => <FormRole\r\n                                                            edit\r\n                                                            document={role}\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }], true)\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'active icon',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Add Role',\r\n                                                        component: ({ close }) => <FormRole\r\n                                                            add\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }\r\n                                                ], true)\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport Query from '../ui/Query'\r\nimport Form from '../ui/Form'\r\nimport Input from '../ui/Input'\r\nimport List from '../ui/List'\r\nimport { GET_ALL_ICONS, ADD_LANGUAGE, EDIT_LANGUAGE } from '../../utils/queries'\r\nimport { config } from '../../utils/config'\r\n\r\nconst api = config.get('api')\r\n\r\nexport default ({\r\n    document,\r\n    close,\r\n    add=false,\r\n    edit=false\r\n}) => {\r\n    const [variables, setVariables] = useState({})\r\n\r\n    const [flag, setFlag] = useState(document?.flag)\r\n    \r\n    const variablesCompose = (form, options) => {\r\n        return {\r\n            ...options,\r\n            ...variables,\r\n            code: form.code,\r\n            title: form.title\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const options = {\r\n            flag: flag.id\r\n        }\r\n        if (edit) options.id = document._id\r\n        setVariables((vars) => ({\r\n            ...vars,\r\n            ...options\r\n        }))\r\n    }, [flag, edit, document])\r\n\r\n    return (\r\n        <Form\r\n            add={add}\r\n            edit={edit}\r\n            query={(add) ? ADD_LANGUAGE : EDIT_LANGUAGE}\r\n            variables={variables}\r\n            beforeEffect={(form, options) => variablesCompose(form, options)}\r\n            afterEffect={close}\r\n        >\r\n            {({ elevate, register, loading }) => (\r\n                <React.Fragment>\r\n                    <Input options={{\r\n                        ref: register({ required: true }),\r\n                        type: 'text',\r\n                        name: 'code',\r\n                        value: document.code,\r\n                        placeholder: 'Enter code',\r\n                        disabled: loading\r\n                    }} />\r\n\r\n                    <Input options={{\r\n                        ref: register({ required: true }),\r\n                        type: 'text',\r\n                        name: 'title',\r\n                        value: document.title,\r\n                        placeholder: 'Enter title',\r\n                        disabled: loading\r\n                    }} />\r\n\r\n                    <Query query={GET_ALL_ICONS} variables={{ type: 'FLAG' }} pseudo={{ count: 1, height: 45 }}>\r\n                        {({ data }) => (\r\n                            <List options={{\r\n                                type: 'grid',\r\n                                state: flag,\r\n                                list: data.allFlags,\r\n                                handlerItem: (item) => {\r\n                                    setFlag(item)\r\n                                    elevate()\r\n                                }\r\n                            }}>\r\n                                {({ item }) => (\r\n                                    <img\r\n                                        className=\"image\"\r\n                                        src={(item.path).replace('./', `${api}/`)}\r\n                                        alt=\"Flag\"\r\n                                    />\r\n                                )}\r\n                            </List>\r\n                        )}\r\n                    </Query>\r\n                </React.Fragment>\r\n            )}\r\n        </Form>\r\n    )\r\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPen,\r\n    faPlus,\r\n    faTrash\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Moment from 'react-moment'\r\nimport Subscription from './ui/Subscription'\r\nimport Query from './ui/Query'\r\nimport Table from './ui/Table'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Headline from './ui/Headline'\r\nimport FormLanguage from './forms/Language'\r\nimport DeleteEntries from './forms/Delete'\r\nimport { GET_ALL_LANGUAGES, SUB_ALL_LANGUAGES, DELETE_LANGUAGES } from '../utils/queries'\r\nimport './styles/Table.css'\r\n\r\nexport default ({ showModal }) => {\r\n    return (\r\n        <main className=\"dashboard\">\r\n            <aside>\r\n                <Row type=\"flex sb\">\r\n                    <Headline>\r\n                        <span>Language</span>\r\n                        <span>Manage</span>\r\n                    </Headline>\r\n                </Row>\r\n\r\n                <Query query={GET_ALL_LANGUAGES}>\r\n                    {({ data, refetch }) => (\r\n                        <Subscription query={SUB_ALL_LANGUAGES} refetch={refetch}>\r\n                            {({ subData }) => (\r\n                                <Table options={{\r\n                                    data: ((subData && subData.languages) || data.allLanguages),\r\n                                    dataTable: ((subData && subData.languages) || data.allLanguages).map(language => ([\r\n                                        { header: 'ID', value: language.id, type: 'text', visible: false },\r\n                                        { header: 'Иконка', value: language?.flag?.path || null, type: 'icon' },\r\n                                        { header: 'Код', value: language.code, type: 'text' },\r\n                                        { header: 'Название', value: language.title, type: 'text' },\r\n                                        { header: 'Дата изменения', value: <Moment date={new Date(new Date().setTime(language.updatedAt))} format=\"DD.MM.YYYY\" />, type: 'text', visible: false },\r\n                                        { header: 'Дата создания', value: <Moment date={new Date(new Date().setTime(language.createdAt))} format=\"DD.MM.YYYY\" />, type: 'text' }\r\n                                    ])),\r\n                                    actions: [\r\n                                        ({ table, dishands }) => (\r\n                                            <Button options={{\r\n                                                state: (dishands) ? 'disable icon inactive' : 'active icon',\r\n                                                disabled: dishands,\r\n                                                classNames: 'stretch',\r\n                                                handler: () => {\r\n                                                    showModal([\r\n                                                        {\r\n                                                            path: '/',\r\n                                                            title: 'Delete Language',\r\n                                                            component: ({ close }) => <DeleteEntries\r\n                                                                query={DELETE_LANGUAGES}\r\n                                                                entries={table.filter(t => t.checked)}\r\n                                                                handler={async (action, entry, docs) => {\r\n                                                                    await action({\r\n                                                                        variables: {\r\n                                                                            id: (entry)\r\n                                                                                ? [entry.id]\r\n                                                                                : docs.map(doc => doc._id)\r\n                                                                        }\r\n                                                                    })\r\n                                                                }}\r\n                                                                close={close}\r\n                                                            />\r\n                                                        }\r\n                                                    ], true)\r\n                                                }\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faTrash} />\r\n                                            </Button>\r\n                                        ),\r\n                                        ({ table, dishands }) => {\r\n                                            const docs = table.filter(t => t.checked)\r\n                                            const language = (docs.length === 1) ? docs[0] : false\r\n                                            return (\r\n                                                <Button options={{\r\n                                                    state: (dishands || (!language)) ? 'disable icon inactive' : 'active icon',\r\n                                                    disabled: dishands || (!language),\r\n                                                    classNames: 'stretch',\r\n                                                    handler: () => (language) && showModal([{\r\n                                                        path: '/',\r\n                                                        title: 'Edit Language',\r\n                                                        component: ({ close }) => <FormLanguage\r\n                                                            edit\r\n                                                            document={language}\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }], true)\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faPen} />\r\n                                                </Button>\r\n                                            )\r\n                                        },\r\n                                        () => (\r\n                                            <Button options={{\r\n                                                state: 'icon active',\r\n                                                classNames: 'stretch',\r\n                                                handler: () => showModal([\r\n                                                    {\r\n                                                        path: '/',\r\n                                                        title: 'Add Language',\r\n                                                        component: ({ close }) => <FormLanguage\r\n                                                            add\r\n                                                            close={close}\r\n                                                        />\r\n                                                    }\r\n                                                ], true)\r\n                                            }}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        )\r\n                                    ]\r\n                                }} />\r\n                            )}\r\n                        </Subscription>\r\n                    )}\r\n                </Query>\r\n            </aside>\r\n        </main>\r\n    )\r\n}","import React from 'react'\r\nimport Home from './components/Home'\r\nimport Users from './components/Users'\r\nimport Posts from './components/Posts'\r\nimport Acts from './components/Acts'\r\nimport Hubs from './components/Hubs'\r\nimport Tours from './components/Tours'\r\nimport Chats from './components/Chats'\r\nimport Images from './components/Images'\r\nimport Avatars from './components/Avatars'\r\nimport Icons from './components/Icons'\r\nimport Pets from './components/Pets'\r\nimport Roles from './components/Roles'\r\nimport Languages from './components/Languages'\r\n\r\nexport default [\r\n    {\r\n        exact: true,\r\n        path: '/',\r\n        component: ({ showModal, hideModal }) => <Home showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/users',\r\n        component: ({ showModal, hideModal }) => <Users showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/posts',\r\n        component: ({ showModal, hideModal }) => <Posts showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/hubs',\r\n        component: ({ showModal, hideModal }) => <Hubs showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/chats',\r\n        component: ({ showModal, hideModal }) => <Chats showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/tours',\r\n        component: ({ showModal, hideModal }) => <Tours showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/acts',\r\n        component: ({ showModal, hideModal }) => <Acts showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/pets',\r\n        component: ({ showModal, hideModal }) => <Pets showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/roles',\r\n        component: ({ showModal, hideModal }) => <Roles showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/images',\r\n        component: ({ showModal, hideModal }) => <Images showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/avatars',\r\n        component: ({ showModal, hideModal }) => <Avatars showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/icons',\r\n        component: ({ showModal, hideModal }) => <Icons showModal={showModal} hideModal={hideModal} />\r\n    },\r\n    {\r\n        exact: true,\r\n        path: '/languages',\r\n        component: ({ showModal, hideModal }) => <Languages showModal={showModal} hideModal={hideModal} />\r\n    }\r\n]","import React, { useState, useEffect, useContext } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Switch, Route, Redirect, NavLink } from 'react-router-dom'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faUsers,\r\n    faNewspaper,\r\n    faGamepad,\r\n    faPaw,\r\n    faEye,\r\n    faImage,\r\n    faGlobeAsia,\r\n    faPaperPlane,\r\n    faTrophy,\r\n    faBell,\r\n    faRocket,\r\n    faTheaterMasks,\r\n    faIcons,\r\n    faCog,\r\n    faBars\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport { AuthContext } from './context/Auth'\r\nimport Row from './ui/Row'\r\nimport Button from './ui/Button'\r\nimport Navigation from './ui/Navigation'\r\nimport Modal from './ui/Modal'\r\nimport ViewEmpty from './views/Empty'\r\nimport ViewNotifications from './views/Notifications'\r\nimport ViewMenu from './views/Menu'\r\nimport {\r\n    SettingsEditProfileContent,\r\n    SettingsHomeContent,\r\n    SettingsQuestionContent,\r\n    SettingsLanguageContent\r\n} from './views/Settings'\r\nimport Auth from './Auth'\r\nimport SVGLogo from '../assets/images/logo'\r\nimport routes from '../routes'\r\nimport '../assets/styles/App.css'\r\n\r\nconst Content = () => {\r\n    const state = useSelector(state => state)\r\n\r\n    const { logout } = useContext(AuthContext)\r\n\r\n    const [closeByBackground, setClosedByBackground] = useState(true)\r\n    const [content, setModal] = useState()\r\n    const [center, setCenterModal] = useState(false)\r\n  \r\n    const showModal = (content, center=false) => {\r\n        setModal(content)\r\n        setCenterModal(center)\r\n        document.body.style.overflow = 'hidden'\r\n    }\r\n    const hideModal = () => {\r\n        setModal(null)\r\n        setCenterModal(false)\r\n        document.body.style.overflow = 'initial'\r\n    }\r\n    \r\n    const getOptions = (routes, isCenter=true) => ({\r\n        type: 'large-round',\r\n        handler: () => showModal(routes, isCenter)\r\n    })\r\n\r\n    useEffect(() => {\r\n        if ((state.user) && !state.user.avatar) {\r\n            setClosedByBackground(false)\r\n            showModal([\r\n                {\r\n                    path: '/',\r\n                    title: 'Choose your Avatar',\r\n                    component: () => <ViewEmpty />\r\n                }\r\n            ], true)\r\n        }\r\n    }, [state.user, logout])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Navigation options={{\r\n                dashboard: true,\r\n                left: [\r\n                    <NavLink\r\n                        exact\r\n                        className=\"wide\"\r\n                        to={'/'}\r\n                    >\r\n                        <Row>\r\n                            <p className=\"icon\">\r\n                                {SVGLogo}\r\n                            </p>\r\n                            <p>Dashboard</p>\r\n                        </Row>\r\n                    </NavLink>,\r\n                    <NavLink\r\n                        exact\r\n                        to={'/users'}\r\n                    >\r\n                        <Row>\r\n                            <p className=\"icon\">\r\n                                <FontAwesomeIcon icon={faUsers} />\r\n                            </p>\r\n                            <p>Users</p>\r\n                        </Row>\r\n                    </NavLink>,\r\n                    <NavLink\r\n                        exact\r\n                        to={'/posts'}\r\n                    >\r\n                        <Row>\r\n                            <p className=\"icon\">\r\n                                <FontAwesomeIcon icon={faNewspaper} />\r\n                            </p>\r\n                            <p>Posts</p>\r\n                        </Row>\r\n                    </NavLink>,\r\n                    <NavLink\r\n                        exact\r\n                        to={'/hubs'}\r\n                    >\r\n                        <Row>\r\n                            <p className=\"icon\">\r\n                                <FontAwesomeIcon icon={faGamepad} />\r\n                            </p>\r\n                            <p>Hubs</p>\r\n                        </Row>\r\n                    </NavLink>,\r\n                    <NavLink\r\n                        exact\r\n                        to={'/chats'}\r\n                    >\r\n                        <Row>\r\n                            <p className=\"icon\">\r\n                                <FontAwesomeIcon icon={faPaperPlane} />\r\n                            </p>\r\n                            <p>Chats</p>\r\n                        </Row>\r\n                    </NavLink>,\r\n                    <NavLink\r\n                        exact\r\n                        to={'/tours'}\r\n                    >\r\n                        <Row>\r\n                            <p className=\"icon\">\r\n                                <FontAwesomeIcon icon={faTrophy} />\r\n                            </p>\r\n                            <p>Tours</p>\r\n                        </Row>\r\n                    </NavLink>,\r\n                    <NavLink\r\n                        exact\r\n                        to={'/pets'}\r\n                    >\r\n                        <Row>\r\n                            <p className=\"icon\">\r\n                                <FontAwesomeIcon icon={faPaw} />\r\n                            </p>\r\n                            <p>Pets</p>\r\n                        </Row>\r\n                    </NavLink>,\r\n                    <NavLink\r\n                        exact\r\n                        to={'/acts'}\r\n                    >\r\n                        <Row>\r\n                            <p className=\"icon\">\r\n                                <FontAwesomeIcon icon={faRocket} />\r\n                            </p>\r\n                            <p>Acts</p>\r\n                        </Row>\r\n                    </NavLink>,\r\n                    <NavLink\r\n                        exact\r\n                        to={'/roles'}\r\n                    >\r\n                        <Row>\r\n                            <p className=\"icon\">\r\n                                <FontAwesomeIcon icon={faEye} />\r\n                            </p>\r\n                            <p>Roles</p>\r\n                        </Row>\r\n                    </NavLink>,\r\n                    <NavLink\r\n                        exact\r\n                        to={'/images'}\r\n                    >\r\n                        <Row>\r\n                            <p className=\"icon\">\r\n                                <FontAwesomeIcon icon={faImage} />\r\n                            </p>\r\n                            <p>Images</p>\r\n                        </Row>\r\n                    </NavLink>,\r\n                    <NavLink\r\n                        exact\r\n                        to={'/avatars'}\r\n                    >\r\n                        <Row>\r\n                            <p className=\"icon\">\r\n                                <FontAwesomeIcon icon={faTheaterMasks} />\r\n                            </p>\r\n                            <p>Avatars</p>\r\n                        </Row>\r\n                    </NavLink>,\r\n                    <NavLink\r\n                        exact\r\n                        to={'/icons'}\r\n                    >\r\n                        <Row>\r\n                            <p className=\"icon\">\r\n                                <FontAwesomeIcon icon={faIcons} />\r\n                            </p>\r\n                            <p>Icons</p>\r\n                        </Row>\r\n                    </NavLink>,\r\n                    <NavLink\r\n                        exact\r\n                        to={'/languages'}\r\n                    >\r\n                        <Row>\r\n                            <p className=\"icon\">\r\n                                <FontAwesomeIcon icon={faGlobeAsia} />\r\n                            </p>\r\n                            <p>Languages</p>\r\n                        </Row>\r\n                    </NavLink>\r\n                ],\r\n                right: [\r\n                    <Button options={getOptions([\r\n                        {\r\n                            path: '/',\r\n                            title: 'Notifications',\r\n                            component: () => <ViewNotifications />\r\n                        }\r\n                    ])}>\r\n                        <Row>\r\n                            <p className=\"icon\">\r\n                                <FontAwesomeIcon icon={faBell} />\r\n                            </p>\r\n                            <p>Notifications</p>\r\n                        </Row>\r\n                    </Button>,\r\n                    <Button options={getOptions([\r\n                        {\r\n                            path: '/',\r\n                            title: 'Settings',\r\n                            component: ({ jump, close }) => <SettingsHomeContent jump={jump} close={close} />\r\n                        },\r\n                        {\r\n                            path: '/edit',\r\n                            title: 'Edit Profile',\r\n                            component: ({ jump }) => <SettingsEditProfileContent jump={jump} />\r\n                        },\r\n                        {\r\n                            path: '/privacy-and-security',\r\n                            title: 'Privacy and Security',\r\n                            component: ({ jump }) => <ViewEmpty jump={jump} /> //<SettingsPrivacySecurityContent jump={jump} />\r\n                        },\r\n                        {\r\n                            path: '/language',\r\n                            title: 'Select language',\r\n                            component: ({ back }) => <SettingsLanguageContent back={back} />\r\n                        },\r\n                        {\r\n                            path: '/ask-a-question',\r\n                            title: 'Ask a Question',\r\n                            component: ({ back }) => <SettingsQuestionContent back={back} />\r\n                        }\r\n                    ])}>\r\n                        <Row>\r\n                            <p className=\"icon\">\r\n                                <FontAwesomeIcon icon={faCog} />\r\n                            </p>\r\n                            <p>Settings</p>\r\n                        </Row>\r\n                    </Button>,\r\n                    <Button options={getOptions([\r\n                        {\r\n                            path: '/',\r\n                            title: 'Menu',\r\n                            component: ({ close }) => <ViewMenu close={close} />\r\n                        }\r\n                    ])}>\r\n                        <FontAwesomeIcon icon={faBars} />\r\n                    </Button>\r\n                ]\r\n            }} />\r\n\r\n            <Switch>\r\n                {routes.map((props, key) =>\r\n                    <Route\r\n                        {...props}\r\n                        key={key}\r\n                        component={() => props.component({ showModal, hideModal })}\r\n                    />\r\n                )}\r\n                <Redirect to=\"/\" />\r\n            </Switch>\r\n            \r\n            <Modal options={{\r\n                routes: content,\r\n                closeByBackground,\r\n                center, hideModal\r\n            }} />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default () => {\r\n    const { isAuthenticated } = useContext(AuthContext)\r\n\r\n    return (\r\n        <Switch>\r\n            {(isAuthenticated && \r\n                <Route\r\n                    path=\"/\"\r\n                    component={({ showModal }) =>\r\n                        <Content showModal={showModal} />\r\n                    }\r\n                />\r\n            )}\r\n\r\n            {(!isAuthenticated) && (\r\n                <React.Fragment>\r\n                    <Route\r\n                        path=\"/auth\"\r\n                        component={({ showModal }) =>\r\n                            <Auth showModal={showModal} />\r\n                        }\r\n                    />\r\n                    <Redirect to=\"/auth\" />\r\n                </React.Fragment>\r\n            )}\r\n        </Switch>\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\nimport { AuthContext } from './context/Auth'\r\nimport { useAuth } from '../hooks/auth.hook'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport Row from './ui/Row'\r\nimport Container from './ui/Container'\r\nimport Alert from './ui/Alert'\r\nimport Skeleton from './ui/Skeleton'\r\nimport Main from './Main'\r\nimport { setUser } from '../utils/actions'\r\nimport { GET_USER } from '../utils/queries'\r\nimport '../assets/styles/App.css'\r\n\r\nconst SkeletonContent = () => (\r\n  <main className=\"skeleton\">\r\n      <aside>\r\n          <Container>\r\n              <Skeleton options={{ height: '85px' }} />\r\n              <Skeleton options={{ height: '45px' }} />\r\n          </Container>\r\n          <Container>\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n          </Container>\r\n      </aside>\r\n      \r\n      <aside>\r\n          <Row type=\"flex\">\r\n              <Skeleton options={{ height: '45px' }} />\r\n              <Skeleton options={{ height: '45px' }} />\r\n              <Skeleton options={{ height: '45px' }} />\r\n              <Skeleton options={{ height: '45px' }} />\r\n              <Skeleton options={{ height: '45px' }} />\r\n          </Row>\r\n          <Row type=\"flex\">\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n          </Row>\r\n      </aside>\r\n      \r\n      <aside>\r\n          <Container>\r\n              <Skeleton options={{ height: '85px' }} />\r\n              <Skeleton options={{ height: '45px' }} />\r\n          </Container>\r\n          <Container>\r\n              <Skeleton />\r\n              <Skeleton />\r\n              <Skeleton />\r\n          </Container>\r\n      </aside>\r\n  </main>\r\n)\r\n\r\nexport default () => {\r\n  const { sessionID, login, logout } = useAuth()\r\n  const isAuthenticated = !!sessionID\r\n\r\n  const state = useSelector(state => state)\r\n  const dispatch = useDispatch()\r\n\r\n  const { data, loading, error } = useQuery(GET_USER)\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      if (data.getUser) dispatch(setUser(data.getUser))\r\n      else logout()\r\n    }\r\n  }, [data, logout, dispatch])\r\n\r\n  if (loading && !state.user) {\r\n    return <SkeletonContent />\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <main className=\"alert\">\r\n        <Alert type=\"error\" message=\"Sorry, site is temporarily unavailable\" />\r\n      </main>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={{\r\n      sessionID, login, logout, isAuthenticated\r\n    }}>\r\n      <div className=\"app\">\r\n        <Router>\r\n          <Main />\r\n        </Router>\r\n      </div>\r\n    </AuthContext.Provider>\r\n  )\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { ApolloClient } from 'apollo-client'\r\nimport { InMemoryCache } from 'apollo-cache-inmemory'\r\nimport { ApolloProvider } from '@apollo/react-hooks'\r\nimport { split } from '@apollo/client'\r\nimport { getMainDefinition } from '@apollo/client/utilities'\r\nimport { WebSocketLink } from '@apollo/client/link/ws'\r\nimport { createUploadLink } from 'apollo-upload-client'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport storeFactory from './storeFactory'\r\nimport App from './components/App'\r\nimport { config } from './utils/config'\r\nimport './index.css'\r\n\r\nconst api = config.get('api')\r\nconst apiWs = config.get('apiWs')\r\n\r\nconst wsLink = new WebSocketLink({\r\n  uri: `${apiWs}/graphql`,\r\n  options: {\r\n    reconnect: true\r\n  }\r\n})\r\n\r\nconst uploadLink = createUploadLink({\r\n  uri: `${api}/graphql`,\r\n  credentials: 'include'\r\n})\r\n\r\nconst splitLink = split(\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query);\r\n    return (\r\n      definition.kind === 'OperationDefinition' &&\r\n      definition.operation === 'subscription'\r\n    )\r\n  },\r\n  wsLink,\r\n  uploadLink\r\n)\r\n\r\nconst client = new ApolloClient({\r\n  link: splitLink,\r\n  cache: new InMemoryCache()\r\n})\r\n\r\nconst store = storeFactory\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </ApolloProvider>,\r\n  document.getElementById('root')\r\n)\r\n\r\nserviceWorker.unregister()"],"sourceRoot":""}